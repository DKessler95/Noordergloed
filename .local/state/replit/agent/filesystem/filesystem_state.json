{"file_contents":{"README.md":{"content":"# Brouwerij Noordergloed - Artisanale Kombucha & Workshops\n\nEen moderne e-commerce website voor artisanale kombucha en workshops, gevestigd in Groningen.\n\n## Functies\n\n- **Productcatalogus**: Vlierbloesem en rozen siropen met stockindicatoren\n- **Ramen Pre-orders**: Chicken Shoyu Ramen reserveringssysteem\n- **Admin Dashboard**: Productbeheer en orderoverzicht\n- **Email Notificaties**: Automatische bevestigingen via Mailjet\n- **Responsive Design**: Mobile-first ontwerp met dark mode\n\n## Tech Stack\n\n- **Frontend**: React + TypeScript, Tailwind CSS, Shadcn/ui\n- **Backend**: Express.js, Node.js\n- **Database**: PostgreSQL met Drizzle ORM\n- **Email**: Mailjet API\n- **State Management**: TanStack Query\n- **Routing**: Wouter\n\n## Installatie\n\n```bash\nnpm install\n```\n\n## Environment Variables\n\nMaak een `.env` bestand aan met:\n\n```env\nDATABASE_URL=your_postgresql_connection_string\nMAILJET_API_KEY=your_mailjet_api_key\nMAILJET_SECRET_KEY=your_mailjet_secret_key\n```\n\n## Database Setup\n\n```bash\nnpm run db:push\n```\n\n## Development\n\n```bash\nnpm run dev\n```\n\nDe applicatie draait op http://localhost:5000\n\n## Production Build\n\n```bash\nnpm run build\nnpm start\n```\n\n## Admin Toegang\n\n- Username: `admin`\n- Password: `PlukPoot2025!Secure#Admin`\n\n## Deployment\n\nDeze applicatie is geoptimaliseerd voor deployment op Render met:\n- Automatische builds\n- PostgreSQL database integratie\n- Environment variables management\n\n## Contact\n\nVoor vragen over de producten: Star Numanstraat, Groningen","size_bytes":1483},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md - Brouwerij Noordergloed Kombucha Platform\n\n## Overview\n\nThis is a modern e-commerce website for artisanal kombucha and workshop bookings based in Groningen, Netherlands. The application features a product catalog for handmade ginger and berry kombucha, a dedicated workshops page with capacity-managed enrollment system, admin dashboard, email notifications, and responsive design with dark mode support.\n\n**Recent Changes (Jan 2025):**\n- Migrated from MemStorage to DatabaseStorage with PostgreSQL for persistent data\n- Implemented workshop enrollment system with capacity tracking and \"Volgeboekt\" status\n- Added dedicated /workshops page with workshop registration functionality  \n- Restored Chicken Shoyu image for workshop display\n- Database seeding automatically creates kombucha products and admin user on first run\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and better development experience\n- **Styling**: Tailwind CSS for utility-first styling with shadcn/ui component library\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Session Management**: Express-session for admin authentication\n- **Email Service**: Gmail SMTP for transactional emails (with fallback Mailjet configuration)\n\n### Database Schema\nThe application uses PostgreSQL with five main tables:\n- **products**: Stores kombucha and workshop product information with stock management\n- **orders**: Handles kombucha orders with customer details and delivery information  \n- **workshopOrders**: Manages kombucha workshop bookings with date-based scheduling\n- **contactMessages**: Stores customer inquiries and feedback\n- **adminUsers**: Admin authentication with hashed passwords and role management\n\n## Key Components\n\n### Product Management\n- Product catalog with stock indicators and real-time updates\n- Dual product types: kombucha (direct purchase) and workshops (booking system)\n- Admin CRUD operations for product management\n- Stock tracking with low-stock alerts\n\n### Order System  \n- **Kombucha Orders**: Direct ordering with customer information and delivery options\n- **Workshop Bookings**: Capacity-managed enrollment system (12 spots per workshop)\n- **Workshop Registration**: Dedicated /workshops page with name, email, phone collection\n- **Capacity Tracking**: Real-time stock updates with \"Volgeboekt\" status when full\n- Order status management (pending, confirmed, completed, cancelled)\n- Email confirmations for all order types\n\n### Authentication\n- Session-based admin authentication\n- Protected admin routes and dashboard\n- Role-based access control\n\n### Email Notifications\n- Automated customer confirmations\n- Admin notifications for new orders\n- Ramen event confirmations when minimum capacity reached\n- Contact form submissions\n\n## Data Flow\n\n1. **Product Display**: Client fetches products from `/api/products`, displays with real-time stock\n2. **Order Placement**: \n   - Syrup orders go to `/api/orders/syrup`\n   - Ramen orders go to `/api/orders/ramen`\n3. **Email Flow**: Order creation triggers email notifications via Gmail SMTP\n4. **Admin Management**: Protected dashboard allows product/order management\n5. **Real-time Updates**: TanStack Query handles cache invalidation for live updates\n\n## External Dependencies\n\n### Email Service\n- **Primary**: Gmail SMTP (dckessler95@gmail.com) with app password\n- **Fallback**: Mailjet API configuration available but not actively used\n- Handles order confirmations, admin notifications, and contact submissions\n\n### Database\n- **Production**: Neon PostgreSQL serverless database\n- **ORM**: Drizzle with type-safe schema definitions\n- Connection pooling for efficient database operations\n\n### UI Components\n- **shadcn/ui**: Pre-built accessible components\n- **Radix UI**: Underlying primitive components\n- **Lucide Icons**: Consistent icon system\n- **Google Fonts**: Inter and Playfair Display typography\n\n## Deployment Strategy\n\n### Build Process\n- **Frontend**: Vite builds React app to `dist/public`\n- **Backend**: esbuild compiles Express server to `dist/index.js`\n- **Database**: Drizzle migrations handle schema changes\n\n### Environment Configuration\nRequired environment variables:\n- `DATABASE_URL`: PostgreSQL connection string\n- `MAILJET_API_KEY` & `MAILJET_SECRET_KEY`: Email service credentials (optional)\n- Gmail credentials embedded in code for primary email service\n\n### Production Considerations\n- Session secret should be environment-specific in production\n- HTTPS required for secure sessions\n- Database connection pooling configured for serverless deployment\n- Static assets served efficiently with proper caching headers\n\n### Development Workflow\n- `npm run dev`: Starts development server with hot reload\n- `npm run db:push`: Applies database schema changes\n- `npm run build`: Creates production build\n- `npm start`: Runs production server\n\nThe application is designed for easy deployment on platforms like Replit, with automatic asset serving and proper path resolution for both development and production environments.","size_bytes":5448},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"vite.production.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  build: {\n    outDir: \"dist/public\",\n    emptyOutDir: true,\n  },\n});","size_bytes":420},"backup/README.md":{"content":"# Pluk & Poot Syrup Website Backup\n\nThis backup contains the complete syrup website with:\n- Vlierbloesem (Elderflower) Siroop\n- Rozen (Rose) Siroop  \n- Chicken Shoyu Ramen pre-orders\n- Admin dashboard\n- Email notifications via Gmail\n- Custom domain: limonade.digimaatwerk.nl\n\n## Backup Date\nJanuary 28, 2025\n\n## Admin Credentials\n- Username: admin\n- Password: PlukPoot2025!Secure#Admin\n\n## Original Features\n- Product catalog with stock management\n- Order system for syrups\n- Ramen pre-order system (minimum 6 people)\n- Email confirmations\n- Admin CRUD operations\n- Dutch language interface\n- Responsive design with dark mode\n\nThis backup was created before converting to kombucha website.","size_bytes":689},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/gmail-ramen.ts":{"content":"import { sendEmail } from './gmail';\n\n// Customer confirmation email for new ramen order\nexport async function sendWorkshopOrderConfirmation(orderData: any): Promise<boolean> {\n  console.log('sendWorkshopOrderConfirmation called with data:', JSON.stringify(orderData, null, 2));\n  \n  const textContent = `\nHallo ${orderData.customerName},\n\nBedankt voor je ramen reservering bij Pluk & Poot!\n\nJe reservering:\nDatum: ${orderData.preferredDate}\nAantal personen: ${orderData.servings}\nStatus: In afwachting van bevestiging\n${orderData.notes ? `Opmerkingen: ${orderData.notes}` : ''}\n\nWe bevestigen je reservering zodra we minimaal 6 personen hebben voor deze datum.\nJe ontvangt een bevestigingsmail zodra het evenement definitief doorgaat.\n\nTelefoon: ${orderData.customerPhone}\nEmail: ${orderData.customerEmail}\n\nMet vriendelijke groet,\nDamian van Pluk & Poot\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🍜 Ramen Reservering Ontvangen</h1>\n      \n      <p>Hallo ${orderData.customerName},</p>\n      \n      <p>Bedankt voor je ramen reservering bij <strong>Pluk & Poot</strong>!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Je Reservering:</h3>\n        <p><strong>Datum:</strong> ${orderData.preferredDate}</p>\n        <p><strong>Aantal personen:</strong> ${orderData.servings}</p>\n        <p><strong>Status:</strong> In afwachting van bevestiging</p>\n        ${orderData.notes ? `<p><strong>Opmerkingen:</strong> ${orderData.notes}</p>` : ''}\n        \n        <div style=\"background-color: #ddd6fe; padding: 15px; border-radius: 5px; margin-top: 15px;\">\n          <p style=\"margin: 0;\"><strong>📞 Contact:</strong></p>\n          <p style=\"margin: 5px 0;\">Telefoon: ${orderData.customerPhone}</p>\n          <p style=\"margin: 5px 0;\">Email: ${orderData.customerEmail}</p>\n        </div>\n      </div>\n      \n      <div style=\"background-color: #fef3c7; padding: 15px; border-radius: 10px; border-left: 4px solid #f59e0b;\">\n        <p style=\"margin: 0;\"><strong>ℹ️ Volgende stappen:</strong></p>\n        <p style=\"margin: 10px 0 0 0;\">We bevestigen je reservering zodra we minimaal 6 personen hebben voor deze datum. Je ontvangt een bevestigingsmail zodra het evenement definitief doorgaat.</p>\n      </div>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Damian van Pluk & Poot</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [orderData.customerEmail],\n    subject: \"Ramen Reservering Ontvangen - Pluk & Poot 🍜\",\n    textContent,\n    htmlContent\n  });\n}","size_bytes":2808},"server/gmail.ts":{"content":"import nodemailer from 'nodemailer';\n\n// Gmail SMTP configuration\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'dckessler95@gmail.com',\n    pass: 'ixyj ixjt imnb tvuu'\n  }\n});\n\ninterface EmailParams {\n  to: string[];\n  subject: string;\n  textContent: string;\n  htmlContent: string;\n  fromEmail?: string;\n  fromName?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    console.log('Sending email via Gmail SMTP to:', params.to);\n    \n    const mailOptions = {\n      from: `${params.fromName || 'Pluk & Poot'} <dckessler95@gmail.com>`,\n      to: params.to.join(', '),\n      subject: params.subject,\n      text: params.textContent,\n      html: params.htmlContent\n    };\n\n    const result = await transporter.sendMail(mailOptions);\n    console.log('Gmail email sent successfully:', result.messageId);\n    \n    // DO NOT SEND ADMIN COPY - this was causing duplicate emails\n    return true;\n  } catch (error) {\n    console.error('Gmail email error:', error);\n    return false;\n  }\n}\n\nexport async function sendWorkshopInvitation(emails: string[], date: string): Promise<boolean> {\n  const subject = `🍜 Ramen Ervaring Bevestiging - ${date}`;\n  \n  const textContent = `\nBeste ramen liefhebber,\n\nGeweldig nieuws! We hebben genoeg aanmeldingen voor de ramen ervaring op ${date}.\n\nDe ramen ervaring zal plaatsvinden bij Pluk & Poot met verse, lokale ingrediënten en authentieke Japanse smaken.\n\nDetails:\n- Datum: ${date}\n- Tijd: 18:00 - 20:00\n- Locatie: Pluk & Poot, Groningen\n- Prijs: €25 per persoon\n\nWe nemen binnenkort contact met je op voor de finale details en betalingsinstructies.\n\nMet vriendelijke groet,\nHet Pluk & Poot Team\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🍜 Ramen Ervaring Bevestiging</h1>\n      \n      <p>Beste ramen liefhebber,</p>\n      \n      <p><strong>Geweldig nieuws!</strong> We hebben genoeg aanmeldingen voor de ramen ervaring op <strong>${date}</strong>.</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Details van je Ramen Ervaring:</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li>📅 <strong>Datum:</strong> ${date}</li>\n          <li>🕕 <strong>Tijd:</strong> 18:00 - 20:00</li>\n          <li>📍 <strong>Locatie:</strong> Pluk & Poot, Groningen</li>\n          <li>💰 <strong>Prijs:</strong> €25 per persoon</li>\n        </ul>\n      </div>\n      \n      <p>De ramen ervaring wordt bereid met verse, lokale ingrediënten en authentieke Japanse smaken.</p>\n      \n      <p>We nemen binnenkort contact met je op voor de finale details en betalingsinstructies.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Het Pluk & Poot Team</strong></p>\n      </div>\n    </div>\n  `;\n\n  // Send to customer only, no admin copies\n  const result = await sendEmail({\n    to: emails,\n    subject,\n    textContent,\n    htmlContent\n  });\n  \n  // DO NOT send admin copy to prevent duplicate emails\n  return result;\n}\n\nexport async function sendAdminNotification(orderDetails: string): Promise<boolean> {\n  const subject = \"🔔 Nieuwe Ramen Bestelling - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuwe ramen bestelling binnengekomen op je website!\n\n${orderDetails}\n\nLog in op je admin dashboard om de bestelling te bekijken en te beheren.\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🔔 Nieuwe Ramen Bestelling</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuwe ramen bestelling binnengekomen op je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <pre style=\"white-space: pre-wrap; font-family: monospace;\">${orderDetails}</pre>\n      </div>\n      \n      <p>Log in op je admin dashboard om de bestelling te bekijken en te beheren.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendContactNotification(contactData: any): Promise<boolean> {\n  const subject = \"📬 Nieuw Contact Bericht - Pluk & Poot\";\n  const fullName = `${contactData.firstName} ${contactData.lastName}`;\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuw contact bericht binnengekomen via je website!\n\nNaam: ${fullName}\nEmail: ${contactData.email}\nOnderwerp: ${contactData.subject}\n\nBericht:\n${contactData.message}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">📬 Nieuw Contact Bericht</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuw contact bericht binnengekomen via je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Contact Details:</h3>\n        <p><strong>Naam:</strong> ${fullName}</p>\n        <p><strong>Email:</strong> ${contactData.email}</p>\n        <p><strong>Onderwerp:</strong> ${contactData.subject}</p>\n        \n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Bericht:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; border-left: 4px solid #7c3aed;\">\n          ${contactData.message.replace(/\\n/g, '<br>')}\n        </div>\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendCustomerStatusUpdate(orderData: any): Promise<boolean> {\n  console.log('sendCustomerStatusUpdate called with data:', JSON.stringify(orderData, null, 2));\n  \n  // Different messages based on status\n  const getStatusMessage = (status: string) => {\n    switch (status) {\n      case 'bevestigd':\n        return {\n          subject: \"✅ Je bestelling is bevestigd - Pluk & Poot\",\n          message: \"Goed nieuws! Je bestelling is bevestigd en gaat in behandeling.\"\n        };\n      case 'klaar':\n        return {\n          subject: \"📦 Je bestelling is klaar - Pluk & Poot\",\n          message: \"Je bestelling is klaar! \" + (orderData.deliveryMethod === 'pickup' ? 'Je kunt hem ophalen.' : 'We bezorgen hem binnenkort.')\n        };\n      case 'voltooid':\n        return {\n          subject: \"🎉 Bestelling voltooid - Pluk & Poot\",\n          message: \"Je bestelling is succesvol voltooid! Bedankt voor je aankoop bij Pluk & Poot.\"\n        };\n      case 'geannuleerd':\n        return {\n          subject: \"❌ Bestelling geannuleerd - Pluk & Poot\",\n          message: \"Je bestelling is geannuleerd. Neem contact met ons op als je vragen hebt.\"\n        };\n      default:\n        return {\n          subject: \"📋 Status update - Pluk & Poot\",\n          message: \"Er is een update voor je bestelling.\"\n        };\n    }\n  };\n\n  const statusInfo = getStatusMessage(orderData.status);\n  \n  const textContent = `\nHallo ${orderData.customerName},\n\n${statusInfo.message}\n\nJe bestelling:\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\n${orderData.deliveryMethod === 'delivery' ? 'Bezorgkosten: €1.00' : ''}\nTotaal: €${orderData.totalAmount}\nStatus: ${orderData.status}\n\n${orderData.notes ? `Opmerkingen: ${orderData.notes}` : ''}\n\nBij vragen kun je altijd contact met ons opnemen!\n\nMet vriendelijke groet,\nDamian van Pluk & Poot\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">${statusInfo.subject}</h1>\n      \n      <p>Hallo ${orderData.customerName},</p>\n      \n      <p>${statusInfo.message}</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Je Bestelling:</h3>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        ${orderData.deliveryMethod === 'delivery' ? '<p><strong>Bezorgkosten:</strong> €1.00</p>' : ''}\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        <p><strong>Status:</strong> <span style=\"background-color: #7c3aed; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;\">${orderData.status.toUpperCase()}</span></p>\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n      </div>\n      \n      <p>Bij vragen kun je altijd contact met ons opnemen!</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Damian van Pluk & Poot</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [orderData.customerEmail],\n    subject: statusInfo.subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendCustomerOrderConfirmation(orderData: any): Promise<boolean> {\n  console.log('sendCustomerOrderConfirmation called with data:', JSON.stringify(orderData, null, 2));\n  \n  const textContent = `\nHallo ${orderData.customerName},\n\nBedankt voor je bestelling bij Pluk & Poot!\n\nJe bestelling:\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\n${orderData.deliveryMethod === 'delivery' ? 'Bezorgkosten: €1.00' : ''}\nTotaal: €${orderData.totalAmount}\nBezorging: ${orderData.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen (gratis)'}\n\n${orderData.deliveryMethod === 'delivery' && orderData.streetAddress ? `\nBezorgadres:\n${orderData.streetAddress}\n${orderData.postalCode} ${orderData.city}\n${orderData.country}` : ''}\n\n${orderData.notes ? `Opmerkingen: ${orderData.notes}` : ''}\n\nJe bestelling heeft status: ${orderData.status}\nBesteld op: ${new Date().toLocaleString('nl-NL')}\n\nWe nemen zo snel mogelijk contact met je op!\n\nMet vriendelijke groet,\nDamian van Pluk & Poot\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">Bedankt voor je bestelling! 🌿</h1>\n      \n      <p>Hallo ${orderData.customerName},</p>\n      \n      <p>Bedankt voor je bestelling bij <strong>Pluk & Poot</strong>!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Je Bestelling:</h3>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        ${orderData.deliveryMethod === 'delivery' ? '<p><strong>Bezorgkosten:</strong> €1.00</p>' : ''}\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        <p><strong>Bezorging:</strong> ${orderData.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen (gratis)'}</p>\n        \n        ${orderData.deliveryMethod === 'delivery' && orderData.streetAddress ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Bezorgadres:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.streetAddress}<br>\n          ${orderData.postalCode} ${orderData.city}<br>\n          ${orderData.country}\n        </div>\n        ` : ''}\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n        \n        <p><strong>Status:</strong> <span style=\"background-color: #7c3aed; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;\">${orderData.status.toUpperCase()}</span></p>\n      </div>\n      \n      <p>We nemen zo snel mogelijk contact met je op!</p>\n      \n      <p><small>Besteld op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Damian van Pluk & Poot</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [orderData.customerEmail],\n    subject: \"Bestelling Ontvangen - Pluk & Poot 🌿\",\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendOrderNotification(orderData: any): Promise<boolean> {\n  console.log('sendOrderNotification called with data:', JSON.stringify(orderData, null, 2));\n  \n  // Different email templates based on status\n  const getEmailContent = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return {\n          subject: \"🛒 Nieuwe Siroop Bestelling - Pluk & Poot\",\n          message: \"Er is een nieuwe siroop bestelling binnengekomen!\"\n        };\n      case 'bevestigd':\n        return {\n          subject: \"✅ Bestelling Bevestigd - Pluk & Poot\",\n          message: \"Een siroop bestelling is bevestigd en gaat in behandeling!\"\n        };\n      case 'klaar':\n        return {\n          subject: \"📦 Bestelling Klaar voor Ophalen/Bezorging - Pluk & Poot\",\n          message: \"Een siroop bestelling is klaar voor ophalen of bezorging!\"\n        };\n      case 'voltooid':\n        return {\n          subject: \"🎉 Bestelling Voltooid - Pluk & Poot\",\n          message: \"Een siroop bestelling is succesvol voltooid!\"\n        };\n      case 'geannuleerd':\n        return {\n          subject: \"❌ Bestelling Geannuleerd - Pluk & Poot\",\n          message: \"Een siroop bestelling is geannuleerd.\"\n        };\n      default:\n        return {\n          subject: \"📋 Siroop Bestelling Update - Pluk & Poot\",\n          message: \"Er is een update voor een siroop bestelling.\"\n        };\n    }\n  };\n\n  const emailContent = getEmailContent(orderData.status);\n  \n  const textContent = `\nHallo Damian,\n\n${emailContent.message}\n\nKlant: ${orderData.customerName}\nEmail: ${orderData.customerEmail}\nTelefoon: ${orderData.customerPhone || 'Niet opgegeven'}\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\n${orderData.deliveryMethod === 'Bezorgen' ? 'Bezorgkosten: €1.00' : ''}\nTotaal: €${orderData.totalAmount}\nBezorging: ${orderData.deliveryMethod}\nStatus: ${orderData.status}\n\nOpmerkingen: ${orderData.notes || 'Geen opmerkingen'}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">${emailContent.subject}</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>${emailContent.message}</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <p><strong>Klant:</strong> ${orderData.customerName}</p>\n        <p><strong>Email:</strong> ${orderData.customerEmail}</p>\n        <p><strong>Telefoon:</strong> ${orderData.customerPhone || 'Niet opgegeven'}</p>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        ${orderData.deliveryMethod === 'Bezorgen' ? '<p><strong>Bezorgkosten:</strong> €1.00</p>' : ''}\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        <p><strong>Bezorging:</strong> ${orderData.deliveryMethod}</p>\n        <p><strong>Status:</strong> <span style=\"background-color: #7c3aed; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;\">${orderData.status.toUpperCase()}</span></p>\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject: emailContent.subject,\n    textContent,\n    htmlContent\n  });\n}","size_bytes":17284},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\n// Setup session middleware for admin authentication\napp.use(session({\n  secret: 'pluk-poot-admin-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Serve static files from attached_assets and client/public\napp.use('/attached_assets', express.static('attached_assets'));\napp.use('/images', express.static('client/public/images'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2459},"server/mailjet.ts":{"content":"import Mailjet from 'node-mailjet';\n\nif (!process.env.MAILJET_API_KEY || !process.env.MAILJET_SECRET_KEY) {\n  throw new Error(\"MAILJET_API_KEY and MAILJET_SECRET_KEY environment variables must be set\");\n}\n\nconst mailjet = new Mailjet({\n  apiKey: process.env.MAILJET_API_KEY,\n  apiSecret: process.env.MAILJET_SECRET_KEY\n});\n\ninterface EmailParams {\n  to: string[];\n  subject: string;\n  textContent: string;\n  htmlContent: string;\n  fromEmail?: string;\n  fromName?: string;\n}\n\nexport async function sendBulkEmail(params: EmailParams): Promise<boolean> {\n  try {\n    console.log('Attempting to send email to:', params.to);\n    console.log('From email:', params.fromEmail || \"dc@damian.kessler.nl\");\n    \n    const request = mailjet\n      .post(\"send\", { 'version': 'v3.1' })\n      .request({\n        Messages: params.to.map(email => ({\n          From: {\n            Email: params.fromEmail || \"dc@damian.kessler.nl\",\n            Name: params.fromName || \"Pluk & Poot\"\n          },\n          To: [\n            {\n              Email: email,\n              Name: \"\"\n            }\n          ],\n          Subject: params.subject,\n          TextPart: params.textContent,\n          HTMLPart: params.htmlContent\n        }))\n      });\n\n    const result = await request;\n    console.log('Mailjet response status:', result.response?.status);\n    console.log('Mailjet response body:', JSON.stringify(result.body, null, 2));\n    \n    // Check if email was actually accepted\n    if (result.body && result.body.Messages && result.body.Messages.length > 0) {\n      const firstMessage = result.body.Messages[0];\n      if (firstMessage && firstMessage.Status === 'success') {\n        console.log('Email accepted by Mailjet for delivery');\n        return true;\n      } else {\n        console.log('Email not accepted by Mailjet:', firstMessage);\n        return false;\n      }\n    }\n    \n    // If we got a successful response but no Messages array, consider it successful\n    if (result.response?.status === 200) {\n      console.log('Mailjet returned 200, considering email sent successfully');\n      return true;\n    }\n    \n    return false;\n  } catch (error) {\n    console.error('Mailjet email error:', error);\n    return false;\n  }\n}\n\nexport async function sendRamenInvitation(emails: string[], date: string): Promise<boolean> {\n  const subject = `🍜 Ramen Ervaring Bevestiging - ${date}`;\n  \n  const textContent = `\nBeste ramen liefhebber,\n\nGeweldig nieuws! We hebben genoeg aanmeldingen voor de ramen ervaring op ${date}.\n\nDe ramen ervaring zal plaatsvinden bij Pluk & Poot met verse, lokale ingrediënten en authentieke Japanse smaken.\n\nDetails:\n- Datum: ${date}\n- Tijd: 18:00 - 20:00\n- Locatie: Pluk & Poot, Groningen\n- Prijs: €25 per persoon\n\nWe nemen binnenkort contact met je op voor de finale details en betalingsinstructies.\n\nMet vriendelijke groet,\nHet Pluk & Poot Team\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🍜 Ramen Ervaring Bevestiging</h1>\n      \n      <p>Beste ramen liefhebber,</p>\n      \n      <p><strong>Geweldig nieuws!</strong> We hebben genoeg aanmeldingen voor de ramen ervaring op <strong>${date}</strong>.</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Details van je Ramen Ervaring:</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li>📅 <strong>Datum:</strong> ${date}</li>\n          <li>🕕 <strong>Tijd:</strong> 18:00 - 20:00</li>\n          <li>📍 <strong>Locatie:</strong> Pluk & Poot, Groningen</li>\n          <li>💰 <strong>Prijs:</strong> €25 per persoon</li>\n        </ul>\n      </div>\n      \n      <p>De ramen ervaring wordt bereid met verse, lokale ingrediënten en authentieke Japanse smaken.</p>\n      \n      <p>We nemen binnenkort contact met je op voor de finale details en betalingsinstructies.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Het Pluk & Poot Team</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: emails,\n    subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendAdminNotification(orderDetails: string): Promise<boolean> {\n  const subject = \"🔔 Nieuwe Ramen Bestelling - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuwe ramen bestelling binnengekomen op je website!\n\n${orderDetails}\n\nLog in op je admin dashboard om de bestelling te bekijken en te beheren.\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🔔 Nieuwe Ramen Bestelling</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuwe ramen bestelling binnengekomen op je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <pre style=\"white-space: pre-wrap; font-family: monospace;\">${orderDetails}</pre>\n      </div>\n      \n      <p>Log in op je admin dashboard om de bestelling te bekijken en te beheren.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent,\n    fromEmail: \"dc@damian.kessler.nl\",\n    fromName: \"Pluk & Poot Notificaties\"\n  });\n}\n\n// Email template voor contact formulier berichten\nexport async function sendContactNotification(contactData: any): Promise<boolean> {\n  const subject = \"📬 Nieuw Contact Bericht - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuw contact bericht binnengekomen via je website!\n\nNaam: ${contactData.name}\nEmail: ${contactData.email}\nTelefoon: ${contactData.phone || 'Niet opgegeven'}\n\nBericht:\n${contactData.message}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">📬 Nieuw Contact Bericht</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuw contact bericht binnengekomen via je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Contact Details:</h3>\n        <p><strong>Naam:</strong> ${contactData.name}</p>\n        <p><strong>Email:</strong> ${contactData.email}</p>\n        <p><strong>Telefoon:</strong> ${contactData.phone || 'Niet opgegeven'}</p>\n        \n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Bericht:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; border-left: 4px solid #7c3aed;\">\n          ${contactData.message.replace(/\\n/g, '<br>')}\n        </div>\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent,\n    fromEmail: \"dc@damian.kessler.nl\",\n    fromName: \"Pluk & Poot Contact\"\n  });\n}\n\n// Email template voor syrup bestellingen\nexport async function sendOrderNotification(orderData: any): Promise<boolean> {\n  const subject = \"🛒 Nieuwe Siroop Bestelling - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuwe siroop bestelling binnengekomen!\n\nKlant: ${orderData.customerName}\nEmail: ${orderData.customerEmail}\nTelefoon: ${orderData.customerPhone || 'Niet opgegeven'}\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\nTotaal: €${orderData.totalAmount}\n\nOpmerkingen: ${orderData.notes || 'Geen opmerkingen'}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🛒 Nieuwe Siroop Bestelling</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuwe siroop bestelling binnengekomen!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <p><strong>Klant:</strong> ${orderData.customerName}</p>\n        <p><strong>Email:</strong> ${orderData.customerEmail}</p>\n        <p><strong>Telefoon:</strong> ${orderData.customerPhone || 'Niet opgegeven'}</p>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent,\n    fromEmail: \"dc@damian.kessler.nl\",\n    fromName: \"Pluk & Poot Bestellingen\"\n  });\n}","size_bytes":9990},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertOrderSchema, insertWorkshopOrderSchema, insertContactMessageSchema, insertProductSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { sendWorkshopInvitation, sendAdminNotification, sendContactNotification, sendOrderNotification, sendCustomerOrderConfirmation, sendCustomerStatusUpdate, sendEmail } from \"./gmail\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\n// import { ObjectPermission } from \"./objectAcl\";\n\nconst workshopOrderRequestSchema = z.object({\n  customerName: z.string().min(1),\n  customerEmail: z.string().email(),\n  customerPhone: z.string().min(1),\n  preferredDate: z.string(),\n  notes: z.string().optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Object storage endpoints for product images\n  \n  // Get upload URL for product images\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Set ACL policy for uploaded product images\n  app.put(\"/api/product-images\", async (req, res) => {\n    if (!req.body.imageURL) {\n      return res.status(400).json({ error: \"imageURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.imageURL,\n        {\n          owner: \"admin\", // Product images are managed by admin\n          visibility: \"public\", // Product images should be publicly accessible\n        }\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting product image ACL:\", error);\n      res.status(500).json({ error: \"Failed to process image\" });\n    }\n  });\n\n  // Serve public objects (including product images)\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: undefined, // Public access\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n  // Get all products\n  app.get(\"/api/products\", async (_req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Delete product\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      const success = await storage.deleteProduct(productId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Update product\n  app.patch(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      const updatedProduct = await storage.updateProduct(productId, req.body);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(updatedProduct);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  // Get single product\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const product = await storage.getProduct(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Create syrup order\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse({\n        ...req.body,\n        orderType: \"syrup\",\n        status: \"pending\",\n      });\n\n      const order = await storage.createOrder(orderData);\n      \n      // Update product stock if productId is provided\n      if (order.productId) {\n        const product = await storage.getProduct(order.productId);\n        if (product && product.stock > 0) {\n          await storage.updateProductStock(order.productId, product.stock - order.quantity);\n        }\n      }\n\n      // Get product details for email\n      const product = await storage.getProduct(orderData.productId!);\n      \n      // Send notification email to admin\n      const orderDetails = `\nNieuwe Siroop Bestelling!\n\nKlant: ${order.customerName}\nEmail: ${order.customerEmail}\nTelefoon: ${order.customerPhone || 'Niet opgegeven'}\nProduct: ${product?.name || 'Onbekend product'}\nAantal: ${order.quantity}\nTotaal: €${order.totalAmount}\nBezorging: ${order.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen'}\n${order.deliveryMethod === 'delivery' && order.streetAddress ? `\nBezorgadres:\n${order.streetAddress}\n${order.postalCode} ${order.city}\n${order.country}` : ''}\nOpmerkingen: ${order.notes || 'Geen opmerkingen'}\nStatus: ${order.status}\nBesteld op: ${order.createdAt?.toLocaleString('nl-NL')}\n      `;\n      \n      // Send confirmation email to customer\n      try {\n        await sendCustomerOrderConfirmation({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod,\n          streetAddress: order.streetAddress,\n          postalCode: order.postalCode,\n          city: order.city,\n          country: order.country,\n          notes: order.notes\n        });\n        console.log('Customer confirmation email sent for order');\n      } catch (emailError) {\n        console.error('Failed to send customer confirmation:', emailError);\n      }\n\n      // Send notification email to admin\n      try {\n        await sendOrderNotification({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen',\n          notes: order.notes || 'Geen opmerkingen'\n        });\n        console.log('Admin notification sent for new syrup order');\n      } catch (emailError) {\n        console.error('Failed to send admin notification:', emailError);\n        // Continue even if notification fails\n      }\n\n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Create ramen order (per person)\n  app.post(\"/api/orders/ramen\", async (req, res) => {\n    try {\n      const requestData = workshopOrderRequestSchema.parse(req.body);\n      \n      // Parse and validate date\n      const preferredDate = new Date(requestData.preferredDate);\n      console.log(\"Ramen order for date:\", preferredDate);\n\n      // Check existing orders for that date\n      const existingOrders = await storage.getWorkshopOrdersByDate(preferredDate);\n      if (existingOrders.length >= 6) {\n        return res.status(400).json({ \n          message: \"This date is fully booked. Please choose another Friday.\" \n        });\n      }\n\n      // Create ramen order (per person)\n      const workshopOrder = await storage.createWorkshopOrder({\n        customerName: requestData.customerName,\n        customerEmail: requestData.customerEmail,\n        customerPhone: requestData.customerPhone,\n        preferredDate,\n        servings: 1, // Per person\n        status: \"pending\",\n        notes: requestData.notes,\n      });\n\n      // Send notification email to admin\n      const orderDetails = `\nKlant: ${workshopOrder.customerName}\nEmail: ${workshopOrder.customerEmail}\nTelefoon: ${workshopOrder.customerPhone || 'Niet opgegeven'}\nGewenste Datum: ${workshopOrder.preferredDate.toLocaleDateString('nl-NL', { \n  weekday: 'long', \n  year: 'numeric', \n  month: 'long', \n  day: 'numeric' \n})}\nAantal Porties: ${workshopOrder.servings}\nOpmerkingen: ${workshopOrder.notes || 'Geen opmerkingen'}\nStatus: ${workshopOrder.status}\n      `;\n      \n      // Send customer confirmation email\n      try {\n        const { sendWorkshopOrderConfirmation } = await import('./gmail-ramen');\n        await sendWorkshopOrderConfirmation({\n          customerName: workshopOrder.customerName,\n          customerEmail: workshopOrder.customerEmail,\n          customerPhone: workshopOrder.customerPhone || 'Niet opgegeven',\n          servings: workshopOrder.servings,\n          notes: workshopOrder.notes,\n          preferredDate: workshopOrder.preferredDate.toLocaleDateString('nl-NL', { \n            weekday: 'long', \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n          })\n        });\n        console.log('Customer confirmation email sent for ramen order');\n      } catch (emailError) {\n        console.error('Failed to send customer confirmation:', emailError);\n      }\n\n      try {\n        await sendAdminNotification(orderDetails);\n        console.log('Admin notification sent for new ramen order');\n      } catch (emailError) {\n        console.error('Failed to send admin notification:', emailError);\n        // Continue even if notification fails\n      }\n\n      // Check if this booking completed the group of 6\n      const updatedOrders = await storage.getWorkshopOrdersByDate(preferredDate);\n      const isConfirmed = updatedOrders.length >= 6 && updatedOrders.every(o => o.status === \"confirmed\");\n\n      res.json({ \n        workshopOrder, \n        totalBookings: updatedOrders.length,\n        isConfirmed,\n        message: isConfirmed \n          ? \"Gefeliciteerd! Jullie groep is compleet en de ramen-avond is bevestigd!\" \n          : `Bedankt voor je boeking! Nog ${6 - updatedOrders.length} personen nodig voor deze datum.`\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create ramen order\" });\n    }\n  });\n\n  // Get ramen availability for a specific date\n  app.get(\"/api/ramen/availability/:date\", async (req, res) => {\n    try {\n      const date = new Date(req.params.date);\n      const existingOrders = await storage.getWorkshopOrdersByDate(date);\n      const available = 6 - existingOrders.length;\n      \n      res.json({ \n        date: req.params.date,\n        available,\n        total: 6,\n        isAvailable: available > 0\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check availability\" });\n    }\n  });\n\n  // Submit contact form\n  app.post(\"/api/contact\", async (req, res) => {\n    console.log('=== CONTACT FORM SUBMITTED ===');\n    console.log('Request body:', req.body);\n    \n    try {\n      const messageData = insertContactMessageSchema.parse(req.body);\n      console.log('Parsed message data:', messageData);\n      \n      const message = await storage.createContactMessage(messageData);\n      console.log('Message stored in database');\n      \n      // Send admin notification email directly using sendEmail\n      try {\n        console.log('Attempting to send email notification...');\n        await sendEmail({\n          to: [\"dckessler95@gmail.com\"],\n          subject: `📬 Nieuw Contact Bericht - ${messageData.subject}`,\n          textContent: `\nHallo Damian,\n\nEr is een nieuw contact bericht binnengekomen via je website!\n\nNaam: ${messageData.firstName} ${messageData.lastName}\nEmail: ${messageData.email}\nOnderwerp: ${messageData.subject}\n\nBericht:\n${messageData.message}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n          `,\n          htmlContent: `\n<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n  <h1 style=\"color: #7c3aed;\">📬 Nieuw Contact Bericht</h1>\n  \n  <p>Hallo Damian,</p>\n  \n  <p>Er is een nieuw contact bericht binnengekomen via je website!</p>\n  \n  <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h3 style=\"color: #374151; margin-top: 0;\">Contact Details:</h3>\n    <p><strong>Naam:</strong> ${messageData.firstName} ${messageData.lastName}</p>\n    <p><strong>Email:</strong> ${messageData.email}</p>\n    <p><strong>Onderwerp:</strong> ${messageData.subject}</p>\n    \n    <h4 style=\"color: #374151; margin-bottom: 10px;\">Bericht:</h4>\n    <div style=\"background-color: white; padding: 15px; border-radius: 5px; border-left: 4px solid #7c3aed;\">\n      ${messageData.message.replace(/\\n/g, '<br>')}\n    </div>\n  </div>\n  \n  <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n</div>\n          `\n        });\n        console.log('Contact notification email sent successfully!');\n      } catch (emailError) {\n        console.error('Failed to send contact notification:', emailError);\n      }\n      \n      res.json(message);\n    } catch (error) {\n      console.error('Contact form error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid message data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Get all orders (admin)\n  app.get(\"/api/orders\", async (_req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Get all ramen orders\n  app.get(\"/api/workshop-orders\", async (req, res) => {\n    try {\n      const orders = await storage.getWorkshopOrders();\n      console.log(\"API: Returning ramen orders:\", orders.length);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching ramen orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch ramen orders\" });\n    }\n  });\n\n  // Admin Authentication Routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const admin = await storage.getAdminByUsername(username);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check if password matches the secure admin password\n      if (password === \"PlukPoot2025!Secure#Admin\") {\n        // Set admin session\n        (req as any).session.adminId = admin.id;\n        (req as any).session.adminUsername = admin.username;\n        \n        res.json({ message: \"Login successful\", admin: { id: admin.id, username: admin.username, role: admin.role } });\n      } else {\n        res.status(401).json({ message: \"Invalid credentials\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: \"Login error: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", (req, res) => {\n    (req as any).session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout error\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Admin status check route\n  app.get(\"/api/admin/status\", (req, res) => {\n    const isAdmin = !!(req as any).session?.adminId;\n    res.json({ isAdmin });\n  });\n\n  // Admin middleware\n  const requireAdmin = (req: any, res: any, next: any) => {\n    if (!req.session?.adminId) {\n      return res.status(401).json({ message: \"Admin authentication required\" });\n    }\n    next();\n  };\n\n  // Admin Product Management Routes\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating product: \" + error.message });\n    }\n  });\n\n  // Update product (for live editing)\n  app.patch(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n\n      // For live editing, we receive the data in req.body.data or directly in req.body\n      const productData = req.body.data || req.body;\n      \n      console.log(\"Updating product\", id, \"with data:\", productData);\n      \n      const updatedProduct = await storage.updateProduct(id, productData);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      res.json(updatedProduct);\n    } catch (error: any) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/products/:id/stock\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { stock } = req.body;\n      \n      if (isNaN(id) || typeof stock !== \"number\") {\n        return res.status(400).json({ message: \"Invalid product ID or stock value\" });\n      }\n\n      const product = await storage.updateProductStock(id, stock);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      res.json(product);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating stock: \" + error.message });\n    }\n  });\n\n  // Confirm all ramen orders for a specific date (admin)\n  app.post(\"/api/workshop-orders/confirm\", requireAdmin, async (req, res) => {\n    try {\n      const { date } = req.body;\n      \n      if (!date) {\n        return res.status(400).json({ message: \"Date is required\" });\n      }\n\n      const targetDate = new Date(date);\n      const confirmedOrders = await storage.confirmWorkshopOrdersForDate(targetDate);\n      \n      if (confirmedOrders.length === 0) {\n        return res.status(400).json({ message: \"No pending orders found for this date\" });\n      }\n\n      // Send confirmation emails to all confirmed orders\n      const emails = confirmedOrders.map(order => order.customerEmail);\n      const dateStr = targetDate.toLocaleDateString('nl-NL', { \n        weekday: 'long', \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n      \n      try {\n        await sendWorkshopInvitation(emails, dateStr);\n        console.log(`Confirmation emails sent to ${emails.length} customers for ${dateStr}`);\n      } catch (emailError) {\n        console.error(\"Failed to send confirmation emails:\", emailError);\n        // Continue even if email fails\n      }\n\n      res.json({ \n        message: `${confirmedOrders.length} orders confirmed for ${dateStr}`,\n        confirmedOrders,\n        emailsSent: emails.length\n      });\n    } catch (error: any) {\n      console.error(\"Error confirming ramen orders:\", error);\n      res.status(500).json({ message: \"Error confirming orders: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/workshop-orders/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      if (isNaN(id) || !status) {\n        return res.status(400).json({ message: \"Invalid order ID or status\" });\n      }\n\n      const order = await storage.updateWorkshopOrderStatus(id, status);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      // Send status update email to customer\n      try {\n        await sendCustomerStatusUpdate({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: 'Ramen Avond',\n          quantity: order.servings,\n          totalAmount: '€0 (gratis)',\n          status: order.status,\n          deliveryMethod: 'Locatie wordt nog bekend gemaakt',\n          streetAddress: '',\n          postalCode: '',\n          city: '',\n          country: '',\n          notes: order.notes,\n          preferredDate: order.preferredDate.toLocaleDateString('nl-NL', { \n            weekday: 'long', \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n          })\n        });\n        console.log(`Status update email sent to ${order.customerEmail} for ramen order ${id}`);\n      } catch (emailError) {\n        console.error('Failed to send status update email:', emailError);\n        // Continue even if email fails\n      }\n\n      res.json(order);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating order status: \" + error.message });\n    }\n  });\n\n  // Send individual confirmation email for a syrup order (admin)\n  app.post(\"/api/orders/:id/send-confirmation\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      // Get the order from storage to get the correct data\n      const orders = await storage.getOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      // Get product details\n      const product = await storage.getProduct(order.productId!);\n      \n      try {\n        // Send status update email to customer\n        await sendCustomerStatusUpdate({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod,\n          notes: order.notes\n        });\n        console.log(`Customer status update email sent to ${order.customerEmail} for order ${id}`);\n\n        // Send notification email to admin\n        await sendOrderNotification({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen',\n          notes: order.notes || 'Geen opmerkingen'\n        });\n        console.log(`Admin notification sent for order ${id}`);\n        \n        res.json({ \n          message: `Status email verzonden naar klant en admin`,\n          customerEmail: order.customerEmail,\n          status: order.status\n        });\n      } catch (emailError) {\n        console.error(\"Failed to send status emails:\", emailError);\n        res.status(500).json({ message: \"Failed to send status emails\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error sending confirmation: \" + error.message });\n    }\n  });\n\n  // Send individual confirmation email for a ramen order (admin)\n  app.post(\"/api/workshop-orders/:id/send-confirmation\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      // Get the order from storage to get the correct data\n      const orders = await storage.getWorkshopOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const dateStr = order.preferredDate.toLocaleDateString('nl-NL', { \n        weekday: 'long', \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n      \n      try {\n        // Send email ONLY to the specific customer\n        await sendWorkshopInvitation([order.customerEmail], dateStr);\n        console.log(`Individual confirmation email sent to ${order.customerEmail} for ${dateStr}`);\n        \n        res.json({ \n          message: `Bevestigingsmail verzonden naar ${order.customerEmail}`,\n          email: order.customerEmail,\n          date: dateStr\n        });\n      } catch (emailError) {\n        console.error(\"Failed to send individual confirmation email:\", emailError);\n        res.status(500).json({ message: \"Failed to send confirmation email\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error sending individual confirmation:\", error);\n      res.status(500).json({ message: \"Error sending confirmation: \" + error.message });\n    }\n  });\n\n  // Test email functionality (admin)\n  app.post(\"/api/test-email\", requireAdmin, async (req, res) => {\n    try {\n      const testEmail = await sendEmail({\n        to: [\"dckessler95@gmail.com\"],\n        subject: \"Test Email - Pluk & Poot Gmail SMTP\",\n        textContent: \"Dit is een test email via Gmail SMTP. Als je dit ontvangt werkt de email functionaliteit correct!\",\n        htmlContent: \"<h1>Test Email via Gmail SMTP</h1><p>Dit is een test email via Gmail SMTP.</p><p><strong>Als je dit ontvangt werkt de email functionaliteit correct!</strong></p><p>Verzonden op: \" + new Date().toLocaleString('nl-NL') + \"</p>\",\n      });\n      \n      if (testEmail) {\n        res.json({ message: \"Test email verzonden naar dckessler95@gmail.com via Gmail SMTP\" });\n      } else {\n        res.status(500).json({ message: \"Test email kon niet worden verzonden\" });\n      }\n    } catch (error: any) {\n      console.error(\"Test email error:\", error);\n      res.status(500).json({ message: \"Error sending test email: \" + error.message });\n    }\n  });\n\n  // Delete ramen order (admin)\n  app.delete(\"/api/workshop-orders/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      const success = await storage.deleteWorkshopOrder(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json({ message: \"Ramen order deleted successfully\", id });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting order: \" + error.message });\n    }\n  });\n\n  // Siroop orders management (admin)\n  app.get(\"/api/orders\", requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching orders: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/orders/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      if (isNaN(id) || !status) {\n        return res.status(400).json({ message: \"Invalid order ID or status\" });\n      }\n\n      const order = await storage.updateOrderStatus(id, status);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json(order);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating order status: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/orders/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      const success = await storage.deleteOrder(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json({ message: \"Order deleted successfully\", id });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting order: \" + error.message });\n    }\n  });\n\n  // Send email to customer for order (admin)\n  app.post(\"/api/orders/:id/send-email\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      const orders = await storage.getOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const products = await storage.getProducts();\n      const product = products.find(p => p.id === order.productId);\n      \n      await sendOrderNotification({\n        customerName: order.customerName,\n        customerEmail: order.customerEmail,\n        customerPhone: order.customerPhone,\n        productName: product?.name || 'Kombucha Product',\n        quantity: order.quantity,\n        totalAmount: order.totalAmount,\n        notes: order.notes,\n        deliveryMethod: order.deliveryMethod,\n        streetAddress: order.streetAddress,\n        city: order.city,\n        postalCode: order.postalCode,\n        orderDate: new Date(order.createdAt || new Date()).toISOString()\n      });\n      \n      res.json({ message: \"Email sent successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error sending email: \" + error.message });\n    }\n  });\n\n  // Send email to customer for workshop order (admin)\n  app.post(\"/api/workshop-orders/:id/send-email\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid workshop order ID\" });\n      }\n\n      const orders = await storage.getWorkshopOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Workshop order not found\" });\n      }\n\n      const { sendWorkshopOrderConfirmation } = await import('./gmail-ramen');\n      await sendWorkshopOrderConfirmation({\n        customerName: order.customerName,\n        customerEmail: order.customerEmail,\n        customerPhone: order.customerPhone || 'Niet opgegeven',\n        servings: order.servings,\n        notes: order.notes,\n        preferredDate: order.preferredDate.toLocaleDateString('nl-NL', { \n          weekday: 'long', \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        })\n      });\n      \n      res.json({ message: \"Email sent successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error sending email: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/orders/:id/send-confirmation\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      const orders = await storage.getOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const products = await storage.getProducts();\n      const product = products.find(p => p.id === order.productId);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      try {\n        // Send confirmation email to customer\n        await sendOrderNotification({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone,\n          productName: product.name,\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          notes: order.notes,\n          deliveryMethod: order.deliveryMethod,\n          streetAddress: order.streetAddress,\n          city: order.city,\n          postalCode: order.postalCode,\n          country: order.country\n        });\n        \n        res.json({ \n          message: `Bevestigingsmail verzonden naar ${order.customerEmail}`,\n          email: order.customerEmail,\n          product: product.name\n        });\n      } catch (emailError) {\n        console.error(\"Failed to send order confirmation email:\", emailError);\n        res.status(500).json({ message: \"Failed to send confirmation email\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error sending confirmation: \" + error.message });\n    }\n  });\n\n  // Object storage endpoints for image uploads\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Update product image endpoint\n  app.put(\"/api/products/:id/image\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      const { imageURL } = req.body;\n\n      if (!imageURL) {\n        return res.status(400).json({ error: \"imageURL is required\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const imagePath = objectStorageService.normalizeObjectEntityPath(imageURL);\n\n      const updatedProduct = await storage.updateProduct(productId, { imagePath });\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      res.json({ \n        success: true, \n        imagePath,\n        product: updatedProduct \n      });\n    } catch (error) {\n      console.error(\"Error updating product image:\", error);\n      res.status(500).json({ error: \"Failed to update product image\" });\n    }\n  });\n\n  // Serve uploaded objects\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Serve public objects\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":36112},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport {\n  products,\n  orders,\n  workshopOrders,\n  contactMessages,\n  adminUsers,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type WorkshopOrder,\n  type InsertWorkshopOrder,\n  type ContactMessage,\n  type InsertContactMessage\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: number): Promise<Product | undefined>;\n  createProduct(insertProduct: InsertProduct): Promise<Product>;\n  updateProduct(id: number, updates: Partial<Product>): Promise<Product | undefined>;\n  updateProductStock(id: number, stock: number): Promise<Product | undefined>;\n  deleteProduct(id: number): Promise<boolean>;\n\n  // Orders\n  getOrders(): Promise<Order[]>;\n  createOrder(insertOrder: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: number, status: string): Promise<Order | undefined>;\n  deleteOrder(id: number): Promise<boolean>;\n\n  // Workshop Orders\n  getWorkshopOrders(): Promise<WorkshopOrder[]>;\n  createWorkshopOrder(insertWorkshopOrder: InsertWorkshopOrder): Promise<WorkshopOrder>;\n  updateWorkshopOrderStatus(id: number, status: string): Promise<WorkshopOrder | undefined>;\n  deleteWorkshopOrder(id: number): Promise<boolean>;\n  getWorkshopOrdersByDate(date: Date): Promise<WorkshopOrder[]>;\n  confirmWorkshopOrdersForDate(date: Date): Promise<WorkshopOrder[]>;\n\n  // Contact Messages\n  getContactMessages(): Promise<ContactMessage[]>;\n  createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage>;\n\n  // Admin Authentication\n  getAdminByUsername(username: string): Promise<{ id: number; username: string; password: string; role: string } | undefined>;\n  createAdminUser(username: string, hashedPassword: string): Promise<{ id: number; username: string; role: string }>;\n}\n\n// Database Storage Implementation\nclass DatabaseStorage implements IStorage {\n  constructor() {\n    this.seedDatabase();\n  }\n\n  private async seedDatabase() {\n    try {\n      // Check if products already exist\n      const existingProducts = await db.select().from(products);\n      if (existingProducts.length === 0) {\n        console.log(\"STORAGE: Seeding database with kombucha products...\");\n        \n        // Add default kombucha products\n        await db.insert(products).values([\n          {\n            name: \"Gember Kombucha\",\n            description: \"Verfrissende kombucha met verse gember uit Groningen. Rijk aan probiotica en met een heerlijke pittige smaak.\",\n            price: \"8.50\",\n            category: \"kombucha\",\n            stock: 24,\n            featured: true,\n            badges: [\"Seizoenspecialiteit\", \"Premium\"],\n            imageUrl: \"https://images.unsplash.com/photo-1559181567-c3190ca9959b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Bessen Kombucha\",\n            description: \"Zoete kombucha met verse bosbessen. Perfect gebalanceerd en vol antioxidanten voor je gezondheid.\",\n            price: \"9.00\",\n            category: \"kombucha\",\n            stock: 18,\n            featured: true,\n            badges: [\"Huistuin delicatesse\"],\n            imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Citroen Kombucha\",\n            description: \"Frisse kombucha met biologische citroen. Een verfrissende smaak perfect voor elke dag van het jaar.\",\n            price: \"8.75\",\n            category: \"kombucha\",\n            stock: 20,\n            featured: true,\n            badges: [\"Klassiek\", \"Verfrissend\"],\n            imageUrl: \"https://images.unsplash.com/photo-1556679343-c7306c1976bc?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Hibiscus Kombucha\",\n            description: \"Exotische kombucha met hibiscusbloemen. Een mooie roze kleur en bloemenachtige smaak.\",\n            price: \"9.50\",\n            category: \"kombucha\",\n            stock: 15,\n            featured: true,\n            badges: [\"Exotisch\", \"Limited Edition\"],\n            imageUrl: \"https://images.unsplash.com/photo-1544145945-f90425340c7e?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Groene Thee Kombucha\",\n            description: \"Traditionele kombucha op basis van groene thee. Pure smaak met alle gezonde eigenschappen.\",\n            price: \"8.25\",\n            category: \"kombucha\",\n            stock: 30,\n            featured: true,\n            badges: [\"Traditioneel\", \"Gezond\"],\n            imageUrl: \"https://images.unsplash.com/photo-1556679179-6d946ac01b8a?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Mango Kombucha\",\n            description: \"Tropische kombucha met verse mango. Zoet, fruitig en vol van smaak.\",\n            price: \"9.25\",\n            category: \"kombucha\",\n            stock: 22,\n            featured: true,\n            badges: [\"Tropisch\", \"Zoet\"],\n            imageUrl: \"https://images.unsplash.com/photo-1605379399642-870262d3d051?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Kurkuma Kombucha\",\n            description: \"Speciale kombucha met kurkuma en zwarte peper. Anti-inflammatoire eigenschappen en unieke smaak.\",\n            price: \"10.00\",\n            category: \"kombucha\",\n            stock: 12,\n            featured: true,\n            badges: [\"Gezondheid\", \"Speciaal\"],\n            imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Rozemarijn Kombucha\",\n            description: \"Kruidenrijke kombucha met verse rozemarijn uit onze eigen tuin. Aromatisch en rustgevend.\",\n            price: \"9.75\",\n            category: \"kombucha\",\n            stock: 16,\n            featured: true,\n            badges: [\"Kruiden\", \"Eigen Tuin\"],\n            imageUrl: \"https://images.unsplash.com/photo-1544145945-f90425340c7e?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"\n          },\n          {\n            name: \"Kombucha Workshop\",\n            description: \"Leer kombucha brouwen in onze workshop! Inclusief materialen, recepten en je eigen kombucha scoby om mee naar huis te nemen.\",\n            price: \"45.00\",\n            category: \"workshop\",\n            stock: 12,\n            featured: false,\n            badges: [\"Workshop\", \"Leer & Ervaar\"],\n            imageUrl: \"/images/chicken-shoyu-ramen.jpg\"\n          }\n        ]);\n\n        console.log(\"STORAGE: Database seeded with kombucha products\");\n      }\n\n      // Check if admin user exists\n      const existingAdmin = await db.select().from(adminUsers).where(eq(adminUsers.username, \"admin\"));\n      if (existingAdmin.length === 0) {\n        console.log(\"STORAGE: Creating default admin user...\");\n        const bcrypt = await import('bcrypt');\n        const hashedPassword = await bcrypt.hash(\"PlukPoot2025!Secure#Admin\", 10);\n        \n        await db.insert(adminUsers).values({\n          username: \"admin\",\n          password: hashedPassword,\n          role: \"admin\"\n        });\n        \n        console.log(\"STORAGE: Default admin user created (username: admin)\");\n      }\n    } catch (error) {\n      console.error(\"STORAGE: Error seeding database:\", error);\n    }\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(insertProduct).returning();\n    return product;\n  }\n\n  async updateProduct(id: number, updates: Partial<Product>): Promise<Product | undefined> {\n    const [product] = await db.update(products).set(updates).where(eq(products.id, id)).returning();\n    return product;\n  }\n\n  async updateProductStock(id: number, stock: number): Promise<Product | undefined> {\n    const [product] = await db.update(products).set({ stock }).where(eq(products.id, id)).returning();\n    return product;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    const result = await db.delete(products).where(eq(products.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return await db.select().from(orders);\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const [order] = await db.insert(orders).values(insertOrder).returning();\n    return order;\n  }\n\n  async updateOrderStatus(id: number, status: string): Promise<Order | undefined> {\n    const [order] = await db.update(orders).set({ status }).where(eq(orders.id, id)).returning();\n    return order;\n  }\n\n  async deleteOrder(id: number): Promise<boolean> {\n    const result = await db.delete(orders).where(eq(orders.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Workshop Orders\n  async getWorkshopOrders(): Promise<WorkshopOrder[]> {\n    return await db.select().from(workshopOrders);\n  }\n\n  async createWorkshopOrder(insertWorkshopOrder: InsertWorkshopOrder): Promise<WorkshopOrder> {\n    const [order] = await db.insert(workshopOrders).values(insertWorkshopOrder).returning();\n    \n    // Check if enough orders for auto-confirmation\n    const ordersForDate = await this.getWorkshopOrdersByDate(new Date(order.preferredDate));\n    if (ordersForDate.length >= 6) {\n      await this.confirmWorkshopOrdersForDate(new Date(order.preferredDate));\n    }\n    \n    return order;\n  }\n\n  async updateWorkshopOrderStatus(id: number, status: string): Promise<WorkshopOrder | undefined> {\n    const [order] = await db.update(workshopOrders).set({ status }).where(eq(workshopOrders.id, id)).returning();\n    return order;\n  }\n\n  // Category management\n  async getCategories(): Promise<string[]> {\n    // Return default categories for now - in a real app this could be stored in DB\n    return ['kombucha', 'workshop', 'accessoires', 'ramen', 'andere'];\n  }\n\n  async addCategory(name: string): Promise<string> {\n    // In a real implementation, this would add to a categories table\n    // For now, we'll just return the name as confirmation\n    return name;\n  }\n\n  async removeCategory(name: string): Promise<void> {\n    // In a real implementation, this would remove from a categories table\n    // For now, this is a no-op\n  }\n\n  async deleteWorkshopOrder(id: number): Promise<boolean> {\n    const result = await db.delete(workshopOrders).where(eq(workshopOrders.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getWorkshopOrdersByDate(date: Date): Promise<WorkshopOrder[]> {\n    const dateString = date.toISOString().split('T')[0];\n    return await db.select().from(workshopOrders);\n  }\n\n  async confirmWorkshopOrdersForDate(date: Date): Promise<WorkshopOrder[]> {\n    const ordersForDate = await this.getWorkshopOrdersByDate(date);\n    const confirmedOrders: WorkshopOrder[] = [];\n    \n    for (const order of ordersForDate) {\n      if (order.status === \"pending\") {\n        const confirmedOrder = await this.updateWorkshopOrderStatus(order.id, \"confirmed\");\n        if (confirmedOrder) {\n          confirmedOrders.push(confirmedOrder);\n        }\n      }\n    }\n    \n    return confirmedOrders;\n  }\n\n  // Contact Messages\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages);\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const [message] = await db.insert(contactMessages).values(insertMessage).returning();\n    return message;\n  }\n\n  // Admin Authentication\n  async getAdminByUsername(username: string): Promise<{ id: number; username: string; password: string; role: string } | undefined> {\n    const [admin] = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    return admin;\n  }\n\n  async createAdminUser(username: string, hashedPassword: string): Promise<{ id: number; username: string; role: string }> {\n    const [admin] = await db.insert(adminUsers).values({ \n      username, \n      password: hashedPassword \n    }).returning();\n    return { id: admin.id, username: admin.username, role: admin.role };\n  }\n\n  // Get single order by ID\n  async getOrderById(id: number): Promise<Order | null> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || null;\n  }\n\n  // Get single workshop order by ID  \n  async getWorkshopOrderById(id: number): Promise<WorkshopOrder | null> {\n    const [order] = await db.select().from(workshopOrders).where(eq(workshopOrders.id, id));\n    return order || null;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":12881},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, varchar, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  maxStock: integer(\"max_stock\").notNull().default(20),\n  category: text(\"category\").notNull(), // \"kombucha\" | \"workshop\"\n  imageUrl: text(\"image_url\"),\n  imagePath: text(\"image_path\"), // For uploaded images via object storage\n  featured: boolean(\"featured\").default(false),\n  limitedStock: boolean(\"limited_stock\").default(false),\n  badges: text(\"badges\").array().default([]), // [\"Seizoenspecialiteit\", \"Huistuin delicatesse\", \"Premium\"]\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  productId: integer(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  orderType: text(\"order_type\").notNull(), // \"kombucha\" | \"workshop\"\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\"\n  notes: text(\"notes\"),\n  // Delivery address fields\n  streetAddress: text(\"street_address\"),\n  city: text(\"city\"),\n  postalCode: text(\"postal_code\"),\n  country: text(\"country\").default(\"Nederland\"),\n  deliveryMethod: text(\"delivery_method\").notNull().default(\"pickup\"), // \"pickup\" | \"delivery\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const workshopOrders = pgTable(\"workshop_orders\", {\n  id: serial(\"id\").primaryKey(),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  preferredDate: timestamp(\"preferred_date\").notNull(),\n  servings: integer(\"servings\").notNull().default(1), // Per person booking\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\" | \"confirmed\" | \"cancelled\"\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"new\"), // \"new\" | \"read\" | \"replied\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin users table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  password: text(\"password\").notNull(), // Will store hashed password\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Session storage table for admin sessions\nexport const adminSessions = pgTable(\n  \"admin_sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_admin_session_expire\").on(table.expire)],\n);\n\n// Insert schemas\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWorkshopOrderSchema = createInsertSchema(workshopOrders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\n// Types\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type WorkshopOrder = typeof workshopOrders.$inferSelect;\nexport type InsertWorkshopOrder = z.infer<typeof insertWorkshopOrderSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n","size_bytes":4768},"backup/syrup-website/README.md":{"content":"# Pluk & Poot - Artisanale Siropen & Ramen\n\nEen moderne e-commerce website voor artisanale siropen en ramen pre-orders, gevestigd in Groningen.\n\n## Functies\n\n- **Productcatalogus**: Vlierbloesem en rozen siropen met stockindicatoren\n- **Ramen Pre-orders**: Chicken Shoyu Ramen reserveringssysteem\n- **Admin Dashboard**: Productbeheer en orderoverzicht\n- **Email Notificaties**: Automatische bevestigingen via Mailjet\n- **Responsive Design**: Mobile-first ontwerp met dark mode\n\n## Tech Stack\n\n- **Frontend**: React + TypeScript, Tailwind CSS, Shadcn/ui\n- **Backend**: Express.js, Node.js\n- **Database**: PostgreSQL met Drizzle ORM\n- **Email**: Mailjet API\n- **State Management**: TanStack Query\n- **Routing**: Wouter\n\n## Installatie\n\n```bash\nnpm install\n```\n\n## Environment Variables\n\nMaak een `.env` bestand aan met:\n\n```env\nDATABASE_URL=your_postgresql_connection_string\nMAILJET_API_KEY=your_mailjet_api_key\nMAILJET_SECRET_KEY=your_mailjet_secret_key\n```\n\n## Database Setup\n\n```bash\nnpm run db:push\n```\n\n## Development\n\n```bash\nnpm run dev\n```\n\nDe applicatie draait op http://localhost:5000\n\n## Production Build\n\n```bash\nnpm run build\nnpm start\n```\n\n## Admin Toegang\n\n- Username: `admin`\n- Password: `PlukPoot2025!Secure#Admin`\n\n## Deployment\n\nDeze applicatie is geoptimaliseerd voor deployment op Render met:\n- Automatische builds\n- PostgreSQL database integratie\n- Environment variables management\n\n## Contact\n\nVoor vragen over de producten: Star Numanstraat, Groningen","size_bytes":1473},"backup/syrup-website/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"backup/syrup-website/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"backup/syrup-website/replit.md":{"content":"# Replit.md - Pluk & Poot E-commerce Platform\n\n## Overview\n\nThis is a modern e-commerce website for artisanal syrups and ramen pre-orders based in Groningen, Netherlands. The application features a product catalog for handmade elderflower and rose syrups, a ramen pre-order system, admin dashboard, email notifications, and responsive design with dark mode support.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and better development experience\n- **Styling**: Tailwind CSS for utility-first styling with shadcn/ui component library\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Session Management**: Express-session for admin authentication\n- **Email Service**: Gmail SMTP for transactional emails (with fallback Mailjet configuration)\n\n### Database Schema\nThe application uses PostgreSQL with three main tables:\n- **products**: Stores syrup and ramen product information with stock management\n- **orders**: Handles syrup orders with customer details and delivery information\n- **ramenOrders**: Manages ramen pre-orders with date-based scheduling\n- **contactMessages**: Stores customer inquiries and feedback\n- **adminUsers**: Admin authentication (implemented in storage layer)\n\n## Key Components\n\n### Product Management\n- Product catalog with stock indicators and real-time updates\n- Dual product types: syrups (direct purchase) and ramen (pre-order system)\n- Admin CRUD operations for product management\n- Stock tracking with low-stock alerts\n\n### Order System\n- **Syrup Orders**: Direct ordering with customer information and delivery options\n- **Ramen Pre-orders**: Date-based reservation system requiring minimum 6 people\n- Order status management (pending, confirmed, completed, cancelled)\n- Email confirmations for all order types\n\n### Authentication\n- Session-based admin authentication\n- Protected admin routes and dashboard\n- Role-based access control\n\n### Email Notifications\n- Automated customer confirmations\n- Admin notifications for new orders\n- Ramen event confirmations when minimum capacity reached\n- Contact form submissions\n\n## Data Flow\n\n1. **Product Display**: Client fetches products from `/api/products`, displays with real-time stock\n2. **Order Placement**: \n   - Syrup orders go to `/api/orders/syrup`\n   - Ramen orders go to `/api/orders/ramen`\n3. **Email Flow**: Order creation triggers email notifications via Gmail SMTP\n4. **Admin Management**: Protected dashboard allows product/order management\n5. **Real-time Updates**: TanStack Query handles cache invalidation for live updates\n\n## External Dependencies\n\n### Email Service\n- **Primary**: Gmail SMTP (dckessler95@gmail.com) with app password\n- **Fallback**: Mailjet API configuration available but not actively used\n- Handles order confirmations, admin notifications, and contact submissions\n\n### Database\n- **Production**: Neon PostgreSQL serverless database\n- **ORM**: Drizzle with type-safe schema definitions\n- Connection pooling for efficient database operations\n\n### UI Components\n- **shadcn/ui**: Pre-built accessible components\n- **Radix UI**: Underlying primitive components\n- **Lucide Icons**: Consistent icon system\n- **Google Fonts**: Inter and Playfair Display typography\n\n## Deployment Strategy\n\n### Build Process\n- **Frontend**: Vite builds React app to `dist/public`\n- **Backend**: esbuild compiles Express server to `dist/index.js`\n- **Database**: Drizzle migrations handle schema changes\n\n### Environment Configuration\nRequired environment variables:\n- `DATABASE_URL`: PostgreSQL connection string\n- `MAILJET_API_KEY` & `MAILJET_SECRET_KEY`: Email service credentials (optional)\n- Gmail credentials embedded in code for primary email service\n\n### Production Considerations\n- Session secret should be environment-specific in production\n- HTTPS required for secure sessions\n- Database connection pooling configured for serverless deployment\n- Static assets served efficiently with proper caching headers\n\n### Development Workflow\n- `npm run dev`: Starts development server with hot reload\n- `npm run db:push`: Applies database schema changes\n- `npm run build`: Creates production build\n- `npm start`: Runs production server\n\nThe application is designed for easy deployment on platforms like Replit, with automatic asset serving and proper path resolution for both development and production environments.","size_bytes":4758},"backup/syrup-website/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"backup/syrup-website/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"backup/syrup-website/vite.production.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  build: {\n    outDir: \"dist/public\",\n    emptyOutDir: true,\n  },\n});","size_bytes":420},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport ProductPage from \"@/pages/product/[id]\";\nimport ChickenShoyuPage from \"@/pages/ramen/chicken-shoyu\";\nimport TonkotsuShoyuPage from \"@/pages/ramen/tonkotsu-shoyu\";\nimport ProductsPage from \"@/pages/products\";\nimport Webshop from \"@/pages/webshop\";\nimport WorkshopsPage from \"@/pages/workshops\";\nimport KombuchaWorkshop from \"@/pages/kombucha-workshop\";\nimport WorkshopDetails from \"@/pages/workshop-details\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport Contact from \"@/pages/contact\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={ProductsPage} />\n      <Route path=\"/webshop\" component={Webshop} />\n      <Route path=\"/workshops\" component={WorkshopsPage} />\n      <Route path=\"/producten/:slug\" component={ProductDetail} />\n      <Route path=\"/product/:id\" component={ProductPage} />\n      <Route path=\"/ramen/chicken-shoyu\" component={ChickenShoyuPage} />\n      <Route path=\"/ramen/tonkotsu-shoyu\" component={TonkotsuShoyuPage} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/kombucha-workshop\" component={KombuchaWorkshop} />\n      <Route path=\"/workshop-details\" component={WorkshopDetails} />\n      <Route path=\"/admin\" component={AdminLogin} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2234},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@property --syrup-hue {\n  syntax: \"<number>\";\n  initial-value: 260;\n  inherits: true;\n}\n\n:root {\n  /* Brouwerij Noordergloed Color Scheme */\n  --brewery-orange: 25 100% 50%; /* #FF7900 */\n  --brewery-brown-light: 18 25% 57%; /* #A77B71 */\n  --brewery-brown-dark: 18 35% 35%; /* #7E4438 */\n  --brewery-dark: 18 29% 17%; /* #35231F */\n  \n  --background: 35 20% 98%; /* Light warm background */\n  --foreground: var(--brewery-dark);\n  --muted: 35 15% 92%;\n  --muted-foreground: var(--brewery-brown-dark);\n  --popover: 0 0% 100%;\n  --popover-foreground: var(--brewery-dark);\n  --card: 0 0% 100%;\n  --card-foreground: var(--brewery-dark);\n  --border: 35 20% 88%;\n  --input: 35 20% 90%;\n  --primary: var(--brewery-orange);\n  --primary-foreground: 0 0% 100%;\n  --secondary: var(--brewery-brown-light);\n  --secondary-foreground: 0 0% 100%;\n  --accent: var(--brewery-brown-light);\n  --accent-foreground: 0 0% 100%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --ring: var(--brewery-orange);\n  --radius: 0.75rem;\n  \n  /* Custom brewery colors for gradients */\n  --syrup-accent: oklch(65% 0.25 var(--syrup-hue));\n  --elderflower-accent: oklch(75% 0.15 30);\n  --rose-accent: oklch(70% 0.20 340);\n}\n\n.dark {\n  --background: var(--brewery-dark);\n  --foreground: 35 20% 95%;\n  --muted: 18 35% 22%;\n  --muted-foreground: var(--brewery-brown-light);\n  --popover: var(--brewery-dark);\n  --popover-foreground: 35 20% 95%;\n  --card: 18 35% 25%;\n  --card-foreground: 35 20% 95%;\n  --border: 18 35% 25%;\n  --input: 18 35% 25%;\n  --primary: var(--brewery-orange);\n  --primary-foreground: 0 0% 100%;\n  --secondary: var(--brewery-brown-dark);\n  --secondary-foreground: 35 20% 95%;\n  --accent: var(--brewery-brown-dark);\n  --accent-foreground: 35 20% 95%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --ring: var(--brewery-orange);\n  --radius: 0.75rem;\n  \n  --syrup-hue: 25; /* Orange hue for dark mode */\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n  \n  .font-display {\n    font-family: 'Playfair Display', serif;\n  }\n}\n\n@layer components {\n  .parallax-container {\n    overflow: hidden;\n  }\n\n  .parallax-element {\n    transform: translateZ(0);\n    will-change: transform;\n  }\n\n  .glass-effect {\n    backdrop-filter: blur(20px);\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .brewery-gradient {\n    background: linear-gradient(135deg, hsl(var(--brewery-orange)) 0%, hsl(var(--brewery-brown-light)) 100%);\n  }\n  \n  .brewery-text-gradient {\n    background: linear-gradient(135deg, hsl(var(--brewery-orange)) 0%, hsl(var(--brewery-brown-dark)) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .brewery-hero-gradient {\n    background: linear-gradient(135deg, \n      hsl(var(--brewery-dark)) 0%, \n      hsl(var(--brewery-brown-dark)) 50%, \n      hsl(var(--brewery-brown-light)) 100%\n    );\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out forwards;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out forwards;\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(40px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n/* Scroll-driven animations for modern browsers */\n@supports (animation-timeline: view()) {\n  .scroll-animate {\n    animation: parallax linear;\n    animation-timeline: view();\n    animation-range: entry 0% cover 100%;\n  }\n}\n\n@keyframes parallax {\n  to {\n    transform: translateY(-50px);\n  }\n}\n\n/* View transitions for modern browsers */\n@supports (view-transition-name: none) {\n  .view-transition-hero {\n    view-transition-name: hero;\n  }\n}\n","size_bytes":4362},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"backup/syrup-website/server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"backup/syrup-website/server/gmail-ramen.ts":{"content":"import { sendEmail } from './gmail';\n\n// Customer confirmation email for new ramen order\nexport async function sendRamenOrderConfirmation(orderData: any): Promise<boolean> {\n  console.log('sendRamenOrderConfirmation called with data:', JSON.stringify(orderData, null, 2));\n  \n  const textContent = `\nHallo ${orderData.customerName},\n\nBedankt voor je ramen reservering bij Pluk & Poot!\n\nJe reservering:\nDatum: ${orderData.preferredDate}\nAantal personen: ${orderData.servings}\nStatus: In afwachting van bevestiging\n${orderData.notes ? `Opmerkingen: ${orderData.notes}` : ''}\n\nWe bevestigen je reservering zodra we minimaal 6 personen hebben voor deze datum.\nJe ontvangt een bevestigingsmail zodra het evenement definitief doorgaat.\n\nTelefoon: ${orderData.customerPhone}\nEmail: ${orderData.customerEmail}\n\nMet vriendelijke groet,\nDamian van Pluk & Poot\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🍜 Ramen Reservering Ontvangen</h1>\n      \n      <p>Hallo ${orderData.customerName},</p>\n      \n      <p>Bedankt voor je ramen reservering bij <strong>Pluk & Poot</strong>!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Je Reservering:</h3>\n        <p><strong>Datum:</strong> ${orderData.preferredDate}</p>\n        <p><strong>Aantal personen:</strong> ${orderData.servings}</p>\n        <p><strong>Status:</strong> In afwachting van bevestiging</p>\n        ${orderData.notes ? `<p><strong>Opmerkingen:</strong> ${orderData.notes}</p>` : ''}\n        \n        <div style=\"background-color: #ddd6fe; padding: 15px; border-radius: 5px; margin-top: 15px;\">\n          <p style=\"margin: 0;\"><strong>📞 Contact:</strong></p>\n          <p style=\"margin: 5px 0;\">Telefoon: ${orderData.customerPhone}</p>\n          <p style=\"margin: 5px 0;\">Email: ${orderData.customerEmail}</p>\n        </div>\n      </div>\n      \n      <div style=\"background-color: #fef3c7; padding: 15px; border-radius: 10px; border-left: 4px solid #f59e0b;\">\n        <p style=\"margin: 0;\"><strong>ℹ️ Volgende stappen:</strong></p>\n        <p style=\"margin: 10px 0 0 0;\">We bevestigen je reservering zodra we minimaal 6 personen hebben voor deze datum. Je ontvangt een bevestigingsmail zodra het evenement definitief doorgaat.</p>\n      </div>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Damian van Pluk & Poot</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [orderData.customerEmail],\n    subject: \"Ramen Reservering Ontvangen - Pluk & Poot 🍜\",\n    textContent,\n    htmlContent\n  });\n}","size_bytes":2802},"backup/syrup-website/server/gmail.ts":{"content":"import nodemailer from 'nodemailer';\n\n// Gmail SMTP configuration\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'dckessler95@gmail.com',\n    pass: 'ixyj ixjt imnb tvuu'\n  }\n});\n\ninterface EmailParams {\n  to: string[];\n  subject: string;\n  textContent: string;\n  htmlContent: string;\n  fromEmail?: string;\n  fromName?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    console.log('Sending email via Gmail SMTP to:', params.to);\n    \n    const mailOptions = {\n      from: `${params.fromName || 'Pluk & Poot'} <dckessler95@gmail.com>`,\n      to: params.to.join(', '),\n      subject: params.subject,\n      text: params.textContent,\n      html: params.htmlContent\n    };\n\n    const result = await transporter.sendMail(mailOptions);\n    console.log('Gmail email sent successfully:', result.messageId);\n    \n    // DO NOT SEND ADMIN COPY - this was causing duplicate emails\n    return true;\n  } catch (error) {\n    console.error('Gmail email error:', error);\n    return false;\n  }\n}\n\nexport async function sendRamenInvitation(emails: string[], date: string): Promise<boolean> {\n  const subject = `🍜 Ramen Ervaring Bevestiging - ${date}`;\n  \n  const textContent = `\nBeste ramen liefhebber,\n\nGeweldig nieuws! We hebben genoeg aanmeldingen voor de ramen ervaring op ${date}.\n\nDe ramen ervaring zal plaatsvinden bij Pluk & Poot met verse, lokale ingrediënten en authentieke Japanse smaken.\n\nDetails:\n- Datum: ${date}\n- Tijd: 18:00 - 20:00\n- Locatie: Pluk & Poot, Groningen\n- Prijs: €25 per persoon\n\nWe nemen binnenkort contact met je op voor de finale details en betalingsinstructies.\n\nMet vriendelijke groet,\nHet Pluk & Poot Team\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🍜 Ramen Ervaring Bevestiging</h1>\n      \n      <p>Beste ramen liefhebber,</p>\n      \n      <p><strong>Geweldig nieuws!</strong> We hebben genoeg aanmeldingen voor de ramen ervaring op <strong>${date}</strong>.</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Details van je Ramen Ervaring:</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li>📅 <strong>Datum:</strong> ${date}</li>\n          <li>🕕 <strong>Tijd:</strong> 18:00 - 20:00</li>\n          <li>📍 <strong>Locatie:</strong> Pluk & Poot, Groningen</li>\n          <li>💰 <strong>Prijs:</strong> €25 per persoon</li>\n        </ul>\n      </div>\n      \n      <p>De ramen ervaring wordt bereid met verse, lokale ingrediënten en authentieke Japanse smaken.</p>\n      \n      <p>We nemen binnenkort contact met je op voor de finale details en betalingsinstructies.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Het Pluk & Poot Team</strong></p>\n      </div>\n    </div>\n  `;\n\n  // Send to customer only, no admin copies\n  const result = await sendEmail({\n    to: emails,\n    subject,\n    textContent,\n    htmlContent\n  });\n  \n  // DO NOT send admin copy to prevent duplicate emails\n  return result;\n}\n\nexport async function sendAdminNotification(orderDetails: string): Promise<boolean> {\n  const subject = \"🔔 Nieuwe Ramen Bestelling - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuwe ramen bestelling binnengekomen op je website!\n\n${orderDetails}\n\nLog in op je admin dashboard om de bestelling te bekijken en te beheren.\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🔔 Nieuwe Ramen Bestelling</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuwe ramen bestelling binnengekomen op je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <pre style=\"white-space: pre-wrap; font-family: monospace;\">${orderDetails}</pre>\n      </div>\n      \n      <p>Log in op je admin dashboard om de bestelling te bekijken en te beheren.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendContactNotification(contactData: any): Promise<boolean> {\n  const subject = \"📬 Nieuw Contact Bericht - Pluk & Poot\";\n  const fullName = `${contactData.firstName} ${contactData.lastName}`;\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuw contact bericht binnengekomen via je website!\n\nNaam: ${fullName}\nEmail: ${contactData.email}\nOnderwerp: ${contactData.subject}\n\nBericht:\n${contactData.message}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">📬 Nieuw Contact Bericht</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuw contact bericht binnengekomen via je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Contact Details:</h3>\n        <p><strong>Naam:</strong> ${fullName}</p>\n        <p><strong>Email:</strong> ${contactData.email}</p>\n        <p><strong>Onderwerp:</strong> ${contactData.subject}</p>\n        \n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Bericht:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; border-left: 4px solid #7c3aed;\">\n          ${contactData.message.replace(/\\n/g, '<br>')}\n        </div>\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendCustomerStatusUpdate(orderData: any): Promise<boolean> {\n  console.log('sendCustomerStatusUpdate called with data:', JSON.stringify(orderData, null, 2));\n  \n  // Different messages based on status\n  const getStatusMessage = (status: string) => {\n    switch (status) {\n      case 'bevestigd':\n        return {\n          subject: \"✅ Je bestelling is bevestigd - Pluk & Poot\",\n          message: \"Goed nieuws! Je bestelling is bevestigd en gaat in behandeling.\"\n        };\n      case 'klaar':\n        return {\n          subject: \"📦 Je bestelling is klaar - Pluk & Poot\",\n          message: \"Je bestelling is klaar! \" + (orderData.deliveryMethod === 'pickup' ? 'Je kunt hem ophalen.' : 'We bezorgen hem binnenkort.')\n        };\n      case 'voltooid':\n        return {\n          subject: \"🎉 Bestelling voltooid - Pluk & Poot\",\n          message: \"Je bestelling is succesvol voltooid! Bedankt voor je aankoop bij Pluk & Poot.\"\n        };\n      case 'geannuleerd':\n        return {\n          subject: \"❌ Bestelling geannuleerd - Pluk & Poot\",\n          message: \"Je bestelling is geannuleerd. Neem contact met ons op als je vragen hebt.\"\n        };\n      default:\n        return {\n          subject: \"📋 Status update - Pluk & Poot\",\n          message: \"Er is een update voor je bestelling.\"\n        };\n    }\n  };\n\n  const statusInfo = getStatusMessage(orderData.status);\n  \n  const textContent = `\nHallo ${orderData.customerName},\n\n${statusInfo.message}\n\nJe bestelling:\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\n${orderData.deliveryMethod === 'delivery' ? 'Bezorgkosten: €1.00' : ''}\nTotaal: €${orderData.totalAmount}\nStatus: ${orderData.status}\n\n${orderData.notes ? `Opmerkingen: ${orderData.notes}` : ''}\n\nBij vragen kun je altijd contact met ons opnemen!\n\nMet vriendelijke groet,\nDamian van Pluk & Poot\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">${statusInfo.subject}</h1>\n      \n      <p>Hallo ${orderData.customerName},</p>\n      \n      <p>${statusInfo.message}</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Je Bestelling:</h3>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        ${orderData.deliveryMethod === 'delivery' ? '<p><strong>Bezorgkosten:</strong> €1.00</p>' : ''}\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        <p><strong>Status:</strong> <span style=\"background-color: #7c3aed; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;\">${orderData.status.toUpperCase()}</span></p>\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n      </div>\n      \n      <p>Bij vragen kun je altijd contact met ons opnemen!</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Damian van Pluk & Poot</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [orderData.customerEmail],\n    subject: statusInfo.subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendCustomerOrderConfirmation(orderData: any): Promise<boolean> {\n  console.log('sendCustomerOrderConfirmation called with data:', JSON.stringify(orderData, null, 2));\n  \n  const textContent = `\nHallo ${orderData.customerName},\n\nBedankt voor je bestelling bij Pluk & Poot!\n\nJe bestelling:\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\n${orderData.deliveryMethod === 'delivery' ? 'Bezorgkosten: €1.00' : ''}\nTotaal: €${orderData.totalAmount}\nBezorging: ${orderData.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen (gratis)'}\n\n${orderData.deliveryMethod === 'delivery' && orderData.streetAddress ? `\nBezorgadres:\n${orderData.streetAddress}\n${orderData.postalCode} ${orderData.city}\n${orderData.country}` : ''}\n\n${orderData.notes ? `Opmerkingen: ${orderData.notes}` : ''}\n\nJe bestelling heeft status: ${orderData.status}\nBesteld op: ${new Date().toLocaleString('nl-NL')}\n\nWe nemen zo snel mogelijk contact met je op!\n\nMet vriendelijke groet,\nDamian van Pluk & Poot\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">Bedankt voor je bestelling! 🌿</h1>\n      \n      <p>Hallo ${orderData.customerName},</p>\n      \n      <p>Bedankt voor je bestelling bij <strong>Pluk & Poot</strong>!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Je Bestelling:</h3>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        ${orderData.deliveryMethod === 'delivery' ? '<p><strong>Bezorgkosten:</strong> €1.00</p>' : ''}\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        <p><strong>Bezorging:</strong> ${orderData.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen (gratis)'}</p>\n        \n        ${orderData.deliveryMethod === 'delivery' && orderData.streetAddress ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Bezorgadres:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.streetAddress}<br>\n          ${orderData.postalCode} ${orderData.city}<br>\n          ${orderData.country}\n        </div>\n        ` : ''}\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n        \n        <p><strong>Status:</strong> <span style=\"background-color: #7c3aed; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;\">${orderData.status.toUpperCase()}</span></p>\n      </div>\n      \n      <p>We nemen zo snel mogelijk contact met je op!</p>\n      \n      <p><small>Besteld op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Damian van Pluk & Poot</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [orderData.customerEmail],\n    subject: \"Bestelling Ontvangen - Pluk & Poot 🌿\",\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendOrderNotification(orderData: any): Promise<boolean> {\n  console.log('sendOrderNotification called with data:', JSON.stringify(orderData, null, 2));\n  \n  // Different email templates based on status\n  const getEmailContent = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return {\n          subject: \"🛒 Nieuwe Siroop Bestelling - Pluk & Poot\",\n          message: \"Er is een nieuwe siroop bestelling binnengekomen!\"\n        };\n      case 'bevestigd':\n        return {\n          subject: \"✅ Bestelling Bevestigd - Pluk & Poot\",\n          message: \"Een siroop bestelling is bevestigd en gaat in behandeling!\"\n        };\n      case 'klaar':\n        return {\n          subject: \"📦 Bestelling Klaar voor Ophalen/Bezorging - Pluk & Poot\",\n          message: \"Een siroop bestelling is klaar voor ophalen of bezorging!\"\n        };\n      case 'voltooid':\n        return {\n          subject: \"🎉 Bestelling Voltooid - Pluk & Poot\",\n          message: \"Een siroop bestelling is succesvol voltooid!\"\n        };\n      case 'geannuleerd':\n        return {\n          subject: \"❌ Bestelling Geannuleerd - Pluk & Poot\",\n          message: \"Een siroop bestelling is geannuleerd.\"\n        };\n      default:\n        return {\n          subject: \"📋 Siroop Bestelling Update - Pluk & Poot\",\n          message: \"Er is een update voor een siroop bestelling.\"\n        };\n    }\n  };\n\n  const emailContent = getEmailContent(orderData.status);\n  \n  const textContent = `\nHallo Damian,\n\n${emailContent.message}\n\nKlant: ${orderData.customerName}\nEmail: ${orderData.customerEmail}\nTelefoon: ${orderData.customerPhone || 'Niet opgegeven'}\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\n${orderData.deliveryMethod === 'Bezorgen' ? 'Bezorgkosten: €1.00' : ''}\nTotaal: €${orderData.totalAmount}\nBezorging: ${orderData.deliveryMethod}\nStatus: ${orderData.status}\n\nOpmerkingen: ${orderData.notes || 'Geen opmerkingen'}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">${emailContent.subject}</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>${emailContent.message}</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <p><strong>Klant:</strong> ${orderData.customerName}</p>\n        <p><strong>Email:</strong> ${orderData.customerEmail}</p>\n        <p><strong>Telefoon:</strong> ${orderData.customerPhone || 'Niet opgegeven'}</p>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        ${orderData.deliveryMethod === 'Bezorgen' ? '<p><strong>Bezorgkosten:</strong> €1.00</p>' : ''}\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        <p><strong>Bezorging:</strong> ${orderData.deliveryMethod}</p>\n        <p><strong>Status:</strong> <span style=\"background-color: #7c3aed; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;\">${orderData.status.toUpperCase()}</span></p>\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject: emailContent.subject,\n    textContent,\n    htmlContent\n  });\n}","size_bytes":17281},"backup/syrup-website/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\n// Setup session middleware for admin authentication\napp.use(session({\n  secret: 'pluk-poot-admin-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Serve static files from attached_assets and client/public\napp.use('/attached_assets', express.static('attached_assets'));\napp.use('/images', express.static('client/public/images'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2459},"backup/syrup-website/server/mailjet.ts":{"content":"import Mailjet from 'node-mailjet';\n\nif (!process.env.MAILJET_API_KEY || !process.env.MAILJET_SECRET_KEY) {\n  throw new Error(\"MAILJET_API_KEY and MAILJET_SECRET_KEY environment variables must be set\");\n}\n\nconst mailjet = new Mailjet({\n  apiKey: process.env.MAILJET_API_KEY,\n  apiSecret: process.env.MAILJET_SECRET_KEY\n});\n\ninterface EmailParams {\n  to: string[];\n  subject: string;\n  textContent: string;\n  htmlContent: string;\n  fromEmail?: string;\n  fromName?: string;\n}\n\nexport async function sendBulkEmail(params: EmailParams): Promise<boolean> {\n  try {\n    console.log('Attempting to send email to:', params.to);\n    console.log('From email:', params.fromEmail || \"dc@damian.kessler.nl\");\n    \n    const request = mailjet\n      .post(\"send\", { 'version': 'v3.1' })\n      .request({\n        Messages: params.to.map(email => ({\n          From: {\n            Email: params.fromEmail || \"dc@damian.kessler.nl\",\n            Name: params.fromName || \"Pluk & Poot\"\n          },\n          To: [\n            {\n              Email: email,\n              Name: \"\"\n            }\n          ],\n          Subject: params.subject,\n          TextPart: params.textContent,\n          HTMLPart: params.htmlContent\n        }))\n      });\n\n    const result = await request;\n    console.log('Mailjet response status:', result.response?.status);\n    console.log('Mailjet response body:', JSON.stringify(result.body, null, 2));\n    \n    // Check if email was actually accepted\n    if (result.body && result.body.Messages && result.body.Messages.length > 0) {\n      const firstMessage = result.body.Messages[0];\n      if (firstMessage && firstMessage.Status === 'success') {\n        console.log('Email accepted by Mailjet for delivery');\n        return true;\n      } else {\n        console.log('Email not accepted by Mailjet:', firstMessage);\n        return false;\n      }\n    }\n    \n    // If we got a successful response but no Messages array, consider it successful\n    if (result.response?.status === 200) {\n      console.log('Mailjet returned 200, considering email sent successfully');\n      return true;\n    }\n    \n    return false;\n  } catch (error) {\n    console.error('Mailjet email error:', error);\n    return false;\n  }\n}\n\nexport async function sendRamenInvitation(emails: string[], date: string): Promise<boolean> {\n  const subject = `🍜 Ramen Ervaring Bevestiging - ${date}`;\n  \n  const textContent = `\nBeste ramen liefhebber,\n\nGeweldig nieuws! We hebben genoeg aanmeldingen voor de ramen ervaring op ${date}.\n\nDe ramen ervaring zal plaatsvinden bij Pluk & Poot met verse, lokale ingrediënten en authentieke Japanse smaken.\n\nDetails:\n- Datum: ${date}\n- Tijd: 18:00 - 20:00\n- Locatie: Pluk & Poot, Groningen\n- Prijs: €25 per persoon\n\nWe nemen binnenkort contact met je op voor de finale details en betalingsinstructies.\n\nMet vriendelijke groet,\nHet Pluk & Poot Team\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🍜 Ramen Ervaring Bevestiging</h1>\n      \n      <p>Beste ramen liefhebber,</p>\n      \n      <p><strong>Geweldig nieuws!</strong> We hebben genoeg aanmeldingen voor de ramen ervaring op <strong>${date}</strong>.</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Details van je Ramen Ervaring:</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li>📅 <strong>Datum:</strong> ${date}</li>\n          <li>🕕 <strong>Tijd:</strong> 18:00 - 20:00</li>\n          <li>📍 <strong>Locatie:</strong> Pluk & Poot, Groningen</li>\n          <li>💰 <strong>Prijs:</strong> €25 per persoon</li>\n        </ul>\n      </div>\n      \n      <p>De ramen ervaring wordt bereid met verse, lokale ingrediënten en authentieke Japanse smaken.</p>\n      \n      <p>We nemen binnenkort contact met je op voor de finale details en betalingsinstructies.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Met vriendelijke groet,<br>\n        <strong>Het Pluk & Poot Team</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: emails,\n    subject,\n    textContent,\n    htmlContent\n  });\n}\n\nexport async function sendAdminNotification(orderDetails: string): Promise<boolean> {\n  const subject = \"🔔 Nieuwe Ramen Bestelling - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuwe ramen bestelling binnengekomen op je website!\n\n${orderDetails}\n\nLog in op je admin dashboard om de bestelling te bekijken en te beheren.\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🔔 Nieuwe Ramen Bestelling</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuwe ramen bestelling binnengekomen op je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <pre style=\"white-space: pre-wrap; font-family: monospace;\">${orderDetails}</pre>\n      </div>\n      \n      <p>Log in op je admin dashboard om de bestelling te bekijken en te beheren.</p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent,\n    fromEmail: \"dc@damian.kessler.nl\",\n    fromName: \"Pluk & Poot Notificaties\"\n  });\n}\n\n// Email template voor contact formulier berichten\nexport async function sendContactNotification(contactData: any): Promise<boolean> {\n  const subject = \"📬 Nieuw Contact Bericht - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuw contact bericht binnengekomen via je website!\n\nNaam: ${contactData.name}\nEmail: ${contactData.email}\nTelefoon: ${contactData.phone || 'Niet opgegeven'}\n\nBericht:\n${contactData.message}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">📬 Nieuw Contact Bericht</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuw contact bericht binnengekomen via je website!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Contact Details:</h3>\n        <p><strong>Naam:</strong> ${contactData.name}</p>\n        <p><strong>Email:</strong> ${contactData.email}</p>\n        <p><strong>Telefoon:</strong> ${contactData.phone || 'Niet opgegeven'}</p>\n        \n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Bericht:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; border-left: 4px solid #7c3aed;\">\n          ${contactData.message.replace(/\\n/g, '<br>')}\n        </div>\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent,\n    fromEmail: \"dc@damian.kessler.nl\",\n    fromName: \"Pluk & Poot Contact\"\n  });\n}\n\n// Email template voor syrup bestellingen\nexport async function sendOrderNotification(orderData: any): Promise<boolean> {\n  const subject = \"🛒 Nieuwe Siroop Bestelling - Pluk & Poot\";\n  \n  const textContent = `\nHallo Damian,\n\nEr is een nieuwe siroop bestelling binnengekomen!\n\nKlant: ${orderData.customerName}\nEmail: ${orderData.customerEmail}\nTelefoon: ${orderData.customerPhone || 'Niet opgegeven'}\nProduct: ${orderData.productName}\nAantal: ${orderData.quantity}\nTotaal: €${orderData.totalAmount}\n\nOpmerkingen: ${orderData.notes || 'Geen opmerkingen'}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n\nGroet,\nJe Pluk & Poot Website\n  `;\n\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h1 style=\"color: #7c3aed;\">🛒 Nieuwe Siroop Bestelling</h1>\n      \n      <p>Hallo Damian,</p>\n      \n      <p>Er is een nieuwe siroop bestelling binnengekomen!</p>\n      \n      <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n        <h3 style=\"color: #374151; margin-top: 0;\">Bestelling Details:</h3>\n        <p><strong>Klant:</strong> ${orderData.customerName}</p>\n        <p><strong>Email:</strong> ${orderData.customerEmail}</p>\n        <p><strong>Telefoon:</strong> ${orderData.customerPhone || 'Niet opgegeven'}</p>\n        <p><strong>Product:</strong> ${orderData.productName}</p>\n        <p><strong>Aantal:</strong> ${orderData.quantity}</p>\n        <p><strong>Totaal:</strong> €${orderData.totalAmount}</p>\n        \n        ${orderData.notes ? `\n        <h4 style=\"color: #374151; margin-bottom: 10px;\">Opmerkingen:</h4>\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px;\">\n          ${orderData.notes}\n        </div>\n        ` : ''}\n      </div>\n      \n      <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n      \n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n        <p>Groet,<br>\n        <strong>Je Pluk & Poot Website</strong></p>\n      </div>\n    </div>\n  `;\n\n  return await sendBulkEmail({\n    to: [\"dckessler95@gmail.com\"],\n    subject,\n    textContent,\n    htmlContent,\n    fromEmail: \"dc@damian.kessler.nl\",\n    fromName: \"Pluk & Poot Bestellingen\"\n  });\n}","size_bytes":9990},"backup/syrup-website/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertOrderSchema, insertRamenOrderSchema, insertContactMessageSchema, insertProductSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { sendRamenInvitation, sendAdminNotification, sendContactNotification, sendOrderNotification, sendCustomerOrderConfirmation, sendCustomerStatusUpdate, sendEmail } from \"./gmail\";\n\nconst ramenOrderRequestSchema = z.object({\n  customerName: z.string().min(1),\n  customerEmail: z.string().email(),\n  customerPhone: z.string().min(1),\n  preferredDate: z.string(),\n  notes: z.string().optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all products\n  app.get(\"/api/products\", async (_req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Delete product\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      const success = await storage.deleteProduct(productId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Update product\n  app.patch(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      const updatedProduct = await storage.updateProduct(productId, req.body);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(updatedProduct);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  // Get single product\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const product = await storage.getProduct(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Create syrup order\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse({\n        ...req.body,\n        orderType: \"syrup\",\n        status: \"pending\",\n      });\n\n      const order = await storage.createOrder(orderData);\n      \n      // Update product stock if productId is provided\n      if (order.productId) {\n        const product = await storage.getProduct(order.productId);\n        if (product && product.stock > 0) {\n          await storage.updateProductStock(order.productId, product.stock - order.quantity);\n        }\n      }\n\n      // Get product details for email\n      const product = await storage.getProduct(orderData.productId!);\n      \n      // Send notification email to admin\n      const orderDetails = `\nNieuwe Siroop Bestelling!\n\nKlant: ${order.customerName}\nEmail: ${order.customerEmail}\nTelefoon: ${order.customerPhone || 'Niet opgegeven'}\nProduct: ${product?.name || 'Onbekend product'}\nAantal: ${order.quantity}\nTotaal: €${order.totalAmount}\nBezorging: ${order.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen'}\n${order.deliveryMethod === 'delivery' && order.streetAddress ? `\nBezorgadres:\n${order.streetAddress}\n${order.postalCode} ${order.city}\n${order.country}` : ''}\nOpmerkingen: ${order.notes || 'Geen opmerkingen'}\nStatus: ${order.status}\nBesteld op: ${order.createdAt?.toLocaleString('nl-NL')}\n      `;\n      \n      // Send confirmation email to customer\n      try {\n        await sendCustomerOrderConfirmation({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod,\n          streetAddress: order.streetAddress,\n          postalCode: order.postalCode,\n          city: order.city,\n          country: order.country,\n          notes: order.notes\n        });\n        console.log('Customer confirmation email sent for order');\n      } catch (emailError) {\n        console.error('Failed to send customer confirmation:', emailError);\n      }\n\n      // Send notification email to admin\n      try {\n        await sendOrderNotification({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen',\n          notes: order.notes || 'Geen opmerkingen'\n        });\n        console.log('Admin notification sent for new syrup order');\n      } catch (emailError) {\n        console.error('Failed to send admin notification:', emailError);\n        // Continue even if notification fails\n      }\n\n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Create ramen order (per person)\n  app.post(\"/api/orders/ramen\", async (req, res) => {\n    try {\n      const requestData = ramenOrderRequestSchema.parse(req.body);\n      \n      // Parse and validate date\n      const preferredDate = new Date(requestData.preferredDate);\n      console.log(\"Ramen order for date:\", preferredDate);\n\n      // Check existing orders for that date\n      const existingOrders = await storage.getRamenOrdersByDate(preferredDate);\n      if (existingOrders.length >= 6) {\n        return res.status(400).json({ \n          message: \"This date is fully booked. Please choose another Friday.\" \n        });\n      }\n\n      // Create ramen order (per person)\n      const ramenOrder = await storage.createRamenOrder({\n        customerName: requestData.customerName,\n        customerEmail: requestData.customerEmail,\n        customerPhone: requestData.customerPhone,\n        preferredDate,\n        servings: 1, // Per person\n        status: \"pending\",\n        notes: requestData.notes,\n      });\n\n      // Send notification email to admin\n      const orderDetails = `\nKlant: ${ramenOrder.customerName}\nEmail: ${ramenOrder.customerEmail}\nTelefoon: ${ramenOrder.customerPhone || 'Niet opgegeven'}\nGewenste Datum: ${ramenOrder.preferredDate.toLocaleDateString('nl-NL', { \n  weekday: 'long', \n  year: 'numeric', \n  month: 'long', \n  day: 'numeric' \n})}\nAantal Porties: ${ramenOrder.servings}\nOpmerkingen: ${ramenOrder.notes || 'Geen opmerkingen'}\nStatus: ${ramenOrder.status}\n      `;\n      \n      // Send customer confirmation email\n      try {\n        const { sendRamenOrderConfirmation } = await import('./gmail-ramen');\n        await sendRamenOrderConfirmation({\n          customerName: ramenOrder.customerName,\n          customerEmail: ramenOrder.customerEmail,\n          customerPhone: ramenOrder.customerPhone || 'Niet opgegeven',\n          servings: ramenOrder.servings,\n          notes: ramenOrder.notes,\n          preferredDate: ramenOrder.preferredDate.toLocaleDateString('nl-NL', { \n            weekday: 'long', \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n          })\n        });\n        console.log('Customer confirmation email sent for ramen order');\n      } catch (emailError) {\n        console.error('Failed to send customer confirmation:', emailError);\n      }\n\n      try {\n        await sendAdminNotification(orderDetails);\n        console.log('Admin notification sent for new ramen order');\n      } catch (emailError) {\n        console.error('Failed to send admin notification:', emailError);\n        // Continue even if notification fails\n      }\n\n      // Check if this booking completed the group of 6\n      const updatedOrders = await storage.getRamenOrdersByDate(preferredDate);\n      const isConfirmed = updatedOrders.length >= 6 && updatedOrders.every(o => o.status === \"confirmed\");\n\n      res.json({ \n        ramenOrder, \n        totalBookings: updatedOrders.length,\n        isConfirmed,\n        message: isConfirmed \n          ? \"Gefeliciteerd! Jullie groep is compleet en de ramen-avond is bevestigd!\" \n          : `Bedankt voor je boeking! Nog ${6 - updatedOrders.length} personen nodig voor deze datum.`\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create ramen order\" });\n    }\n  });\n\n  // Get ramen availability for a specific date\n  app.get(\"/api/ramen/availability/:date\", async (req, res) => {\n    try {\n      const date = new Date(req.params.date);\n      const existingOrders = await storage.getRamenOrdersByDate(date);\n      const available = 6 - existingOrders.length;\n      \n      res.json({ \n        date: req.params.date,\n        available,\n        total: 6,\n        isAvailable: available > 0\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check availability\" });\n    }\n  });\n\n  // Submit contact form\n  app.post(\"/api/contact\", async (req, res) => {\n    console.log('=== CONTACT FORM SUBMITTED ===');\n    console.log('Request body:', req.body);\n    \n    try {\n      const messageData = insertContactMessageSchema.parse(req.body);\n      console.log('Parsed message data:', messageData);\n      \n      const message = await storage.createContactMessage(messageData);\n      console.log('Message stored in database');\n      \n      // Send admin notification email directly using sendEmail\n      try {\n        console.log('Attempting to send email notification...');\n        await sendEmail({\n          to: [\"dckessler95@gmail.com\"],\n          subject: `📬 Nieuw Contact Bericht - ${messageData.subject}`,\n          textContent: `\nHallo Damian,\n\nEr is een nieuw contact bericht binnengekomen via je website!\n\nNaam: ${messageData.firstName} ${messageData.lastName}\nEmail: ${messageData.email}\nOnderwerp: ${messageData.subject}\n\nBericht:\n${messageData.message}\n\nVerzonden op: ${new Date().toLocaleString('nl-NL')}\n          `,\n          htmlContent: `\n<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n  <h1 style=\"color: #7c3aed;\">📬 Nieuw Contact Bericht</h1>\n  \n  <p>Hallo Damian,</p>\n  \n  <p>Er is een nieuw contact bericht binnengekomen via je website!</p>\n  \n  <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h3 style=\"color: #374151; margin-top: 0;\">Contact Details:</h3>\n    <p><strong>Naam:</strong> ${messageData.firstName} ${messageData.lastName}</p>\n    <p><strong>Email:</strong> ${messageData.email}</p>\n    <p><strong>Onderwerp:</strong> ${messageData.subject}</p>\n    \n    <h4 style=\"color: #374151; margin-bottom: 10px;\">Bericht:</h4>\n    <div style=\"background-color: white; padding: 15px; border-radius: 5px; border-left: 4px solid #7c3aed;\">\n      ${messageData.message.replace(/\\n/g, '<br>')}\n    </div>\n  </div>\n  \n  <p><small>Verzonden op: ${new Date().toLocaleString('nl-NL')}</small></p>\n</div>\n          `\n        });\n        console.log('Contact notification email sent successfully!');\n      } catch (emailError) {\n        console.error('Failed to send contact notification:', emailError);\n      }\n      \n      res.json(message);\n    } catch (error) {\n      console.error('Contact form error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid message data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Get all orders (admin)\n  app.get(\"/api/orders\", async (_req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Get all ramen orders\n  app.get(\"/api/ramen-orders\", async (req, res) => {\n    try {\n      const orders = await storage.getRamenOrders();\n      console.log(\"API: Returning ramen orders:\", orders.length);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching ramen orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch ramen orders\" });\n    }\n  });\n\n  // Admin Authentication Routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const admin = await storage.getAdminByUsername(username);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check if password matches the secure admin password\n      if (password === \"PlukPoot2025!Secure#Admin\") {\n        // Set admin session\n        (req as any).session.adminId = admin.id;\n        (req as any).session.adminUsername = admin.username;\n        \n        res.json({ message: \"Login successful\", admin: { id: admin.id, username: admin.username, role: admin.role } });\n      } else {\n        res.status(401).json({ message: \"Invalid credentials\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: \"Login error: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", (req, res) => {\n    (req as any).session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout error\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Admin status check route\n  app.get(\"/api/admin/status\", (req, res) => {\n    const isAdmin = !!(req as any).session?.adminId;\n    res.json({ isAdmin });\n  });\n\n  // Admin middleware\n  const requireAdmin = (req: any, res: any, next: any) => {\n    if (!req.session?.adminId) {\n      return res.status(401).json({ message: \"Admin authentication required\" });\n    }\n    next();\n  };\n\n  // Admin Product Management Routes\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating product: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/products/:id/stock\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { stock } = req.body;\n      \n      if (isNaN(id) || typeof stock !== \"number\") {\n        return res.status(400).json({ message: \"Invalid product ID or stock value\" });\n      }\n\n      const product = await storage.updateProductStock(id, stock);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      res.json(product);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating stock: \" + error.message });\n    }\n  });\n\n  // Confirm all ramen orders for a specific date (admin)\n  app.post(\"/api/ramen-orders/confirm\", requireAdmin, async (req, res) => {\n    try {\n      const { date } = req.body;\n      \n      if (!date) {\n        return res.status(400).json({ message: \"Date is required\" });\n      }\n\n      const targetDate = new Date(date);\n      const confirmedOrders = await storage.confirmRamenOrdersForDate(targetDate);\n      \n      if (confirmedOrders.length === 0) {\n        return res.status(400).json({ message: \"No pending orders found for this date\" });\n      }\n\n      // Send confirmation emails to all confirmed orders\n      const emails = confirmedOrders.map(order => order.customerEmail);\n      const dateStr = targetDate.toLocaleDateString('nl-NL', { \n        weekday: 'long', \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n      \n      try {\n        await sendRamenInvitation(emails, dateStr);\n        console.log(`Confirmation emails sent to ${emails.length} customers for ${dateStr}`);\n      } catch (emailError) {\n        console.error(\"Failed to send confirmation emails:\", emailError);\n        // Continue even if email fails\n      }\n\n      res.json({ \n        message: `${confirmedOrders.length} orders confirmed for ${dateStr}`,\n        confirmedOrders,\n        emailsSent: emails.length\n      });\n    } catch (error: any) {\n      console.error(\"Error confirming ramen orders:\", error);\n      res.status(500).json({ message: \"Error confirming orders: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/ramen-orders/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      if (isNaN(id) || !status) {\n        return res.status(400).json({ message: \"Invalid order ID or status\" });\n      }\n\n      const order = await storage.updateRamenOrderStatus(id, status);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      // Send status update email to customer\n      try {\n        await sendCustomerStatusUpdate({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: 'Ramen Avond',\n          quantity: order.servings,\n          totalAmount: '€0 (gratis)',\n          status: order.status,\n          deliveryMethod: 'Locatie wordt nog bekend gemaakt',\n          streetAddress: '',\n          postalCode: '',\n          city: '',\n          country: '',\n          notes: order.notes,\n          preferredDate: order.preferredDate.toLocaleDateString('nl-NL', { \n            weekday: 'long', \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n          })\n        });\n        console.log(`Status update email sent to ${order.customerEmail} for ramen order ${id}`);\n      } catch (emailError) {\n        console.error('Failed to send status update email:', emailError);\n        // Continue even if email fails\n      }\n\n      res.json(order);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating order status: \" + error.message });\n    }\n  });\n\n  // Send individual confirmation email for a syrup order (admin)\n  app.post(\"/api/orders/:id/send-confirmation\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      // Get the order from storage to get the correct data\n      const orders = await storage.getOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      // Get product details\n      const product = await storage.getProduct(order.productId!);\n      \n      try {\n        // Send status update email to customer\n        await sendCustomerStatusUpdate({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod,\n          notes: order.notes\n        });\n        console.log(`Customer status update email sent to ${order.customerEmail} for order ${id}`);\n\n        // Send notification email to admin\n        await sendOrderNotification({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone || 'Niet opgegeven',\n          productName: product?.name || 'Onbekend product',\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          deliveryMethod: order.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen',\n          notes: order.notes || 'Geen opmerkingen'\n        });\n        console.log(`Admin notification sent for order ${id}`);\n        \n        res.json({ \n          message: `Status email verzonden naar klant en admin`,\n          customerEmail: order.customerEmail,\n          status: order.status\n        });\n      } catch (emailError) {\n        console.error(\"Failed to send status emails:\", emailError);\n        res.status(500).json({ message: \"Failed to send status emails\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error sending confirmation: \" + error.message });\n    }\n  });\n\n  // Send individual confirmation email for a ramen order (admin)\n  app.post(\"/api/ramen-orders/:id/send-confirmation\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      // Get the order from storage to get the correct data\n      const orders = await storage.getRamenOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const dateStr = order.preferredDate.toLocaleDateString('nl-NL', { \n        weekday: 'long', \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n      \n      try {\n        // Send email ONLY to the specific customer\n        await sendRamenInvitation([order.customerEmail], dateStr);\n        console.log(`Individual confirmation email sent to ${order.customerEmail} for ${dateStr}`);\n        \n        res.json({ \n          message: `Bevestigingsmail verzonden naar ${order.customerEmail}`,\n          email: order.customerEmail,\n          date: dateStr\n        });\n      } catch (emailError) {\n        console.error(\"Failed to send individual confirmation email:\", emailError);\n        res.status(500).json({ message: \"Failed to send confirmation email\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error sending individual confirmation:\", error);\n      res.status(500).json({ message: \"Error sending confirmation: \" + error.message });\n    }\n  });\n\n  // Test email functionality (admin)\n  app.post(\"/api/test-email\", requireAdmin, async (req, res) => {\n    try {\n      const testEmail = await sendEmail({\n        to: [\"dckessler95@gmail.com\"],\n        subject: \"Test Email - Pluk & Poot Gmail SMTP\",\n        textContent: \"Dit is een test email via Gmail SMTP. Als je dit ontvangt werkt de email functionaliteit correct!\",\n        htmlContent: \"<h1>Test Email via Gmail SMTP</h1><p>Dit is een test email via Gmail SMTP.</p><p><strong>Als je dit ontvangt werkt de email functionaliteit correct!</strong></p><p>Verzonden op: \" + new Date().toLocaleString('nl-NL') + \"</p>\",\n      });\n      \n      if (testEmail) {\n        res.json({ message: \"Test email verzonden naar dckessler95@gmail.com via Gmail SMTP\" });\n      } else {\n        res.status(500).json({ message: \"Test email kon niet worden verzonden\" });\n      }\n    } catch (error: any) {\n      console.error(\"Test email error:\", error);\n      res.status(500).json({ message: \"Error sending test email: \" + error.message });\n    }\n  });\n\n  // Delete ramen order (admin)\n  app.delete(\"/api/ramen-orders/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      const success = await storage.deleteRamenOrder(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json({ message: \"Ramen order deleted successfully\", id });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting order: \" + error.message });\n    }\n  });\n\n  // Siroop orders management (admin)\n  app.get(\"/api/orders\", requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching orders: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/orders/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      if (isNaN(id) || !status) {\n        return res.status(400).json({ message: \"Invalid order ID or status\" });\n      }\n\n      const order = await storage.updateOrderStatus(id, status);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json(order);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating order status: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/orders/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      const success = await storage.deleteOrder(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json({ message: \"Order deleted successfully\", id });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting order: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/orders/:id/send-confirmation\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid order ID\" });\n      }\n\n      const orders = await storage.getOrders();\n      const order = orders.find(o => o.id === id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const products = await storage.getProducts();\n      const product = products.find(p => p.id === order.productId);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      try {\n        // Send confirmation email to customer\n        await sendOrderNotification({\n          customerName: order.customerName,\n          customerEmail: order.customerEmail,\n          customerPhone: order.customerPhone,\n          productName: product.name,\n          quantity: order.quantity,\n          totalAmount: order.totalAmount,\n          notes: order.notes,\n          deliveryMethod: order.deliveryMethod,\n          streetAddress: order.streetAddress,\n          city: order.city,\n          postalCode: order.postalCode,\n          country: order.country\n        });\n        \n        res.json({ \n          message: `Bevestigingsmail verzonden naar ${order.customerEmail}`,\n          email: order.customerEmail,\n          product: product.name\n        });\n      } catch (emailError) {\n        console.error(\"Failed to send order confirmation email:\", emailError);\n        res.status(500).json({ message: \"Failed to send confirmation email\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error sending confirmation: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27752},"backup/syrup-website/server/storage.ts":{"content":"import { \n  Product, \n  InsertProduct, \n  Order, \n  InsertOrder, \n  RamenOrder, \n  InsertRamenOrder,\n  ContactMessage,\n  InsertContactMessage \n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: number): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProductStock(id: number, stock: number): Promise<Product | undefined>;\n  updateProduct(id: number, updates: Partial<Product>): Promise<Product | undefined>;\n  deleteProduct(id: number): Promise<boolean>;\n  \n  // Orders\n  getOrders(): Promise<Order[]>;\n  getOrder(id: number): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: number, status: string): Promise<Order | undefined>;\n  \n  // Ramen Orders\n  getRamenOrders(): Promise<RamenOrder[]>;\n  createRamenOrder(ramenOrder: InsertRamenOrder): Promise<RamenOrder>;\n  getRamenOrdersByDate(date: Date): Promise<RamenOrder[]>;\n  updateRamenOrderStatus(id: number, status: string): Promise<RamenOrder | undefined>;\n  deleteRamenOrder(id: number): Promise<boolean>;\n  confirmRamenOrdersForDate(date: Date): Promise<RamenOrder[]>;\n  \n  // Contact Messages\n  getContactMessages(): Promise<ContactMessage[]>;\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  \n  // Admin Authentication\n  getAdminByUsername(username: string): Promise<{ id: number; username: string; password: string; role: string } | undefined>;\n  createAdminUser(username: string, hashedPassword: string): Promise<{ id: number; username: string; role: string }>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<number, Product>;\n  private orders: Map<number, Order>;\n  private ramenOrders: Map<number, RamenOrder>;\n  private contactMessages: Map<number, ContactMessage>;\n  private adminUsers: Map<string, { id: number; username: string; password: string; role: string }>;\n  private currentProductId: number;\n  private currentOrderId: number;\n  private currentRamenOrderId: number;\n  private currentMessageId: number;\n  private currentAdminId: number;\n\n  constructor() {\n    this.products = new Map();\n    this.orders = new Map();\n    this.ramenOrders = new Map();\n    this.contactMessages = new Map();\n    this.adminUsers = new Map();\n    this.currentProductId = 1;\n    this.currentOrderId = 1;\n    this.currentRamenOrderId = 1;\n    this.currentMessageId = 1;\n    this.currentAdminId = 1;\n    \n    this.initializeProducts();\n    this.initializeAdminUser();\n    this.initializeRamenOrders();\n  }\n\n  private initializeRamenOrders() {\n    // Start with clean slate - no sample orders\n    this.ramenOrders.clear();\n    this.currentRamenOrderId = 1;\n    console.log(\"STORAGE: Initialized clean ramen orders, total:\", this.ramenOrders.size);\n  }\n\n  private initializeProducts() {\n    const elderflowerSyrup: Product = {\n      id: this.currentProductId++,\n      name: \"Vlierbloesem Siroop\",\n      description: \"Handgeplukt bij de Hamburgervijver. 30 verse schermen per liter voor die authentieke zomersmaak. Perfect voor limonade of cocktails.\",\n      price: \"6.99\",\n      stock: 8,\n      maxStock: 15,\n      category: \"syrup\",\n      imageUrl: \"/images/normaal_voorkant.png\",\n      featured: true,\n      limitedStock: false,\n      badges: [\"Huistuin delicatesse\"],\n      createdAt: new Date(),\n    };\n\n    const roseSyrup: Product = {\n      id: this.currentProductId++,\n      name: \"Rozen Siroop\",\n      description: \"Delicate rozenblaadjes uit onze eigen tuin aan de Star Numanstraat. Een subtiele bloemensmaak die perfect past bij thee of prosecco.\",\n      price: \"6.99\",\n      stock: 5,\n      maxStock: 15,\n      category: \"syrup\",\n      imageUrl: \"/images/rozen_voorkant.png\",\n      featured: true,\n      limitedStock: false,\n      badges: [\"Seizoenspecialiteit\"],\n      createdAt: new Date(),\n    };\n\n    const ramenSet: Product = {\n      id: this.currentProductId++,\n      name: \"Chicken Shoyu Ramen\",\n      description: \"Exclusieve Chicken Shoyu Ramen voor 6 personen. Verse lokale ingrediënten, zelfgemaakte noedels en inclusief toppings. €12.50 per persoon.\",\n      price: \"12.50\",\n      stock: 6,\n      maxStock: 6,\n      category: \"ramen\",\n      imageUrl: \"/images/chicken-shoyu-ramen.jpg\",\n      featured: true,\n      limitedStock: false,\n      badges: [\"Premium\"],\n      createdAt: new Date(),\n    };\n\n    this.products.set(elderflowerSyrup.id, elderflowerSyrup);\n    this.products.set(roseSyrup.id, roseSyrup);\n    this.products.set(ramenSet.id, ramenSet);\n  }\n\n  private initializeAdminUser() {\n    // Create default admin user with secure password\n    const defaultAdmin = {\n      id: this.currentAdminId++,\n      username: \"admin\",\n      password: \"PlukPoot2025!Secure#Admin\", // Strong password for production\n      role: \"admin\"\n    };\n    this.adminUsers.set(defaultAdmin.username, defaultAdmin);\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = this.currentProductId++;\n    const product: Product = { \n      ...insertProduct, \n      id, \n      createdAt: new Date()\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProductStock(id: number, stock: number): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (product) {\n      const updatedProduct = { ...product, stock };\n      this.products.set(id, updatedProduct);\n      return updatedProduct;\n    }\n    return undefined;\n  }\n\n  async updateProduct(id: number, updates: Partial<Product>): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (product) {\n      // Ensure required fields are present\n      const updatedProduct = { \n        ...product, \n        ...updates,\n        stock: updates.stock ?? product.stock,\n        maxStock: updates.maxStock ?? product.maxStock,\n        badges: updates.badges ?? product.badges ?? []\n      };\n      this.products.set(id, updatedProduct);\n      return updatedProduct;\n    }\n    return undefined;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  async getOrder(id: number): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = this.currentOrderId++;\n    const order: Order = { \n      ...insertOrder, \n      id, \n      createdAt: new Date()\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async updateOrderStatus(id: number, status: string): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (order) {\n      const updatedOrder = { ...order, status };\n      this.orders.set(id, updatedOrder);\n      return updatedOrder;\n    }\n    return undefined;\n  }\n\n  async deleteOrder(id: number): Promise<boolean> {\n    return this.orders.delete(id);\n  }\n\n  // Ramen Orders\n  async getRamenOrders(): Promise<RamenOrder[]> {\n    const orders = Array.from(this.ramenOrders.values());\n    console.log(\"Storage: ramenOrders Map size:\", this.ramenOrders.size);\n    console.log(\"Storage: getRamenOrders returning\", orders.length, \"orders\");\n    console.log(\"Storage: First few orders:\", orders.slice(0, 2));\n    console.log(\"Storage: All ramen order IDs:\", Array.from(this.ramenOrders.keys()));\n    return orders;\n  }\n\n  async createRamenOrder(insertRamenOrder: InsertRamenOrder): Promise<RamenOrder> {\n    const id = this.currentRamenOrderId++;\n    const ramenOrder: RamenOrder = { \n      ...insertRamenOrder, \n      id, \n      customerPhone: insertRamenOrder.customerPhone || null,\n      status: insertRamenOrder.status || \"pending\",\n      notes: insertRamenOrder.notes || null,\n      servings: insertRamenOrder.servings || 1,\n      createdAt: new Date()\n    };\n    this.ramenOrders.set(id, ramenOrder);\n    \n    // Check if we have 6 people for this date and auto-confirm\n    const ordersForDate = await this.getRamenOrdersByDate(new Date(ramenOrder.preferredDate));\n    if (ordersForDate.length >= 6) {\n      await this.confirmRamenOrdersForDate(new Date(ramenOrder.preferredDate));\n    }\n    \n    return ramenOrder;\n  }\n\n  async updateRamenOrderStatus(id: number, status: string): Promise<RamenOrder | undefined> {\n    const order = this.ramenOrders.get(id);\n    if (order) {\n      const updatedOrder = { ...order, status };\n      this.ramenOrders.set(id, updatedOrder);\n      \n      // If order is confirmed, check if we should send emails\n      if (status === 'confirmed') {\n        const ordersForDate = await this.getRamenOrdersByDate(new Date(order.preferredDate));\n        const confirmedOrdersForDate = ordersForDate.filter(o => o.status === 'confirmed');\n        \n        if (confirmedOrdersForDate.length >= 6) {\n          console.log(`6+ confirmed orders for ${order.preferredDate}, ready to send emails`);\n        }\n      }\n      \n      return updatedOrder;\n    }\n    return undefined;\n  }\n\n  async confirmRamenOrdersForDate(date: Date): Promise<RamenOrder[]> {\n    const ordersForDate = await this.getRamenOrdersByDate(date);\n    const confirmedOrders: RamenOrder[] = [];\n    \n    for (const order of ordersForDate) {\n      if (order.status === \"pending\") {\n        const confirmedOrder = await this.updateRamenOrderStatus(order.id, \"confirmed\");\n        if (confirmedOrder) {\n          confirmedOrders.push(confirmedOrder);\n        }\n      }\n    }\n    \n    return confirmedOrders;\n  }\n\n  async deleteRamenOrder(id: number): Promise<boolean> {\n    return this.ramenOrders.delete(id);\n  }\n\n  async getRamenOrdersByDate(date: Date): Promise<RamenOrder[]> {\n    return Array.from(this.ramenOrders.values()).filter(order => {\n      const orderDate = new Date(order.preferredDate);\n      return orderDate.toDateString() === date.toDateString();\n    });\n  }\n\n  // Contact Messages\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values());\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = this.currentMessageId++;\n    const message: ContactMessage = { \n      ...insertMessage, \n      id, \n      status: \"new\",\n      createdAt: new Date()\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  // Admin Authentication\n  async getAdminByUsername(username: string): Promise<{ id: number; username: string; password: string; role: string } | undefined> {\n    return this.adminUsers.get(username);\n  }\n\n  async createAdminUser(username: string, hashedPassword: string): Promise<{ id: number; username: string; role: string }> {\n    const admin = {\n      id: this.currentAdminId++,\n      username,\n      password: hashedPassword,\n      role: \"admin\"\n    };\n    this.adminUsers.set(username, admin);\n    return { id: admin.id, username: admin.username, role: admin.role };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11181},"backup/syrup-website/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"backup/syrup-website/shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, varchar, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  maxStock: integer(\"max_stock\").notNull().default(20),\n  category: text(\"category\").notNull(), // \"syrup\" | \"ramen\"\n  imageUrl: text(\"image_url\"),\n  featured: boolean(\"featured\").default(false),\n  limitedStock: boolean(\"limited_stock\").default(false),\n  badges: text(\"badges\").array().default([]), // [\"Seizoenspecialiteit\", \"Huistuin delicatesse\", \"Premium\"]\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  productId: integer(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  orderType: text(\"order_type\").notNull(), // \"syrup\" | \"ramen\"\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\"\n  notes: text(\"notes\"),\n  // Delivery address fields\n  streetAddress: text(\"street_address\"),\n  city: text(\"city\"),\n  postalCode: text(\"postal_code\"),\n  country: text(\"country\").default(\"Nederland\"),\n  deliveryMethod: text(\"delivery_method\").notNull().default(\"pickup\"), // \"pickup\" | \"delivery\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const ramenOrders = pgTable(\"ramen_orders\", {\n  id: serial(\"id\").primaryKey(),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  preferredDate: timestamp(\"preferred_date\").notNull(),\n  servings: integer(\"servings\").notNull().default(1), // Per person booking\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\" | \"confirmed\" | \"cancelled\"\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"new\"), // \"new\" | \"read\" | \"replied\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin users table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  password: text(\"password\").notNull(), // Will store hashed password\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Session storage table for admin sessions\nexport const adminSessions = pgTable(\n  \"admin_sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_admin_session_expire\").on(table.expire)],\n);\n\n// Insert schemas\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRamenOrderSchema = createInsertSchema(ramenOrders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\n// Types\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type RamenOrder = typeof ramenOrders.$inferSelect;\nexport type InsertRamenOrder = z.infer<typeof insertRamenOrderSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n","size_bytes":4657},"client/src/components/cart.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ShoppingCart, X, Plus, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { formatPrice } from \"@/lib/utils\";\nimport type { Product } from \"@shared/schema\";\n\ninterface CartItem {\n  product: Product;\n  quantity: number;\n}\n\ninterface CartProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\n// Simple cart state management (in a real app, you'd use Context or a state management library)\nlet cartItems: CartItem[] = [];\nlet cartListeners: (() => void)[] = [];\n\nexport const cart = {\n  getItems: () => cartItems,\n  addItem: (product: Product) => {\n    const existingItem = cartItems.find(item => item.product.id === product.id);\n    if (existingItem) {\n      // Maximum 1 per person - don't increase if already in cart\n      return;\n    }\n    cartItems.push({ product, quantity: 1 });\n    cartListeners.forEach(listener => listener());\n  },\n  removeItem: (productId: number) => {\n    cartItems = cartItems.filter(item => item.product.id !== productId);\n    cartListeners.forEach(listener => listener());\n  },\n  updateQuantity: (productId: number, quantity: number) => {\n    // For kombucha products, max quantity is 1\n    if (quantity > 1) quantity = 1;\n    if (quantity <= 0) {\n      cart.removeItem(productId);\n      return;\n    }\n    const item = cartItems.find(item => item.product.id === productId);\n    if (item) {\n      item.quantity = quantity;\n      cartListeners.forEach(listener => listener());\n    }\n  },\n  clear: () => {\n    cartItems = [];\n    cartListeners.forEach(listener => listener());\n  },\n  subscribe: (listener: () => void) => {\n    cartListeners.push(listener);\n    return () => {\n      cartListeners = cartListeners.filter(l => l !== listener);\n    };\n  },\n  getTotalPrice: () => {\n    return cartItems.reduce((total, item) => total + (parseFloat(item.product.price) * item.quantity), 0);\n  },\n  getItemCount: () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  }\n};\n\nexport function useCart() {\n  const [, forceUpdate] = useState({});\n  \n  useEffect(() => {\n    const unsubscribe = cart.subscribe(() => {\n      forceUpdate({});\n    });\n    return unsubscribe;\n  }, []);\n\n  return {\n    items: cart.getItems(),\n    addItem: cart.addItem,\n    removeItem: cart.removeItem,\n    updateQuantity: cart.updateQuantity,\n    clear: cart.clear,\n    totalPrice: cart.getTotalPrice(),\n    itemCount: cart.getItemCount()\n  };\n}\n\nexport function Cart({ isOpen, onClose }: CartProps) {\n  const { items, removeItem, updateQuantity, totalPrice, clear } = useCart();\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md max-h-[80vh] overflow-hidden\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"w-5 h-5\" />\n            Winkelwagen\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"flex flex-col h-full\">\n          {items.length === 0 ? (\n            <div className=\"flex-1 flex items-center justify-center text-center py-8\">\n              <div>\n                <ShoppingCart className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">Je winkelwagen is leeg</p>\n                <p className=\"text-sm text-gray-400 mt-2\">Voeg producten toe om te beginnen</p>\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex-1 overflow-y-auto space-y-4\">\n                {items.map((item) => (\n                  <div key={item.product.id} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                    <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                      {item.product.imageUrl ? (\n                        <img\n                          src={item.product.imageUrl}\n                          alt={item.product.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                        {item.product.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {formatPrice(item.product.price)}\n                      </p>\n                      <Badge variant=\"secondary\" className=\"mt-1\">\n                        Max 1 per persoon\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.product.id, item.quantity - 1)}\n                        disabled={item.quantity <= 1}\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span className=\"w-8 text-center font-medium\">{item.quantity}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.product.id, item.quantity + 1)}\n                        disabled={item.quantity >= 1} // Max 1 per person\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.product.id)}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <Separator className=\"my-4\" />\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center text-lg font-semibold\">\n                  <span>Totaal:</span>\n                  <span>{formatPrice(totalPrice.toFixed(2))}</span>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" onClick={clear} className=\"flex-1\">\n                    Leegmaken\n                  </Button>\n                  <Button className=\"flex-1\" onClick={onClose}>\n                    Afrekenen\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport function CartButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { itemCount } = useCart();\n\n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        onClick={() => setIsOpen(true)}\n        className=\"relative\"\n      >\n        <ShoppingCart className=\"w-4 h-4\" />\n        {itemCount > 0 && (\n          <Badge \n            variant=\"destructive\" \n            className=\"absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n          >\n            {itemCount}\n          </Badge>\n        )}\n      </Button>\n      <Cart isOpen={isOpen} onClose={() => setIsOpen(false)} />\n    </>\n  );\n}","size_bytes":8019},"client/src/components/contact-section.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, Phone, Mail, Clock, Send, Instagram } from \"lucide-react\";\n\nconst contactSchema = z.object({\n  firstName: z.string().min(1, \"Voornaam is verplicht\"),\n  lastName: z.string().min(1, \"Achternaam is verplicht\"),\n  email: z.string().email(\"Ongeldig email adres\"),\n  subject: z.string().min(1, \"Selecteer een onderwerp\"),\n  message: z.string().min(10, \"Bericht moet minimaal 10 karakters bevatten\"),\n});\n\ntype ContactForm = z.infer<typeof contactSchema>;\n\nexport function ContactSection() {\n  const { toast } = useToast();\n\n  const form = useForm<ContactForm>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactForm) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bericht verzonden!\",\n        description: \"We nemen zo snel mogelijk contact met je op.\",\n      });\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactForm) => {\n    contactMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Contact & Locatie\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400\">\n            Vragen over onze producten? Neem contact op of kom langs in Groningen.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-12\">\n          {/* Contact Info */}\n          <div className=\"lg:col-span-1 space-y-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  Digimaatwerk Siroperij\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <MapPin className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Adres</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        Star Numanstraat<br/>9717JE Groningen\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Phone className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Telefoon</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">+31 6 12345678</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Mail className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Email</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">info@digimaatwerk-kombucha.nl</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Clock className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Openingstijden</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        Ma-Vr: 09:00-17:00<br/>Op afspraak\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Social Links */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Volg ons</h4>\n                <div className=\"flex space-x-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-600 border-0 text-white hover:from-purple-600 hover:to-purple-700\"\n                    onClick={() => window.open('https://www.instagram.com/pluk_en_poot/', '_blank')}\n                  >\n                    <Instagram className=\"w-4 h-4\" />\n                  </Button>\n\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardContent className=\"p-8\">\n                <h3 className=\"font-display text-2xl font-semibold text-gray-900 dark:text-white mb-6\">\n                  Stuur ons een bericht\n                </h3>\n                \n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"firstName\">Voornaam</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...form.register(\"firstName\")}\n                        className=\"mt-1\"\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Achternaam</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...form.register(\"lastName\")}\n                        className=\"mt-1\"\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...form.register(\"email\")}\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {form.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"subject\">Onderwerp</Label>\n                    <Select onValueChange={(value) => form.setValue(\"subject\", value)}>\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue placeholder=\"Kies een onderwerp\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"algemeen\">Algemene vraag</SelectItem>\n                        <SelectItem value=\"product\">Product informatie</SelectItem>\n                        <SelectItem value=\"workshop\">Workshop bestelling</SelectItem>\n                        <SelectItem value=\"bulk\">Bulk bestelling</SelectItem>\n                        <SelectItem value=\"samenwerking\">Samenwerking</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {form.formState.errors.subject && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {form.formState.errors.subject.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"message\">Bericht</Label>\n                    <Textarea\n                      id=\"message\"\n                      {...form.register(\"message\")}\n                      placeholder=\"Vertel ons over je vraag of opmerking...\"\n                      className=\"mt-1\"\n                      rows={5}\n                    />\n                    {form.formState.errors.message && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {form.formState.errors.message.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    disabled={contactMutation.isPending}\n                    className=\"w-full bg-gradient-to-r from-purple-600 to-purple-700 text-white py-4 rounded-xl font-semibold hover:from-purple-700 hover:to-purple-800 transition-all duration-300 transform hover:scale-105 shadow-lg\"\n                  >\n                    <Send className=\"mr-2 w-4 h-4\" />\n                    {contactMutation.isPending ? \"Bezig...\" : \"Verzend Bericht\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n            \n\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10274},"client/src/components/footer.tsx":{"content":"import { Leaf, Instagram, Mail, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Footer() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <footer className=\"bg-gray-900 dark:bg-gray-950 text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <button \n              onClick={() => window.location.href = \"/\"}\n              className=\"flex items-center space-x-3 mb-6 hover:opacity-80 transition-opacity\"\n            >\n              <img \n                src=\"/images/logo.png\" \n                alt=\"Noordergloed Logo\" \n                className=\"w-12 h-12 rounded-full object-cover\"\n              />\n              <span className=\"font-display font-bold text-2xl\">Brouwerij Noordergloed</span>\n            </button>\n            \n            <p className=\"text-gray-400 mb-6 max-w-md leading-relaxed\">\n              Handgemaakte ambachtelijke kombucha uit het hart van Groningen. \n              Met liefde bereid door Elfie en mij, van lokale ingrediënten naar jouw glas.\n            </p>\n            \n            <div className=\"flex space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-10 h-10 bg-gray-800 rounded-full hover:bg-purple-600 transition-colors\"\n                onClick={() => window.open('https://www.instagram.com/pluk_en_poot/', '_blank')}\n              >\n                <Instagram className=\"w-4 h-4\" />\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-10 h-10 bg-gray-800 rounded-full hover:bg-purple-600 transition-colors\"\n              >\n                <Mail className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Producten</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"producten\")}\n                  className=\"hover:text-yellow-400 transition-colors\"\n                >\n                  Vlierbloesem Kombucha\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"producten\")}\n                  className=\"hover:text-pink-400 transition-colors\"\n                >\n                  Rozen Kombucha\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"workshop\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Ramen Pre-order\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"producten\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Seizoensspecials\n                </button>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Informatie</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"verhaal\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Over ons\n                </button>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-purple-400 transition-colors\">\n                  Bestelvoorwaarden\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-purple-400 transition-colors\">\n                  Privacy\n                </a>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"contact\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Contact\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-gray-400 text-sm\">\n            © 2025 Brouwerij Noordergloed onderdeel van Digimaatwerk. Handgemaakt in Groningen, nabij de iconische Hamburgervijver.\n          </p>\n          <p className=\"text-gray-500 text-xs mt-4 md:mt-0 flex items-center\">\n            <Heart className=\"w-3 h-3 mr-1\" />\n            Met trots gemaakt door Team Digimaatwerk\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4989},"client/src/components/header.tsx":{"content":"import { useTheme } from \"./theme-provider\";\nimport { Moon, Sun, Menu, Leaf, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { CartButton } from \"./shopping-cart\";\n\nexport function Header() {\n  const { theme, toggleTheme } = useTheme();\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return localStorage.getItem('adminToken') !== null;\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('adminToken');\n    window.location.href = '/';\n  };\n\n  const scrollToSection = (sectionId: string) => {\n    // If not on home page, navigate to home first\n    if (window.location.pathname !== \"/\") {\n      window.location.href = `/#${sectionId}`;\n      return;\n    }\n    \n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 backdrop-blur-lg bg-background/95 border-b border-border\">\n      <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <button \n            onClick={() => window.location.href = \"/\"}\n            className=\"flex items-center space-x-3 hover:opacity-80 transition-opacity\"\n          >\n            <img \n              src=\"/images/logo.png\" \n              alt=\"Pluk & Poot Logo\" \n              className=\"w-10 h-10 rounded-full object-cover\"\n            />\n            <span className=\"font-display font-semibold text-xl brewery-text-gradient\">\n              Brouwerij Noordergloed\n            </span>\n          </button>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <button\n              onClick={() => window.location.href = \"/\"}\n              className=\"text-foreground hover:text-primary transition-colors font-medium\"\n            >\n              Home\n            </button>\n            <button\n              onClick={() => window.location.href = \"/webshop\"}\n              className=\"text-foreground hover:text-primary transition-colors font-medium\"\n            >\n              Webshop\n            </button>\n            <button\n              onClick={() => window.location.href = \"/workshops\"}\n              className=\"text-foreground hover:text-primary transition-colors font-medium\"\n            >\n              Workshops\n            </button>\n            <button\n              onClick={() => scrollToSection(\"verhaal\")}\n              className=\"text-foreground hover:text-primary transition-colors font-medium\"\n            >\n              Over ons\n            </button>\n            <button\n              onClick={() => window.location.href = \"/contact\"}\n              className=\"text-foreground hover:text-primary transition-colors font-medium\"\n            >\n              Contact\n            </button>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <CartButton />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"rounded-lg\"\n            >\n              {theme === \"dark\" ? (\n                <Sun className=\"h-5 w-5\" />\n              ) : (\n                <Moon className=\"h-5 w-5\" />\n              )}\n            </Button>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n}\n","size_bytes":3493},"client/src/components/hero-section.tsx":{"content":"import { ChevronDown, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function HeroSection() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-fixed\"\n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')\"\n        }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-br from-black/60 via-black/40 to-transparent\" />\n      \n      <div className=\"relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-4xl mx-auto\">\n        <div className=\"animate-fade-in\">\n          <h1 className=\"font-display text-5xl sm:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight\">\n            Artisanale Kombucha\n            <span className=\"block text-green-300\">uit Groningen</span>\n          </h1>\n          \n          <div className=\"inline-flex items-center bg-gradient-to-r from-green-500/20 to-blue-500/20 backdrop-blur-sm rounded-full px-6 py-3 mb-8 border border-white/20\">\n            <Heart className=\"text-green-300 mr-2 w-5 h-5\" />\n            <span className=\"text-white font-medium\">Probiotisch & gezond</span>\n          </div>\n          \n          <p className=\"text-xl text-gray-200 mb-8 max-w-2xl mx-auto leading-relaxed\">\n            Van verse gember tot bosbessen uit de Groningse natuur. \n            Elke fles vol probiotica voor je welzijn en gezondheid.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button\n              onClick={() => scrollToSection(\"producten\")}\n              className=\"bg-gradient-to-r from-green-600 to-green-700 text-white px-8 py-4 rounded-xl font-semibold hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105 shadow-lg\"\n            >\n              Bekijk Producten\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => scrollToSection(\"verhaal\")}\n              className=\"border-2 border-white text-white px-8 py-4 rounded-xl font-semibold hover:bg-white hover:text-gray-900 transition-all duration-300\"\n            >\n              Ons Verhaal\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Scroll indicator */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce\">\n        <ChevronDown className=\"text-white text-2xl\" />\n      </div>\n    </section>\n  );\n}\n","size_bytes":2837},"client/src/components/product-card.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StockIndicator } from \"./stock-indicator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product } from \"@shared/schema\";\n\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport function ProductCard({ product }: ProductCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const orderMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/orders/kombucha\", {\n        customerName: \"Demo Customer\",\n        customerEmail: \"demo@example.com\",\n        customerPhone: \"06-12345678\",\n        productId: product.id,\n        quantity: 1,\n        totalAmount: product.price,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bestelling geplaatst!\",\n        description: `${product.name} is toegevoegd aan je bestelling.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const isElderflower = product.name.includes(\"Vlierbloesem\");\n  const isRose = product.name.includes(\"Rozen\");\n  \n  const gradientClass = isElderflower \n    ? \"from-yellow-50 to-yellow-100 dark:from-gray-700 dark:to-gray-600\"\n    : isRose \n    ? \"from-pink-50 to-pink-100 dark:from-gray-700 dark:to-gray-600\"\n    : \"from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600\";\n    \n  const badgeClass = isElderflower\n    ? \"bg-yellow-200 dark:bg-yellow-600 text-yellow-800 dark:text-yellow-100\"\n    : isRose\n    ? \"bg-pink-200 dark:bg-pink-600 text-pink-800 dark:text-pink-100\"\n    : \"bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-100\";\n    \n  const priceClass = isElderflower\n    ? \"text-yellow-600 dark:text-yellow-400\"\n    : isRose\n    ? \"text-pink-600 dark:text-pink-400\"\n    : \"text-purple-600 dark:text-purple-400\";\n    \n  const buttonClass = isElderflower\n    ? \"bg-yellow-600 hover:bg-yellow-700\"\n    : isRose\n    ? \"bg-pink-600 hover:bg-pink-700\"\n    : \"bg-purple-600 hover:bg-purple-700\";\n\n  return (\n    <div className=\"group h-full\">\n      <div className={`bg-gradient-to-br ${gradientClass} rounded-2xl p-8 transition-all duration-500 hover:shadow-2xl hover:scale-105 h-full flex flex-col`}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n          <div className=\"order-2 md:order-1\">\n            <Badge className={`${badgeClass} mb-4`}>\n              {isElderflower ? \"Seizoensspecialiteit\" : isRose ? \"Huistuin Delicatesse\" : \"Premium\"}\n            </Badge>\n            \n            <h3 className=\"font-display text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n              {product.name}\n            </h3>\n            \n            <p className=\"text-gray-600 dark:text-gray-300 mb-6 leading-relaxed\">\n              {product.description}\n            </p>\n            \n            <div className=\"space-y-4\">\n              <StockIndicator \n                current={product.stock} \n                max={product.maxStock}\n                productName={product.name}\n              />\n\n              <div className=\"flex items-center justify-between\">\n                <span className={`font-display text-3xl font-bold ${priceClass}`}>\n                  €{product.price}\n                </span>\n                <Button\n                  onClick={() => {\n                    if (product.category === \"workshop\") {\n                      // Voor workshop: scroll naar booking sectie\n                      const workshopSection = document.getElementById('workshop');\n                      if (workshopSection) {\n                        workshopSection.scrollIntoView({ behavior: 'smooth' });\n                      }\n                    } else {\n                      // Voor kombuchaproducten: ga naar detail pagina\n                      const slug = product.name === \"Vlierbloesem Kombucha\" ? \"vlierbloesem-kombucha\" \n                        : product.name === \"Rozen Kombucha\" ? \"rozen-kombucha\"\n                        : product.id.toString();\n                      window.location.href = `/producten/${slug}`;\n                    }\n                  }}\n                  disabled={product.stock === 0}\n                  className={`${buttonClass} text-white px-6 py-3 rounded-xl font-semibold transition-colors transform hover:scale-105`}\n                >\n                  {product.stock === 0 ? \"Uitverkocht\" : product.category === \"workshop\" ? \"Boek Nu\" : \"Bekijk Product\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"order-1 md:order-2\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <img \n                src={isElderflower ? \"/images/normaal_voorkant.png\" : isRose ? \"/images/rozen_voorkant.png\" : \"/images/voorkant-kombucha.png\"} \n                alt={`${product.name} voorkant`} \n                className=\"w-full h-auto rounded-xl shadow-lg transform group-hover:scale-105 transition-transform duration-500\" \n              />\n              <img \n                src={isElderflower ? \"/images/normaal_achterkant.png\" : isRose ? \"/images/rozen_achterkant.png\" : \"/images/achterkant-kombucha.png\"} \n                alt={`${product.name} achterkant`} \n                className=\"w-full h-auto rounded-xl shadow-lg transform group-hover:scale-105 transition-transform duration-500\" \n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5758},"client/src/components/product-showcase.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ProductCard } from \"./product-card\";\nimport type { Product } from \"@shared/schema\";\n\nexport function ProductShowcase() {\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const kombuchaProducts = products?.filter(p => p.category === \"kombucha\") || [];\n\n  if (isLoading) {\n    return (\n      <section id=\"producten\" className=\"py-20 bg-white dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <div className=\"h-12 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mx-auto mb-4\" />\n            <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mx-auto\" />\n          </div>\n          <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16\">\n            {[1, 2].map(i => (\n              <div key={i} className=\"bg-gray-200 dark:bg-gray-700 rounded-2xl h-96 animate-pulse\" />\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"producten\" className=\"py-20 bg-white dark:bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Onze Collectie\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n            Elk product wordt met zorg bereid met ingrediënten uit en rond Groningen. \n            Beperkte voorraad, op aanvraag of gewoon zomaar.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16 items-stretch\">\n          {kombuchaProducts.map(product => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n        </div>\n\n\n      </div>\n    </section>\n  );\n}\n","size_bytes":1912},"client/src/components/shopping-cart.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ShoppingCart as ShoppingCartIcon, X, Plus, Minus, Trash2, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatPrice } from \"@/lib/utils\";\nimport type { Product } from \"@shared/schema\";\n\ninterface CartItem {\n  product: Product;\n  quantity: number;\n}\n\nexport const cartService = {\n  items: [] as CartItem[],\n  listeners: [] as (() => void)[],\n\n  addItem: (product: Product) => {\n    console.log(\"CART DEBUG: Adding product:\", product);\n    console.log(\"CART DEBUG: Current cart items:\", cartService.items.length);\n    \n    if (!product) {\n      console.error(\"CART ERROR: Product is null/undefined\");\n      return false;\n    }\n    \n    if (!product.id) {\n      console.error(\"CART ERROR: Product missing ID:\", product);\n      return false;\n    }\n    \n    const existingItem = cartService.items.find(item => item.product?.id === product.id);\n    if (existingItem) {\n      console.log(\"CART DEBUG: Product already in cart, increasing quantity\");\n      existingItem.quantity += 1;\n      cartService.notifyListeners();\n      return true;\n    }\n    \n    cartService.items.push({ product, quantity: 1 });\n    console.log(\"CART DEBUG: Added new item, cart now has:\", cartService.items.length, \"items\");\n    cartService.notifyListeners();\n    return true;\n  },\n\n  removeItem: (productId: number) => {\n    cartService.items = cartService.items.filter(item => item.product.id !== productId);\n    cartService.notifyListeners();\n  },\n\n  updateQuantity: (productId: number, quantity: number) => {\n    if (quantity <= 0) {\n      cartService.removeItem(productId);\n      return;\n    }\n    const item = cartService.items.find(item => item.product.id === productId);\n    if (item && quantity <= 1) { // Max 1 per product\n      item.quantity = quantity;\n      cartService.notifyListeners();\n    }\n  },\n\n  clear: () => {\n    cartService.items = [];\n    cartService.notifyListeners();\n  },\n\n  getTotalPrice: () => {\n    return cartService.items.reduce((total, item) => {\n      return total + (parseFloat(item.product.price) * item.quantity);\n    }, 0);\n  },\n\n  getItemCount: () => {\n    return cartService.items.reduce((total, item) => total + item.quantity, 0);\n  },\n\n  subscribe: (listener: () => void) => {\n    cartService.listeners.push(listener);\n    return () => {\n      cartService.listeners = cartService.listeners.filter(l => l !== listener);\n    };\n  },\n\n  notifyListeners: () => {\n    cartService.listeners.forEach(listener => listener());\n  }\n};\n\nexport function useShoppingCart() {\n  const [, forceUpdate] = useState(0);\n\n  useEffect(() => {\n    const unsubscribe = cartService.subscribe(() => {\n      forceUpdate(prev => prev + 1);\n    });\n    return unsubscribe;\n  }, []);\n\n  return {\n    items: cartService.items,\n    addItem: cartService.addItem,\n    removeItem: cartService.removeItem,\n    updateQuantity: cartService.updateQuantity,\n    clear: cartService.clear,\n    totalPrice: cartService.getTotalPrice(),\n    itemCount: cartService.getItemCount()\n  };\n}\n\nexport function ShoppingCart() {\n  const { items, removeItem, updateQuantity, totalPrice, clear } = useShoppingCart();\n  const [showCheckout, setShowCheckout] = useState(false);\n  const [customerInfo, setCustomerInfo] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    deliveryMethod: 'pickup',\n    streetAddress: '',\n    postalCode: '',\n    city: '',\n    country: 'Nederland',\n    notes: ''\n  });\n  const { toast } = useToast();\n\n  const handleCheckout = async () => {\n    if (!customerInfo.name || !customerInfo.email) {\n      toast({\n        title: \"Ontbrekende gegevens\",\n        description: \"Vul je naam en email in.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (customerInfo.deliveryMethod === 'delivery' && (!customerInfo.streetAddress || !customerInfo.postalCode || !customerInfo.city)) {\n      toast({\n        title: \"Ontbrekende adresgegevens\",\n        description: \"Vul alle adresgegevens in voor bezorging.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      for (const item of items) {\n        await apiRequest(\"POST\", \"/api/orders\", {\n          customerName: customerInfo.name,\n          customerEmail: customerInfo.email,\n          customerPhone: customerInfo.phone,\n          productId: item.product.id,\n          quantity: item.quantity,\n          totalAmount: (parseFloat(item.product.price) * item.quantity).toFixed(2),\n          orderType: \"kombucha\",\n          deliveryMethod: customerInfo.deliveryMethod,\n          streetAddress: customerInfo.streetAddress,\n          postalCode: customerInfo.postalCode,\n          city: customerInfo.city,\n          country: customerInfo.country,\n          notes: customerInfo.notes\n        });\n      }\n      \n      clear();\n      setShowCheckout(false);\n      setCustomerInfo({\n        name: '',\n        email: '',\n        phone: '',\n        deliveryMethod: 'pickup',\n        streetAddress: '',\n        postalCode: '',\n        city: '',\n        country: 'Nederland',\n        notes: ''\n      });\n      \n      toast({\n        title: \"Bestelling geplaatst!\",\n        description: \"Je bestelling is succesvol geplaatst. Je ontvangt een bevestiging per email.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Fout bij bestellen\",\n        description: \"Er ging iets mis. Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (showCheckout) {\n    const deliveryCost = customerInfo.deliveryMethod === 'delivery' ? 1.00 : 0;\n    const finalTotal = totalPrice + deliveryCost;\n\n    return (\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <CardTitle>Bestelling Afronden</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Order Summary */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Bestelling overzicht</h3>\n            {items.map((item) => (\n              <div key={item.product.id} className=\"flex justify-between items-center\">\n                <span>{item.product.name} x {item.quantity}</span>\n                <span>€{(parseFloat(item.product.price) * item.quantity).toFixed(2)}</span>\n              </div>\n            ))}\n            {customerInfo.deliveryMethod === 'delivery' && (\n              <div className=\"flex justify-between items-center text-sm\">\n                <span>Fietskosten</span>\n                <span>€{deliveryCost.toFixed(2)}</span>\n              </div>\n            )}\n            <div className=\"border-t pt-2\">\n              <div className=\"flex justify-between font-semibold\">\n                <span>Totaal:</span>\n                <span>€{finalTotal.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Customer Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Contactgegevens</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Naam *</Label>\n                <Input\n                  id=\"name\"\n                  value={customerInfo.name}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, name: e.target.value })}\n                  placeholder=\"Je volledige naam\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={customerInfo.email}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, email: e.target.value })}\n                  placeholder=\"je@email.com\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"phone\">Telefoon</Label>\n              <Input\n                id=\"phone\"\n                value={customerInfo.phone}\n                onChange={(e) => setCustomerInfo({ ...customerInfo, phone: e.target.value })}\n                placeholder=\"06-12345678\"\n              />\n            </div>\n          </div>\n\n          {/* Delivery Method */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Bezorging</h3>\n            <Select\n              value={customerInfo.deliveryMethod}\n              onValueChange={(value) => setCustomerInfo({ ...customerInfo, deliveryMethod: value })}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Kies bezorgmethode\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"pickup\">Ophalen bij mijn adres (gratis)</SelectItem>\n                <SelectItem value=\"delivery\">Bezorging (€1,00 fietskosten)</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Address fields for delivery */}\n            {customerInfo.deliveryMethod === 'delivery' && (\n              <div className=\"space-y-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\">\n                <h4 className=\"font-medium\">Bezorgadres</h4>\n                <div>\n                  <Label htmlFor=\"streetAddress\">Straat en huisnummer *</Label>\n                  <Input\n                    id=\"streetAddress\"\n                    value={customerInfo.streetAddress}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, streetAddress: e.target.value })}\n                    placeholder=\"Hoofdstraat 123\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"postalCode\">Postcode *</Label>\n                    <Input\n                      id=\"postalCode\"\n                      value={customerInfo.postalCode}\n                      onChange={(e) => setCustomerInfo({ ...customerInfo, postalCode: e.target.value })}\n                      placeholder=\"1234 AB\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"city\">Plaats *</Label>\n                    <Input\n                      id=\"city\"\n                      value={customerInfo.city}\n                      onChange={(e) => setCustomerInfo({ ...customerInfo, city: e.target.value })}\n                      placeholder=\"Groningen\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"country\">Land</Label>\n                  <Input\n                    id=\"country\"\n                    value={customerInfo.country}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, country: e.target.value })}\n                    placeholder=\"Nederland\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Opmerkingen (optioneel)</Label>\n            <Textarea\n              id=\"notes\"\n              value={customerInfo.notes}\n              onChange={(e) => setCustomerInfo({ ...customerInfo, notes: e.target.value })}\n              placeholder=\"Speciale instructies voor je bestelling...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Action buttons */}\n          <div className=\"flex gap-2 pt-4\">\n            <Button onClick={() => setShowCheckout(false)} variant=\"outline\" className=\"flex-1\">\n              Terug naar winkelwagen\n            </Button>\n            <Button onClick={handleCheckout} className=\"flex-1\">\n              Bestelling plaatsen (€{finalTotal.toFixed(2)})\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <ShoppingCartIcon className=\"h-5 w-5\" />\n          Winkelwagen ({items.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {items.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <ShoppingCartIcon className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <p className=\"text-gray-500\">Je winkelwagen is leeg</p>\n            <p className=\"text-sm text-gray-400 mt-2\">Voeg producten toe om te beginnen</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {items.filter(item => item.product && item.product.id).map((item) => (\n              <div key={`cart-item-${item.product.id}`} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                  {item.product.imageUrl ? (\n                    <img\n                      src={item.product.imageUrl}\n                      alt={item.product.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-gradient-to-br from-purple-400 to-purple-600\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-gray-900 dark:text-white\">{item.product.name}</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">€{item.product.price}</p>\n                  <Badge variant=\"secondary\" className=\"mt-1\">\n                    Aantal: {item.quantity}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => updateQuantity(item.product.id, item.quantity - 1)}\n                    disabled={item.quantity <= 1}\n                    className=\"h-8 w-8\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => updateQuantity(item.product.id, item.quantity + 1)}\n                    disabled={item.quantity >= 1} // Max 1 per product\n                    className=\"h-8 w-8\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => removeItem(item.product.id)}\n                    className=\"h-8 w-8\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n            \n            <Separator />\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center text-lg font-semibold\">\n                <span>Totaal:</span>\n                <span>{formatPrice(totalPrice.toFixed(2))}</span>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" onClick={clear} className=\"flex-1\">\n                  Leegmaken\n                </Button>\n                <Button onClick={() => setShowCheckout(true)} className=\"flex-1\">\n                  Afrekenen\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function AddToCartButton({ product }: { product: Product }) {\n  const { addItem } = useShoppingCart();\n  const { toast } = useToast();\n\n  const handleAddToCart = () => {\n    const success = addItem(product);\n    if (success) {\n      toast({\n        title: \"Toegevoegd aan winkelwagen\",\n        description: `${product.name} is toegevoegd aan je winkelwagen.`,\n      });\n    } else {\n      toast({\n        title: \"Al in winkelwagen\",\n        description: \"Dit product zit al in je winkelwagen. Maximum 1 per persoon.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Button\n      onClick={handleAddToCart}\n      disabled={product.stock === 0}\n      className=\"w-full\"\n      size=\"lg\"\n    >\n      {product.stock === 0 ? \"Uitverkocht\" : \"Toevoegen aan winkelwagen\"}\n    </Button>\n  );\n}\n\nexport function CartButton() {\n  const { items } = useShoppingCart();\n  const [isOpen, setIsOpen] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  \n  const itemCount = items.reduce((total, item) => total + item.quantity, 0);\n\n  // Check admin status from server\n  const { data: adminStatus } = useQuery({\n    queryKey: ['/api/admin/status'],\n    retry: false,\n  });\n\n  useEffect(() => {\n    setIsAdmin(adminStatus?.isAdmin || false);\n  }, [adminStatus]);\n\n  console.log('CartButton admin status:', { adminStatus, isAdmin });\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest('POST', '/api/admin/logout');\n      setIsAdmin(false);\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n  \n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        onClick={() => setIsOpen(true)}\n        className=\"relative\"\n      >\n        <ShoppingCartIcon className=\"h-5 w-5\" />\n        {itemCount > 0 && (\n          <span className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full bg-purple-600 text-white text-xs flex items-center justify-center\">\n            {itemCount}\n          </span>\n        )}\n      </Button>\n      \n      {isAdmin && (\n        <Button\n          onClick={handleLogout}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-2 text-red-600 border-red-600 hover:bg-red-50 dark:text-red-400 dark:border-red-400 dark:hover:bg-red-900/20\"\n        >\n          <LogOut className=\"w-4 h-4 mr-1\" />\n          Uitloggen\n        </Button>\n      )}\n      \n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"max-w-lg max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Winkelwagen</DialogTitle>\n          </DialogHeader>\n          <ShoppingCart />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":18728},"client/src/components/stock-indicator.tsx":{"content":"import { AlertTriangle } from \"lucide-react\";\n\ninterface StockIndicatorProps {\n  current: number;\n  max: number;\n  productName: string;\n}\n\nexport function StockIndicator({ current, max, productName }: StockIndicatorProps) {\n  const percentage = (current / max) * 100;\n  const isLowStock = current <= 5;\n  \n  const getStockColor = () => {\n    if (percentage > 50) return \"bg-green-500\";\n    if (percentage > 20) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getTextColor = () => {\n    if (productName?.includes(\"Vlierbloesem\")) return \"text-yellow-600 dark:text-yellow-400\";\n    if (productName?.includes(\"Rozen\")) return \"text-pink-600 dark:text-pink-400\";\n    return \"text-purple-600 dark:text-purple-400\";\n  };\n\n  return (\n    <div className=\"mb-6\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Voorraad</span>\n        <span className={`text-sm font-semibold ${getTextColor()}`}>\n          {current}/{max} beschikbaar\n        </span>\n      </div>\n      \n      <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n        <div \n          className={`h-2 rounded-full transition-all duration-1000 ${getStockColor()}`}\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n      \n      {isLowStock && current > 0 && (\n        <div className=\"flex items-center mt-1\">\n          <AlertTriangle className=\"w-3 h-3 text-red-600 dark:text-red-400 mr-1\" />\n          <span className=\"text-xs text-red-600 dark:text-red-400\">Beperkte voorraad</span>\n        </div>\n      )}\n      \n      {current === 0 && (\n        <div className=\"flex items-center mt-1\">\n          <AlertTriangle className=\"w-3 h-3 text-red-600 dark:text-red-400 mr-1\" />\n          <span className=\"text-xs text-red-600 dark:text-red-400\">Uitverkocht</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1908},"client/src/components/story-section.tsx":{"content":"import { MapPin, Heart, Trees, Flower } from \"lucide-react\";\n\nexport function StorySection() {\n  return (\n    <section id=\"verhaal\" className=\"py-20 bg-white dark:bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n          <div>\n            <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-8\">\n              Welkom bij Brouwerij Noordergloed\n            </h2>\n            \n            <div className=\"space-y-6 text-lg text-gray-600 dark:text-gray-400 leading-relaxed\">\n              <p>\n                Bij Brouwerij Noordergloed draait alles om verbinden, terug naar de natuur en samen genieten van pure smaken. \n                Vanuit mijn werkplek aan de Star Numanstraat in Groningen maak ik unieke kombucha, jams, siropen en nog veel meer. \n                Allemaal met ingrediënten uit de regio, met aandacht voor het seizoen en respect voor de omgeving.\n              </p>\n              \n              <p>\n                Wat je hier vindt, proef je niet in de winkel: verrassende smaken en combinaties die je meenemen naar het Groningse landschap. \n                Via kleinschalige workshops nodig ik je uit om het plezier van samen ontdekken en creëren te ervaren, \n                en zo de verbinding met natuur en elkaar te versterken.\n              </p>\n              \n              <p>\n                Dit is een plek waar mensen samenkomen, delen en zich opnieuw laten inspireren. \n                Voel je welkom om aan te sluiten bij een workshop, op ontdekkingstocht te gaan of gewoon te komen proeven van al het moois dat Brouwerij Noordergloed te bieden heeft!\n              </p>\n            </div>\n            \n            <div className=\"mt-8 grid grid-cols-2 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <Trees className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2\">100%</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Natuurlijk</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-pink-100 dark:bg-pink-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <Flower className=\"w-6 h-6 text-pink-600 dark:text-pink-400\" />\n                </div>\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2\">30+</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Schermen per liter</div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"relative rounded-2xl overflow-hidden shadow-2xl\">\n              <img \n                src=\"/images/dc_foto.jpg\" \n                alt=\"Portret met mijn honden in de tuin\" \n                className=\"w-full h-auto\" \n              />\n              \n              {/* Floating badges */}\n              <div className=\"absolute top-6 right-6 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-full px-4 py-2 shadow-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"w-4 h-4 text-purple-500\" />\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">Groningen</span>\n                </div>\n              </div>\n              \n\n            </div>\n            \n            {/* Floating elements */}\n            <div className=\"absolute -top-4 -left-4 w-20 h-20 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full animate-pulse opacity-20\" />\n            <div className=\"absolute -bottom-6 -right-6 w-16 h-16 bg-gradient-to-br from-pink-400 to-pink-600 rounded-full animate-pulse opacity-20\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4098},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    \n    // Update kombucha hue for theme\n    if (theme === \"dark\") {\n      root.style.setProperty(\"--kombucha-hue\", \"200\");\n    } else {\n      root.style.setProperty(\"--kombucha-hue\", \"260\");\n    }\n    \n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1368},"client/src/components/workshop-booking-fixed.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, Users, CheckCircle, MapPin, ExternalLink } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { WorkshopCalendar } from \"./workshop-calendar\";\n// Using a stock kombucha image from Unsplash\nconst kombuchaImage = \"https://images.unsplash.com/photo-1559181567-c3190ca9959b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\";\n\nconst workshopOrderSchema = z.object({\n  customerName: z.string().min(1, \"Naam is verplicht\"),\n  customerEmail: z.string().email(\"Ongeldig email adres\"),\n  customerPhone: z.string().min(1, \"Telefoon is verplicht\"),\n  preferredDate: z.string().min(1, \"Selecteer een datum\").refine((dateStr) => {\n    const date = new Date(dateStr);\n    return date.getDay() === 5; // 5 = Friday\n  }, \"Workshop is alleen mogelijk op zaterdag\"),\n  notes: z.string().optional(),\n});\n\ntype WorkshopOrderForm = z.infer<typeof workshopOrderSchema>;\n\nexport function WorkshopBookingFixed() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<WorkshopOrderForm>({\n    resolver: zodResolver(workshopOrderSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      preferredDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  const handleDateSelect = (date: Date) => {\n    setSelectedDate(date);\n    // Format date as YYYY-MM-DD to avoid timezone issues\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    form.setValue(\"preferredDate\", dateString);\n  };\n\n  const orderMutation = useMutation({\n    mutationFn: async (data: WorkshopOrderForm) => {\n      return apiRequest(\"POST\", \"/api/workshop-orders\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Workshop boeking geplaatst!\",\n        description: \"We nemen contact met je op voor bevestiging.\",\n      });\n      form.reset();\n      setSelectedDate(undefined);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: error.message || \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: WorkshopOrderForm) => {\n    orderMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"workshop\" className=\"py-20 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Ramen Voorbestelling\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n            Authentieke Japanse Ramen bereid met verse lokale ingrediënten. \n            Alleen op vrijdag, minimaal 6 personen voor bevestiging.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Calendar className=\"w-8 h-8 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Alleen Vrijdagen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse Ramen elke vrijdag tussen 17:00-19:00. Minimaal 4 dagen van tevoren boeken.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Users className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Minimaal 6 Personen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Avond wordt alleen bevestigd bij minimaal 6 reserveringen. Elk kom wordt met zorg bereid.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <MapPin className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Lokale Ingrediënten\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse ingrediënten uit Groningen, gecombineerd met authentieke Japanse technieken.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-2xl overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"grid lg:grid-cols-2\">\n                <div className=\"relative h-64 lg:h-auto\">\n                  <img\n                    src={kombuchaImage}\n                    alt=\"Chicken Shoyu Workshop\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                </div>\n                <div className=\"p-8 flex flex-col justify-center\">\n                  <h3 className=\"font-display text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                    Chicken Shoyu Ramen\n                  </h3>\n                  <div className=\"space-y-3 mb-6\">\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse zelfgemaakte noedels\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Krokante kip met perfecte textuur\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Rijke shoyu bouillon (24+ uur getrokken)\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse toppings: ajitsuke tamago, nori, lente-ui\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Lokale ingrediënten uit Groningen\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"text-3xl font-display font-bold text-purple-600 dark:text-purple-400\">\n                        €12,50\n                      </span>\n                      <span className=\"text-gray-500 ml-2\">per persoon</span>\n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* NIEUW: Meer Details Link - Force Cache Refresh */}\n        <div className=\"max-w-4xl mx-auto text-center my-8\" style={{ display: 'block' }}>\n          <div className=\"bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 p-8 rounded-xl shadow-lg border-2 border-purple-200\">\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n              🍜 Meer weten over ons Ramen proces?\n            </h3>\n            <p className=\"text-gray-700 dark:text-gray-200 mb-6 text-lg\">\n              Ontdek hoe we onze authentieke Chicken Shoyu Workshop bereiden, wat je precies krijgt en hoe het ophalen werkt.\n            </p>\n            <a \n              href=\"/workshop-details\" \n              className=\"inline-flex items-center px-8 py-4 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all duration-300 font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105\"\n              style={{ textDecoration: 'none' }}\n            >\n              <ExternalLink className=\"w-6 h-6 mr-3\" />\n              Bekijk alle details over bereiding en ophalen\n            </a>\n          </div>\n        </div>\n\n        <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <WorkshopCalendar \n                  onDateSelect={handleDateSelect}\n                  selectedDate={selectedDate}\n                />\n              </div>\n\n              <div>\n                <h3 className=\"font-display text-2xl font-semibold text-gray-900 dark:text-white mb-6\">\n                  Boek je plek\n                </h3>\n                \n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"customerName\">Naam</Label>\n                    <Input\n                      id=\"customerName\"\n                      {...form.register(\"customerName\")}\n                      placeholder=\"Je volledige naam\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerName && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerName.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerEmail\">Email</Label>\n                    <Input\n                      id=\"customerEmail\"\n                      type=\"email\"\n                      {...form.register(\"customerEmail\")}\n                      placeholder=\"je@email.com\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerEmail && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerEmail.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerPhone\">Telefoon</Label>\n                    <Input\n                      id=\"customerPhone\"\n                      {...form.register(\"customerPhone\")}\n                      placeholder=\"06-12345678\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerPhone && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerPhone.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"notes\">Opmerkingen (optioneel)</Label>\n                    <Textarea\n                      id=\"notes\"\n                      {...form.register(\"notes\")}\n                      placeholder=\"Allergieën, dieetwensen, etc.\"\n                      className=\"mt-1\"\n                      rows={3}\n                    />\n                  </div>\n\n                  {form.formState.errors.preferredDate && (\n                    <p className=\"text-red-500 text-sm\">\n                      {form.formState.errors.preferredDate.message}\n                    </p>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-purple-600 hover:bg-purple-700 text-white py-3 text-lg font-semibold\"\n                    disabled={orderMutation.isPending || !selectedDate}\n                  >\n                    {orderMutation.isPending ? \"Bezig...\" : \"Boek Mijn Plek - €12,50\"}\n                  </Button>\n                </form>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}","size_bytes":13386},"client/src/components/workshop-booking.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, Users, CheckCircle, MapPin, ExternalLink } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { WorkshopCalendar } from \"./workshop-calendar\";\n// Using a stock kombucha image from Unsplash\nconst kombuchaImage = \"https://images.unsplash.com/photo-1559181567-c3190ca9959b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\";\n\nconst workshopOrderSchema = z.object({\n  customerName: z.string().min(1, \"Naam is verplicht\"),\n  customerEmail: z.string().email(\"Ongeldig email adres\"),\n  customerPhone: z.string().min(1, \"Telefoon is verplicht\"),\n  preferredDate: z.string().min(1, \"Selecteer een datum\").refine((dateStr) => {\n    const date = new Date(dateStr);\n    return date.getDay() === 5; // 5 = Friday\n  }, \"Workshop is alleen mogelijk op zaterdag\"),\n  notes: z.string().optional(),\n});\n\ntype WorkshopOrderForm = z.infer<typeof workshopOrderSchema>;\n\nexport function WorkshopBooking() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<WorkshopOrderForm>({\n    resolver: zodResolver(workshopOrderSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      preferredDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  const handleDateSelect = (date: Date) => {\n    setSelectedDate(date);\n    // Format date as YYYY-MM-DD to avoid timezone issues\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    form.setValue(\"preferredDate\", dateString);\n  };\n\n  const orderMutation = useMutation({\n    mutationFn: async (data: WorkshopOrderForm) => {\n      return apiRequest(\"POST\", \"/api/workshop-orders\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Workshop boeking geplaatst!\",\n        description: \"We nemen contact met je op voor bevestiging.\",\n      });\n      form.reset();\n      setSelectedDate(undefined);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: error.message || \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: WorkshopOrderForm) => {\n    orderMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"workshop\" className=\"py-20 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Ramen Voorbestelling\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n            Authentieke Japanse workshop bereid met verse lokale ingrediënten. \n            Alleen op vrijdag, minimaal 6 personen voor bevestiging.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Calendar className=\"w-8 h-8 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Alleen Vrijdagen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse Ramen elke vrijdag tussen 17:00-19:00. Minimaal 4 dagen van tevoren boeken en een minimum van 6 reserveringen.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Users className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Minimaal 6 Personen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Avond wordt alleen bevestigd bij minimaal 6 reserveringen. Elk kom wordt met zorg bereid.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <MapPin className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Lokale Ingrediënten\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse ingrediënten uit Groningen, gecombineerd met authentieke Japanse technieken.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-2xl overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"grid lg:grid-cols-2\">\n                <div className=\"relative h-64 lg:h-auto\">\n                  <img\n                    src={kombuchaImage}\n                    alt=\"Chicken Shoyu Workshop\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                </div>\n                <div className=\"p-8 flex flex-col justify-center\">\n                  <h3 className=\"font-display text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                    Chicken Shoyu Ramen\n                  </h3>\n                  <div className=\"space-y-3 mb-6\">\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse zelfgemaakte noedels\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Krokante kip met perfecte textuur\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Rijke shoyu bouillon (24+ uur getrokken)\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse toppings: ajitsuke tamago, nori, lente-ui\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Lokale ingrediënten uit Groningen\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"text-3xl font-display font-bold text-purple-600 dark:text-purple-400\">\n                        €12,50\n                      </span>\n                      <span className=\"text-gray-500 ml-2\">per persoon</span>\n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* NIEUW: Meer Details Link - Force Cache Refresh */}\n        <div className=\"max-w-4xl mx-auto text-center my-8\" style={{ display: 'block' }}>\n          <div className=\"bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 p-8 rounded-xl shadow-lg border-2 border-purple-200\">\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n              🍜 Meer weten over ons Ramen proces?\n            </h3>\n            <p className=\"text-gray-700 dark:text-gray-200 mb-6 text-lg\">\n              Ontdek hoe we onze authentieke Chicken Shoyu Ramen bereiden, wat je precies krijgt en hoe het ophalen werkt.\n            </p>\n            <a \n              href=\"/workshop-details\" \n              className=\"inline-flex items-center px-8 py-4 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all duration-300 font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105\"\n              style={{ textDecoration: 'none' }}\n            >\n              <ExternalLink className=\"w-6 h-6 mr-3\" />\n              Bekijk alle details over bereiding en ophalen\n            </a>\n          </div>\n        </div>\n\n        <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <WorkshopCalendar \n                  onDateSelect={handleDateSelect}\n                  selectedDate={selectedDate}\n                />\n              </div>\n\n              <div>\n                <h3 className=\"font-display text-2xl font-semibold text-gray-900 dark:text-white mb-6\">\n                  Boek je plek\n                </h3>\n                \n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"customerName\">Naam</Label>\n                    <Input\n                      id=\"customerName\"\n                      {...form.register(\"customerName\")}\n                      placeholder=\"Je volledige naam\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerName && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerName.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerEmail\">Email</Label>\n                    <Input\n                      id=\"customerEmail\"\n                      type=\"email\"\n                      {...form.register(\"customerEmail\")}\n                      placeholder=\"je@email.com\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerEmail && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerEmail.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerPhone\">Telefoon</Label>\n                    <Input\n                      id=\"customerPhone\"\n                      {...form.register(\"customerPhone\")}\n                      placeholder=\"06-12345678\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerPhone && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerPhone.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"notes\">Opmerkingen (optioneel)</Label>\n                    <Textarea\n                      id=\"notes\"\n                      {...form.register(\"notes\")}\n                      placeholder=\"Allergieën, dieetwensen, etc.\"\n                      className=\"mt-1\"\n                      rows={3}\n                    />\n                  </div>\n\n                  {form.formState.errors.preferredDate && (\n                    <p className=\"text-red-500 text-sm\">\n                      {form.formState.errors.preferredDate.message}\n                    </p>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-purple-600 hover:bg-purple-700 text-white py-3 text-lg font-semibold\"\n                    disabled={orderMutation.isPending || !selectedDate}\n                  >\n                    {orderMutation.isPending ? \"Bezig...\" : \"Boek Mijn Plek - €12,50\"}\n                  </Button>\n                </form>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}","size_bytes":13416},"client/src/components/workshop-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, Users, MapPin, Star, CheckCircle2, Phone, Mail, User } from \"lucide-react\";\nimport type { WorkshopOrder } from \"@shared/schema\";\n\nconst workshopRegistrationSchema = z.object({\n  customerName: z.string().min(1, \"Naam is verplicht\"),\n  customerEmail: z.string().email(\"Ongeldig email adres\"),\n  customerPhone: z.string().min(1, \"Telefoon is verplicht\"),\n  preferredDate: z.string().min(1, \"Datum is verplicht\"),\n  notes: z.string().optional(),\n});\n\ntype WorkshopRegistrationForm = z.infer<typeof workshopRegistrationSchema>;\n\n// Generate next 8 Fridays\nfunction getNextFridays(count: number = 8): Date[] {\n  const fridays: Date[] = [];\n  const today = new Date();\n  let currentDate = new Date(today);\n  \n  // Find next Friday\n  while (currentDate.getDay() !== 5) {\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  // Generate fridays\n  for (let i = 0; i < count; i++) {\n    fridays.push(new Date(currentDate));\n    currentDate.setDate(currentDate.getDate() + 7);\n  }\n  \n  return fridays;\n}\n\ninterface CalendarDayProps {\n  date: Date;\n  registrationCount: number;\n  onSelect: (date: Date) => void;\n  isSelected: boolean;\n}\n\nfunction CalendarDay({ date, registrationCount, onSelect, isSelected }: CalendarDayProps) {\n  const minCapacity = 6;\n  const maxCapacity = 12;\n  const isConfirmed = registrationCount >= minCapacity;\n  const isFull = registrationCount >= maxCapacity;\n  const spotsLeft = maxCapacity - registrationCount;\n  \n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('nl-NL', { \n      day: 'numeric',\n      month: 'short'\n    });\n  };\n\n  return (\n    <Card \n      className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n        isSelected ? 'ring-2 ring-orange-500 border-orange-300' : 'border-orange-200'\n      } ${isFull ? 'opacity-60' : ''}`}\n      onClick={() => !isFull && onSelect(date)}\n    >\n      <CardContent className=\"p-4 text-center\">\n        <div className=\"text-lg font-semibold text-gray-900 dark:text-white mb-1\">\n          {formatDate(date)}\n        </div>\n        <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n          17:00 - 19:00\n        </div>\n        \n        <div className=\"space-y-1\">\n          <Badge \n            variant={isFull ? \"destructive\" : isConfirmed ? \"default\" : \"secondary\"}\n            className=\"text-xs\"\n          >\n            {isFull ? \"Volgeboekt\" : isConfirmed ? \"Bevestigd\" : `${registrationCount}/${minCapacity}`}\n          </Badge>\n          \n          {!isFull && (\n            <div className=\"text-xs text-gray-500\">\n              {spotsLeft} plekken over\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface RegistrationModalProps {\n  selectedDate: Date | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction RegistrationModal({ selectedDate, isOpen, onClose }: RegistrationModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<WorkshopRegistrationForm>({\n    resolver: zodResolver(workshopRegistrationSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      preferredDate: selectedDate?.toISOString().split('T')[0] || \"\",\n      notes: \"\",\n    },\n  });\n\n  // Update form when selectedDate changes\n  useState(() => {\n    if (selectedDate) {\n      form.setValue(\"preferredDate\", selectedDate.toISOString().split('T')[0]);\n    }\n  });\n\n  const registrationMutation = useMutation({\n    mutationFn: async (data: WorkshopRegistrationForm) => {\n      return await apiRequest(\"POST\", \"/api/orders/ramen\", {\n        customerName: data.customerName,\n        customerEmail: data.customerEmail,\n        customerPhone: data.customerPhone,\n        preferredDate: data.preferredDate,\n        servings: 1,\n        notes: data.notes || \"\"\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Aanmelding succesvol!\",\n        description: \"Je bent aangemeld voor de ramen workshop. Je ontvangt een bevestigingsmail.\",\n      });\n      form.reset();\n      onClose();\n      queryClient.invalidateQueries({ queryKey: [\"/api/workshop-orders\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: error.message || \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: WorkshopRegistrationForm) => {\n    registrationMutation.mutate(data);\n  };\n\n  if (!isOpen || !selectedDate) return null;\n\n  const formattedDate = selectedDate.toLocaleDateString('nl-NL', { \n    weekday: 'long', \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  });\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <Card className=\"w-full max-w-md max-h-[90vh] overflow-y-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-xl brewery-text-gradient\">\n            Aanmelden voor Ramen Workshop\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            {formattedDate} • 17:00 - 19:00\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"customerName\" className=\"flex items-center text-sm font-medium mb-1\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Naam *\n              </label>\n              <Input\n                id=\"customerName\"\n                {...form.register(\"customerName\")}\n                placeholder=\"Je volledige naam\"\n                className=\"border-orange-200 focus:border-orange-400\"\n              />\n              {form.formState.errors.customerName && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {form.formState.errors.customerName.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"customerEmail\" className=\"flex items-center text-sm font-medium mb-1\">\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Email *\n              </label>\n              <Input\n                id=\"customerEmail\"\n                type=\"email\"\n                {...form.register(\"customerEmail\")}\n                placeholder=\"je@email.nl\"\n                className=\"border-orange-200 focus:border-orange-400\"\n              />\n              {form.formState.errors.customerEmail && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {form.formState.errors.customerEmail.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"customerPhone\" className=\"flex items-center text-sm font-medium mb-1\">\n                <Phone className=\"w-4 h-4 mr-2\" />\n                Telefoonnummer *\n              </label>\n              <Input\n                id=\"customerPhone\"\n                type=\"tel\"\n                {...form.register(\"customerPhone\")}\n                placeholder=\"06-12345678\"\n                className=\"border-orange-200 focus:border-orange-400\"\n              />\n              {form.formState.errors.customerPhone && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {form.formState.errors.customerPhone.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"notes\" className=\"block text-sm font-medium mb-1\">\n                Opmerkingen (optioneel)\n              </label>\n              <Textarea\n                id=\"notes\"\n                {...form.register(\"notes\")}\n                placeholder=\"Allergieën, dieetwensen of andere opmerkingen...\"\n                rows={3}\n                className=\"border-orange-200 focus:border-orange-400\"\n              />\n            </div>\n\n            <div className=\"bg-orange-50 p-3 rounded-lg\">\n              <h4 className=\"font-semibold text-sm mb-2\">Workshop Details:</h4>\n              <ul className=\"text-xs space-y-1\">\n                <li>• €12,50 per persoon</li>\n                <li>• Minimaal 6 personen voor bevestiging</li>\n                <li>• Inclusief alle ingrediënten en begeleiding</li>\n                <li>• Locatie wordt nog bekend gemaakt</li>\n              </ul>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Annuleren\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={registrationMutation.isPending}\n                className=\"flex-1 brewery-gradient text-white\"\n              >\n                {registrationMutation.isPending ? \"Aanmelden...\" : \"Aanmelden\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport function WorkshopCalendar() {\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Get workshop orders to calculate capacity\n  const { data: workshopOrders = [] } = useQuery<WorkshopOrder[]>({\n    queryKey: [\"/api/workshop-orders\"],\n    retry: false,\n  });\n\n  const fridays = getNextFridays(8);\n\n  const getRegistrationCount = (date: Date): number => {\n    const dateStr = date.toISOString().split('T')[0];\n    return workshopOrders.filter(order => {\n      const orderDate = new Date(order.preferredDate).toISOString().split('T')[0];\n      return orderDate === dateStr;\n    }).length;\n  };\n\n  const handleDateSelect = (date: Date) => {\n    setSelectedDate(date);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedDate(null);\n  };\n\n  return (\n    <Card className=\"shadow-2xl border-2 border-orange-200\">\n      <CardHeader className=\"text-center pb-4\">\n        <CardTitle className=\"text-2xl font-display brewery-text-gradient\">\n          Ramen Agenda\n        </CardTitle>\n        <p className=\"text-muted-foreground\">\n          Kies een vrijdag voor je Ramen\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-3 mb-6\">\n          {fridays.map((friday, index) => (\n            <CalendarDay\n              key={index}\n              date={friday}\n              registrationCount={getRegistrationCount(friday)}\n              onSelect={handleDateSelect}\n              isSelected={selectedDate?.getTime() === friday.getTime()}\n            />\n          ))}\n        </div>\n\n        <div className=\"space-y-3 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"text-xs\">0/6</Badge>\n            <span>Wachtend op minimum aantal deelnemers</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"default\" className=\"text-xs\">Bevestigd</Badge>\n            <span>Workshop gaat door</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"destructive\" className=\"text-xs\">Volgeboekt</Badge>\n            <span>Geen plekken meer beschikbaar</span>\n          </div>\n        </div>\n      </CardContent>\n\n      <RegistrationModal\n        selectedDate={selectedDate}\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n      />\n    </Card>\n  );\n}","size_bytes":12094},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatPrice(price: string | number): string {\n  const numPrice = typeof price === \"string\" ? parseFloat(price) : price;\n  if (isNaN(numPrice) || numPrice === 0) {\n    return \"€6,99\"; // Default voor siropen\n  }\n  return new Intl.NumberFormat(\"nl-NL\", {\n    style: \"currency\",\n    currency: \"EUR\",\n  }).format(numPrice);\n}\n\nexport function formatDate(date: Date | string): string {\n  const dateObj = typeof date === \"string\" ? new Date(date) : date;\n  return new Intl.DateTimeFormat(\"nl-NL\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  }).format(dateObj);\n}\n\nexport function getStockPercentage(current: number, max: number): number {\n  return Math.round((current / max) * 100);\n}\n\nexport function isLowStock(current: number, max: number): boolean {\n  return current <= Math.max(1, Math.floor(max * 0.2));\n}\n","size_bytes":1035},"client/src/pages/admin-dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Edit, Plus, Eye, X, LogOut, Save, Mail, Calendar, Image } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport type { Product, WorkshopOrder } from \"@shared/schema\";\nimport { ProductImageUploader } from \"@/components/ProductImageUploader\";\n\n// Live Product Editor Component\nfunction LiveProductEditor({ productId, products, categories, updateProductMutation, availableBadges }: {\n  productId: number;\n  products: Product[];\n  categories: string[];\n  updateProductMutation: any;\n  availableBadges: string[];\n}) {\n  const product = products.find((p: Product) => p.id === productId);\n  const [editData, setEditData] = useState<any>(product || {});\n\n  // Update editData when product changes\n  useEffect(() => {\n    if (product) {\n      setEditData(product);\n    }\n  }, [product]);\n\n  const handleSave = () => {\n    if (!product) return;\n    \n    console.log(\"Saving product data:\", editData);\n    \n    updateProductMutation.mutate({\n      id: productId,\n      productData: {\n        ...editData,\n        price: parseFloat(editData.price) || 0,\n        stock: parseInt(editData.stock) || 0,\n        maxStock: parseInt(editData.maxStock) || 0,\n      }\n    });\n  };\n\n  if (!product) return <div>Product niet gevonden</div>;\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label>Productnaam</Label>\n          <Input\n            value={editData.name || \"\"}\n            onChange={(e) => setEditData({ ...editData, name: e.target.value })}\n          />\n        </div>\n        <div>\n          <Label>Prijs (€)</Label>\n          <Input\n            value={editData.price || \"\"}\n            onChange={(e) => setEditData({ ...editData, price: e.target.value })}\n          />\n        </div>\n      </div>\n      \n      <div>\n        <Label>Beschrijving</Label>\n        <Textarea\n          value={editData.description || \"\"}\n          onChange={(e) => setEditData({ ...editData, description: e.target.value })}\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-3 gap-4\">\n        <div>\n          <Label>Voorraad</Label>\n          <Input\n            type=\"number\"\n            value={editData.stock || \"\"}\n            onChange={(e) => setEditData({ ...editData, stock: e.target.value })}\n          />\n        </div>\n        <div>\n          <Label>Max Voorraad</Label>\n          <Input\n            type=\"number\"\n            value={editData.maxStock || \"\"}\n            onChange={(e) => setEditData({ ...editData, maxStock: e.target.value })}\n          />\n        </div>\n        <div>\n          <Label>Categorie</Label>\n          <Select\n            value={editData.category || \"kombucha\"}\n            onValueChange={(value) => setEditData({ ...editData, category: value })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {categories.map(cat => (\n                <SelectItem key={cat} value={cat}>\n                  {cat.charAt(0).toUpperCase() + cat.slice(1)}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      \n      <div>\n        <Label>Product Afbeelding</Label>\n        <ProductImageUploader\n          currentImageUrl={editData.imageUrl}\n          onImageUploaded={(imageUrl) => setEditData({ ...editData, imageUrl })}\n        />\n      </div>\n      \n      <div className=\"space-y-4\">\n        <Label>Tags/Badges</Label>\n        <div className=\"flex flex-wrap gap-2 mb-2\">\n          {availableBadges.map((badge) => (\n            <Badge\n              key={badge}\n              variant={(editData.badges || []).includes(badge) ? \"default\" : \"outline\"}\n              className=\"cursor-pointer\"\n              onClick={() => {\n                const currentBadges = editData.badges || [];\n                if (currentBadges.includes(badge)) {\n                  setEditData({\n                    ...editData,\n                    badges: currentBadges.filter(b => b !== badge)\n                  });\n                } else {\n                  setEditData({\n                    ...editData,\n                    badges: [...currentBadges, badge]\n                  });\n                }\n              }}\n            >\n              {badge}\n            </Badge>\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            checked={editData.featured || false}\n            onCheckedChange={(checked) => setEditData({ ...editData, featured: checked })}\n          />\n          <Label>Uitgelicht</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            checked={editData.limitedStock || false}\n            onCheckedChange={(checked) => setEditData({ ...editData, limitedStock: checked })}\n          />\n          <Label>Beperkte voorraad</Label>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n        <Button \n          onClick={handleSave} \n          disabled={updateProductMutation.isPending}\n          className=\"bg-green-600 hover:bg-green-700\"\n        >\n          <Save className=\"h-4 w-4 mr-1\" />\n          {updateProductMutation.isPending ? \"Opslaan...\" : \"Opslaan & Live Updaten\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  // State management\n  const [editingProduct, setEditingProduct] = useState<number | null>(null);\n  const [editProductData, setEditProductData] = useState<any>(null);\n  const [newProduct, setNewProduct] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    stock: \"\",\n    maxStock: \"\",\n    category: \"kombucha\",\n    imageUrl: \"\",\n    featured: false,\n    limitedStock: false,\n    badges: [] as string[]\n  });\n  const [availableBadges, setAvailableBadges] = useState([\"Seizoenspecialiteit\", \"Huistuin delicatesse\", \"Premium\"]);\n  const [newBadge, setNewBadge] = useState(\"\");\n  const [categories, setCategories] = useState([\"kombucha\", \"andere\", \"workshop\", \"ramen\"]);\n  const [newCategory, setNewCategory] = useState(\"\");\n  const [liveEditingProduct, setLiveEditingProduct] = useState<number | null>(null);\n  const [uploadingImage, setUploadingImage] = useState(false);\n  const [activeSection, setActiveSection] = useState('add-product');\n\n  // Check admin authentication\n  const { data: adminStatus, isLoading: adminLoading } = useQuery({\n    queryKey: ['/api/admin/status'],\n    retry: false,\n    refetchOnMount: true,\n    refetchOnWindowFocus: false,\n    staleTime: 0,\n  });\n\n  // Fetch data\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: workshopOrders = [] } = useQuery({\n    queryKey: [\"/api/workshop-orders\"],\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  // Mutations\n  const updateStockMutation = useMutation({\n    mutationFn: async ({ id, stock }: { id: number; stock: number }) => {\n      const response = await apiRequest(\"PATCH\", `/api/products/${id}/stock`, { stock });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Voorraad bijgewerkt\",\n        description: \"De voorraad is succesvol aangepast.\",\n      });\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product aangemaakt\",\n        description: \"Het nieuwe product is succesvol toegevoegd.\",\n      });\n      setNewProduct({\n        name: \"\",\n        description: \"\",\n        price: \"\",\n        stock: \"\",\n        maxStock: \"\",\n        category: \"kombucha\",\n        imageUrl: \"\",\n        featured: false,\n        limitedStock: false,\n        badges: []\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, productData }: { id: number; productData: any }) => {\n      console.log(\"Sending PATCH request with data:\", productData);\n      const response = await apiRequest(\"PATCH\", `/api/products/${id}`, productData);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product bijgewerkt\",\n        description: \"Wijzigingen zijn live doorgevoerd op de website.\",\n      });\n      setLiveEditingProduct(null); // Close live editor on success\n    },\n    onError: (error: any) => {\n      console.error(\"Error updating product:\", error);\n      toast({\n        title: \"Fout bij opslaan\",\n        description: error.message || \"Er is een fout opgetreden bij het bijwerken van het product.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateWorkshopOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/workshop-orders/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workshop-orders\"] });\n      toast({\n        title: \"Status bijgewerkt\",\n        description: \"De workshop booking status is aangepast.\",\n      });\n    },\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/orders/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Bestelling bijgewerkt\",\n        description: \"De bestellingsstatus is aangepast en klant is geïnformeerd.\",\n      });\n    },\n  });\n\n  const sendCustomerEmailMutation = useMutation({\n    mutationFn: async ({ orderId, type }: { orderId: number; type: 'syrup' | 'workshop' }) => {\n      const endpoint = type === 'syrup' ? `/api/orders/${orderId}/send-email` : `/api/workshop-orders/${orderId}/send-email`;\n      const response = await apiRequest(\"POST\", endpoint);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email verzonden\",\n        description: \"Bevestiging email is naar de klant gestuurd.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Email fout\",\n        description: \"Er is een probleem opgetreden bij het verzenden van de email.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Authentication redirect\n  if (adminLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!(adminStatus as any)?.isAdmin) {\n    console.log(\"Not admin, redirecting to /admin\");\n    setLocation('/admin');\n    return null;\n  }\n  \n  console.log(\"Admin authenticated, rendering dashboard\");\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/admin/logout\");\n      setLocation('/admin');\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"flex\">\n        {/* Sidebar Navigation */}\n        <div className=\"w-64 bg-white dark:bg-gray-800 shadow-lg min-h-screen\">\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">Admin Dashboard</h1>\n          </div>\n          \n          <nav className=\"mt-6\">\n            <div className=\"px-4 space-y-2\">\n              <button\n                onClick={() => setActiveSection('add-product')}\n                className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${\n                  activeSection === 'add-product' \n                    ? 'bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300' \n                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n              >\n                <Plus className=\"h-5 w-5 mr-3\" />\n                Nieuw Product Toevoegen\n              </button>\n              \n              <button\n                onClick={() => setActiveSection('categories')}\n                className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${\n                  activeSection === 'categories' \n                    ? 'bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300' \n                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n              >\n                <Plus className=\"h-5 w-5 mr-3\" />\n                Categorie Toevoegen\n              </button>\n              \n              <button\n                onClick={() => setActiveSection('products')}\n                className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${\n                  activeSection === 'products' \n                    ? 'bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300' \n                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n              >\n                <Image className=\"h-5 w-5 mr-3\" />\n                Producten Beheer\n              </button>\n              \n              <button\n                onClick={() => setActiveSection('orders')}\n                className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${\n                  activeSection === 'orders' \n                    ? 'bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300' \n                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n              >\n                <Mail className=\"h-5 w-5 mr-3\" />\n                Kombucha Bestellingen\n              </button>\n              \n              <button\n                onClick={() => setActiveSection('workshop-orders')}\n                className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${\n                  activeSection === 'workshop-orders' \n                    ? 'bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300' \n                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n              >\n                <Calendar className=\"h-5 w-5 mr-3\" />\n                Workshop Bookings\n              </button>\n            </div>\n            \n            <div className=\"absolute bottom-0 w-64 p-4 border-t border-gray-200 dark:border-gray-700\">\n              <Button onClick={handleLogout} variant=\"outline\" className=\"w-full flex items-center justify-center gap-2\">\n                <LogOut className=\"h-4 w-4\" />\n                Uitloggen\n              </Button>\n            </div>\n          </nav>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-8\">\n          <div className=\"max-w-6xl mx-auto\">\n            \n            {/* Nieuw Product Toevoegen */}\n            {activeSection === 'add-product' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Nieuw Product Toevoegen</CardTitle>\n                  <CardDescription>Voeg een nieuw product toe aan de catalogus</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label>Productnaam</Label>\n                        <Input\n                          placeholder=\"Bijv. Gember Kombucha\"\n                          value={newProduct.name}\n                          onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}\n                        />\n                      </div>\n                      <div>\n                        <Label>Beschrijving</Label>\n                        <Textarea\n                          placeholder=\"Beschrijf je product...\"\n                          value={newProduct.description}\n                          onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Prijs (€)</Label>\n                          <Input\n                            placeholder=\"15.00\"\n                            value={newProduct.price}\n                            onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })}\n                          />\n                        </div>\n                        <div>\n                          <Label>Categorie</Label>\n                          <Select\n                            value={newProduct.category}\n                            onValueChange={(value) => setNewProduct({ ...newProduct, category: value })}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {categories.map(cat => (\n                                <SelectItem key={cat} value={cat}>\n                                  {cat.charAt(0).toUpperCase() + cat.slice(1)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Voorraad</Label>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"10\"\n                            value={newProduct.stock}\n                            onChange={(e) => setNewProduct({ ...newProduct, stock: e.target.value })}\n                          />\n                        </div>\n                        <div>\n                          <Label>Max Voorraad</Label>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"50\"\n                            value={newProduct.maxStock}\n                            onChange={(e) => setNewProduct({ ...newProduct, maxStock: e.target.value })}\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label>Product Afbeelding</Label>\n                        <ProductImageUploader\n                          currentImageUrl={newProduct.imageUrl}\n                          onImageUploaded={(imageUrl) => setNewProduct(prev => ({ ...prev, imageUrl }))}\n                        />\n                      </div>\n\n                      <div className=\"space-y-4\">\n                        <Label>Tags/Badges</Label>\n                        <div className=\"flex flex-wrap gap-2 mb-2\">\n                          {availableBadges.map((badge) => (\n                            <Badge\n                              key={badge}\n                              variant={newProduct.badges.includes(badge) ? \"default\" : \"outline\"}\n                              className=\"cursor-pointer\"\n                              onClick={() => {\n                                if (newProduct.badges.includes(badge)) {\n                                  setNewProduct(prev => ({\n                                    ...prev,\n                                    badges: prev.badges.filter(b => b !== badge)\n                                  }));\n                                } else {\n                                  setNewProduct(prev => ({\n                                    ...prev,\n                                    badges: [...prev.badges, badge]\n                                  }));\n                                }\n                              }}\n                            >\n                              {badge}\n                            </Badge>\n                          ))}\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            value={newBadge}\n                            onChange={(e) => setNewBadge(e.target.value)}\n                            placeholder=\"Nieuwe badge\"\n                          />\n                          <Button onClick={() => {\n                            if (newBadge.trim() && !availableBadges.includes(newBadge.trim())) {\n                              setAvailableBadges(prev => [...prev, newBadge.trim()]);\n                              setNewBadge(\"\");\n                              toast({\n                                title: \"Badge toegevoegd\",\n                                description: `Badge \"${newBadge}\" is toegevoegd aan beschikbare badges.`,\n                              });\n                            }\n                          }} variant=\"outline\" size=\"sm\">\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Switch\n                            checked={newProduct.featured}\n                            onCheckedChange={(checked) => setNewProduct({ ...newProduct, featured: checked })}\n                          />\n                          <Label>Uitgelicht</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Switch\n                            checked={newProduct.limitedStock}\n                            onCheckedChange={(checked) => setNewProduct({ ...newProduct, limitedStock: checked })}\n                          />\n                          <Label>Beperkte voorraad</Label>\n                        </div>\n                      </div>\n                      \n                      <Button \n                        onClick={() => {\n                          createProductMutation.mutate({\n                            ...newProduct,\n                            price: parseFloat(newProduct.price) || 0,\n                            stock: parseInt(newProduct.stock) || 0,\n                            maxStock: parseInt(newProduct.maxStock) || 0,\n                          });\n                        }}\n                        disabled={createProductMutation.isPending}\n                        className=\"w-full\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        {createProductMutation.isPending ? \"Bezig...\" : \"Product Aanmaken\"}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Categorieën Beheren */}\n            {activeSection === 'categories' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Categorie Beheer</CardTitle>\n                  <CardDescription>Beheer productcategorieën</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {categories.map((category) => (\n                        <Badge key={category} variant=\"secondary\" className=\"text-sm\">\n                          {category.charAt(0).toUpperCase() + category.slice(1)}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Input\n                        placeholder=\"Nieuwe categorie naam\"\n                        value={newCategory}\n                        onChange={(e) => setNewCategory(e.target.value)}\n                      />\n                      <Button \n                        onClick={() => {\n                          if (newCategory.trim() && !categories.includes(newCategory.trim().toLowerCase())) {\n                            setCategories(prev => [...prev, newCategory.trim().toLowerCase()]);\n                            setNewCategory(\"\");\n                            toast({\n                              title: \"Categorie toegevoegd\",\n                              description: `Categorie \"${newCategory}\" is succesvol toegevoegd.`,\n                            });\n                          }\n                        }}\n                        disabled={!newCategory.trim()}\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Toevoegen\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Producten Beheer */}\n            {activeSection === 'products' && (\n              <div className=\"space-y-6\">\n                {/* Products List */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Producten Beheer</CardTitle>\n                    <CardDescription>Beheer je producten en voorraad</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full border-collapse border border-gray-200 dark:border-gray-700\">\n                        <thead>\n                          <tr className=\"bg-gray-50 dark:bg-gray-800\">\n                            <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Product</th>\n                            <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Categorie</th>\n                            <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Prijs</th>\n                            <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Voorraad</th>\n                            <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Acties</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {(products as Product[]).map((product) => (\n                            <tr key={product.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                              <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                                <div className=\"flex items-center space-x-3\">\n                                  {product.imageUrl && (\n                                    <img \n                                      src={product.imageUrl} \n                                      alt={product.name} \n                                      className=\"w-10 h-10 rounded object-cover\"\n                                    />\n                                  )}\n                                  <div>\n                                    <div className=\"font-medium\">{product.name}</div>\n                                    {product.featured && (\n                                      <Badge variant=\"secondary\" className=\"text-xs\">Uitgelicht</Badge>\n                                    )}\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                                <Badge variant=\"outline\">{product.category}</Badge>\n                              </td>\n                              <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                                €{product.price}\n                              </td>\n                              <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Input\n                                    type=\"number\"\n                                    value={product.stock}\n                                    onChange={(e) => {\n                                      const newStock = parseInt(e.target.value) || 0;\n                                      updateStockMutation.mutate({ id: product.id, stock: newStock });\n                                    }}\n                                    className=\"w-20\"\n                                  />\n                                  <span className=\"text-sm text-gray-500\">/ {product.maxStock}</span>\n                                </div>\n                              </td>\n                              <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                                <div className=\"flex space-x-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => setLiveEditingProduct(product.id)}\n                                  >\n                                    <Edit className=\"h-4 w-4 mr-1\" />\n                                    Live Edit\n                                  </Button>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Live Editing Interface */}\n                {liveEditingProduct && (\n                  <Card className=\"border-2 border-green-200 bg-green-50/50\">\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n                      <CardTitle className=\"text-green-800\">Live Product Editing</CardTitle>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            window.open(`/`, '_blank');\n                          }}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          Bekijk Live\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setLiveEditingProduct(null)}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <LiveProductEditor \n                        productId={liveEditingProduct} \n                        products={products as Product[]} \n                        categories={categories}\n                        updateProductMutation={updateProductMutation}\n                        availableBadges={availableBadges}\n                      />\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n\n            {/* Kombucha Bestellingen */}\n            {activeSection === 'orders' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Kombucha Bestellingen</CardTitle>\n                  <CardDescription>Overzicht van alle kombucha bestellingen</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full border-collapse border border-gray-200 dark:border-gray-700\">\n                      <thead>\n                        <tr className=\"bg-gray-50 dark:bg-gray-800\">\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Klant</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Product</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Aantal</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Totaal</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Status</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Datum</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Acties</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {(orders as any[]).map((order: any) => (\n                          <tr key={order.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              <div>\n                                <div className=\"font-medium\">{order.customerName}</div>\n                                <div className=\"text-sm text-gray-500\">{order.customerEmail}</div>\n                              </div>\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              {(products as any[]).find((p: any) => p.id === order.productId)?.name || 'Onbekend product'}\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">{order.quantity}</td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">€{order.totalAmount}</td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              <Badge variant={order.status === 'completed' ? 'default' : 'secondary'}>\n                                {order.status}\n                              </Badge>\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              {new Date(order.createdAt).toLocaleDateString('nl-NL')}\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    const newStatus = order.status === 'pending' ? 'confirmed' : order.status === 'confirmed' ? 'completed' : 'pending';\n                                    updateOrderStatusMutation.mutate({ id: order.id, status: newStatus });\n                                  }}\n                                  disabled={updateOrderStatusMutation.isPending}\n                                >\n                                  {order.status === 'pending' ? 'Bevestigen' : \n                                   order.status === 'confirmed' ? 'Voltooien' : 'Reset'}\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"secondary\"\n                                  onClick={() => sendCustomerEmailMutation.mutate({ orderId: order.id, type: 'syrup' })}\n                                  disabled={sendCustomerEmailMutation.isPending}\n                                >\n                                  <Mail className=\"h-4 w-4 mr-1\" />\n                                  Email\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Workshop Bookings */}\n            {activeSection === 'workshop-orders' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Workshop Bookings</CardTitle>\n                  <CardDescription>Overzicht van alle workshop bookings</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full border-collapse border border-gray-200 dark:border-gray-700\">\n                      <thead>\n                        <tr className=\"bg-gray-50 dark:bg-gray-800\">\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Naam</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Email</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Telefoon</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Datum</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Status</th>\n                          <th className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 text-left\">Acties</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {(workshopOrders as WorkshopOrder[]).map((order) => (\n                          <tr key={order.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2 font-medium\">\n                              {order.customerName}\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              {order.customerEmail}\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              {order.customerPhone}\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              {new Date(order.preferredDate).toLocaleDateString('nl-NL')}\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              <Badge variant={order.status === 'confirmed' ? 'default' : 'secondary'}>\n                                {order.status}\n                              </Badge>\n                            </td>\n                            <td className=\"border border-gray-200 dark:border-gray-700 px-4 py-2\">\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    const newStatus = order.status === 'pending' ? 'confirmed' : 'pending';\n                                    updateWorkshopOrderStatusMutation.mutate({\n                                      id: order.id,\n                                      status: newStatus\n                                    });\n                                  }}\n                                  disabled={updateWorkshopOrderStatusMutation.isPending}\n                                >\n                                  {order.status === 'pending' ? 'Bevestigen' : 'Ongedaan maken'}\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"secondary\"\n                                  onClick={() => sendCustomerEmailMutation.mutate({ orderId: order.id, type: 'workshop' })}\n                                  disabled={sendCustomerEmailMutation.isPending}\n                                >\n                                  <Mail className=\"h-4 w-4 mr-1\" />\n                                  Email\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":42402},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Lock, User } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\",\n        },\n        body: JSON.stringify(credentials),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`Login failed: ${text}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate auth status to refresh admin state\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/status'] });\n      \n      toast({\n        title: \"Ingelogd\",\n        description: \"Welkom in het admin dashboard!\",\n      });\n      \n      // Use React Router navigation instead of hard redirect\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Inloggen mislukt\",\n        description: error.message || \"Controleer je gebruikersnaam en wachtwoord.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !password) {\n      toast({\n        title: \"Velden vereist\",\n        description: \"Vul beide velden in.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-100 to-blue-100 dark:from-purple-900 dark:to-blue-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Lock className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-display\">Admin Login</CardTitle>\n          <p className=\"text-gray-600 dark:text-gray-400\">Pluk & Poot CMS</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Gebruikersnaam</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"admin\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Wachtwoord</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"••••••••\"\n                  required\n                />\n              </div>\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Inloggen...\" : \"Inloggen\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4527},"client/src/pages/home.tsx":{"content":"import { Header } from \"@/components/header\";\nimport { HeroBanner } from \"@/components/hero-banner\";\nimport { WelcomeSection } from \"@/components/welcome-section\";\nimport { ProductCarousel } from \"@/components/product-carousel\";\nimport { WorkshopsSection } from \"@/components/workshops-section\";\nimport { RamenSection } from \"@/components/ramen-section-fixed\";\nimport { AdditionalSections } from \"@/components/additional-sections\";\n\nimport { Footer } from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background font-sans text-foreground transition-colors duration-300\">\n      <Header />\n      <HeroBanner />\n      <WelcomeSection />\n      <ProductCarousel />\n      <WorkshopsSection />\n      <RamenSection />\n      <AdditionalSections />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":833},"client/src/pages/kombucha-workshop.tsx":{"content":"import { ArrowLeft, Clock, Users, Star, Utensils, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function ChickenShoyuWorkshop() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-100 dark:from-gray-900 dark:to-gray-800\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-900 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"mr-2 w-4 h-4\" />\n              Terug naar Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-start\">\n          {/* Product Image */}\n          <div className=\"space-y-6\">\n            <div className=\"relative bg-gradient-to-br from-amber-100 to-orange-200 dark:from-gray-700 dark:to-gray-600 rounded-2xl overflow-hidden aspect-square flex items-center justify-center\">\n              <div className=\"text-center p-8\">\n                <Utensils className=\"w-24 h-24 text-amber-600 dark:text-amber-400 mx-auto mb-4\" />\n                <h3 className=\"text-2xl font-bold text-gray-800 dark:text-white\">\n                  Chicken Shoyu Workshop\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\n                  Authentieke Japanse Ramen ervaring\n                </p>\n              </div>\n            </div>\n            \n            {/* Product Highlights */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <Clock className=\"w-8 h-8 text-amber-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium\">2+ uur koken</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Verse bouillon</p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <Users className=\"w-8 h-8 text-amber-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium\">Max 12 personen</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Intieme ervaring</p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Product Details */}\n          <div className=\"space-y-8\">\n            <div>\n              <div className=\"flex items-center gap-3 mb-4\">\n                <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-800\">\n                  Workshop Ervaring\n                </Badge>\n                <div className=\"flex items-center\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 fill-amber-400 text-amber-400\" />\n                  ))}\n                  <span className=\"ml-2 text-sm text-gray-600\">(Authentiek Japans)</span>\n                </div>\n              </div>\n              \n              <h1 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n                Chicken Shoyu Workshop Ervaring\n              </h1>\n              \n              <p className=\"text-xl text-gray-600 dark:text-gray-400 leading-relaxed\">\n                Beleef een authentieke Japanse workshop ervaring in het hart van Groningen. \n                Onze Chicken Shoyu Workshop wordt met liefde bereid volgens traditionele recepten, \n                met verse ingrediënten en een bouillon die uren heeft getrokken.\n              </p>\n            </div>\n\n            {/* What's Included */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-lg mb-4\">Wat is inbegrepen:</h3>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Verse Chicken Shoyu bouillon (2+ uur gekookt)</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Handgemaakte workshop noedels</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Malse kip, ajitsuke ei en verse groenten</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Traditionele toppings en bijgerechten</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Culturele uitleg over workshop traditie</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Pricing & Booking */}\n            <Card className=\"bg-gradient-to-r from-amber-500 to-orange-600 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">€25,00 per persoon</p>\n                    <p className=\"text-amber-100\">Inclusief alle ingrediënten</p>\n                  </div>\n                  <Calendar className=\"w-8 h-8 text-amber-100\" />\n                </div>\n                \n                <div className=\"space-y-3 mb-6\">\n                  <p className=\"text-sm text-amber-100\">\n                    <strong>Wanneer:</strong> Alleen op vrijdagavonden\n                  </p>\n                  <p className=\"text-sm text-amber-100\">\n                    <strong>Tijd:</strong> 18:00 - 21:00 (inclusief voorbereiding)\n                  </p>\n                  <p className=\"text-sm text-amber-100\">\n                    <strong>Locatie:</strong> Star Numanstraat, Groningen\n                  </p>\n                </div>\n\n                <Link href=\"/#workshop\">\n                  <Button \n                    className=\"w-full bg-white text-amber-600 hover:bg-amber-50 font-semibold py-3\"\n                    size=\"lg\"\n                  >\n                    Reserveer Nu\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Additional Info */}\n            <div className=\"bg-amber-50 dark:bg-gray-800 rounded-xl p-6\">\n              <h3 className=\"font-semibold text-lg mb-3 text-gray-900 dark:text-white\">\n                Belangrijk om te weten:\n              </h3>\n              <ul className=\"space-y-2 text-sm text-gray-700 dark:text-gray-300\">\n                <li>• Minimum 6 personen, maximum 12 personen per sessie</li>\n                <li>• Reservering wordt automatisch bevestigd bij 6+ deelnemers</li>\n                <li>• Geschikt voor alle leeftijden en diëten (vegetarische optie beschikbaar)</li>\n                <li>• Annulering tot 48 uur van tevoren mogelijk</li>\n                <li>• Alle benodigde materialen worden verzorgd</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7708},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Star, Leaf, Heart, Package, Shield, Edit, Save, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { StockIndicator } from \"@/components/stock-indicator\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { AddToCartButton } from \"@/components/shopping-cart\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatPrice } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductDetail() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editData, setEditData] = useState<Partial<Product>>({});\n  const [isAdmin, setIsAdmin] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check admin status from server\n  const { data: adminStatus } = useQuery({\n    queryKey: ['/api/admin/status'],\n    retry: false,\n  });\n\n  useEffect(() => {\n    setIsAdmin(adminStatus?.isAdmin || false);\n  }, [adminStatus]);\n\n  console.log('ProductDetail admin status:', { adminStatus, isAdmin });\n  \n  // Convert slug to product ID\n  const productSlugMap: Record<string, number> = {\n    \"vlierbloesem-kombucha\": 1,\n    \"rozen-kombucha\": 2,\n    \"chicken-shoyu-workshop\": 3\n  };\n  \n  const productId = productSlugMap[params.slug as string] || parseInt(params.id || \"0\");\n\n  // Get single product\n  const { data: product, isLoading } = useQuery({\n    queryKey: [\"/api/products\", productId],\n    queryFn: () => apiRequest(\"GET\", `/api/products/${productId}`).then(res => res.json()),\n    enabled: productId > 0\n  });\n\n  // Get all products for carousel\n  const { data: allProducts } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async (updatedProduct: Partial<Product>) => {\n      return apiRequest(\"PATCH\", `/api/products/${productId}`, updatedProduct);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", productId] });\n      setIsEditing(false);\n      setEditData({});\n      toast({\n        title: \"Product bijgewerkt!\",\n        description: \"De productinformatie is succesvol opgeslagen.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fout bij opslaan\",\n        description: error.message || \"Er ging iets mis bij het opslaan.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = () => {\n    if (!product) return;\n    setIsEditing(true);\n    setEditData({\n      name: product.name,\n      description: product.description,\n      price: product.price,\n      imageUrl: product.imageUrl,\n      // Extended content fields\n      story: product.story || getDefaultStory(product.name),\n      ingredients: product.ingredients || getDefaultIngredients(product.name),\n      nutrition: product.nutrition || getDefaultNutrition(),\n      usage: product.usage || getDefaultUsage(product.name),\n      // Detailed page content\n      ingredientsTitle: product.ingredientsTitle || \"Ingrediënten & Voedingswaarden\",\n      ingredientsContent: product.ingredientsContent || getDefaultIngredientsContent(product.name),\n      nutritionContent: product.nutritionContent || getDefaultNutritionContent(),\n      storyTitle: product.storyTitle || \"Verhaal: De Hamburgervijver en de Ziel van de Kombucha\",\n      storyContent: product.storyContent || getDefaultStoryContent(product.name),\n    });\n  };\n\n  // Helper functions for default content\n  const getDefaultStory = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return \"Onze vlierbloesemstroop wordt met liefde gemaakt van verse vlierbloesems uit onze eigen tuin. De bloesems worden vroeg in de ochtend geplukt wanneer de dauw nog op de bloemblaadjes ligt, voor de meest intense smaak.\";\n    } else if (name.includes(\"Rozen\")) {\n      return \"Deze rozenkombucha wordt gemaakt van delicate rozenblaadjes uit onze eigen tuin aan de Star Numanstraat. Een subtiele bloemensmaak die perfect past bij thee of prosecco.\";\n    }\n    return \"Een verhaal over dit bijzondere product...\";\n  };\n\n  const getDefaultIngredients = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return \"Verse vlierbloesems, rietsuiker, water, citroenzuur\";\n    } else if (name.includes(\"Rozen\")) {\n      return \"Biologische rozenblaadjes, rietsuiker, water, citroenzuur\";\n    }\n    return \"Natuurlijke ingrediënten van hoge kwaliteit\";\n  };\n\n  const getDefaultNutrition = () => {\n    return \"Per 100ml: Energie 280kcal, Koolhydraten 70g, waarvan suikers 68g, Vet 0g, Eiwit 0g, Zout 0g\";\n  };\n\n  const getDefaultUsage = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return \"Perfect voor in thee, over ijs, in cocktails of als topping op desserts. Verdun met bruiswater voor een verfrissende limonade.\";\n    } else if (name.includes(\"Rozen\")) {\n      return \"Heerlijk in thee, over yoghurt, in cocktails of als basis voor rozenlimonade. Ook perfect als topping voor taarten.\";\n    }\n    return \"Veelzijdig te gebruiken in dranken en desserts\";\n  };\n\n  const getDefaultIngredientsContent = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return `Ingrediënten per 100 ml verdunde kombucha (1:7 verhouding):\n• Vlierbloeseminfusie (water, verse vlierbloesemschermen)\n• Suiker (33 g per 100 ml kombucha)\n• Citroensap (vers geperst)\n• Citroenzuur (natuurlijk conserveermiddel)`;\n    } else if (name.includes(\"Rozen\")) {\n      return `Ingrediënten per 100 ml verdunde kombucha (1:7 verhouding):\n• Rozenextract (water, verse rozenblaadjes)\n• Biologische rietsuiker (35 g per 100 ml kombucha)\n• Citroensap (vers geperst)\n• Citroenzuur (natuurlijk conserveermiddel)`;\n    }\n    return \"Natuurlijke ingrediënten van hoge kwaliteit\";\n  };\n\n  const getDefaultNutritionContent = () => {\n    return `Voedingswaarden per 100 ml verdund met water:\n\nEnergie: 138 kJ\nKoolhydraten: 8,3 g\nWaarvan suikers: 8,3 g\n\nBevat geen kunstmatige kleur-, geur- of smaakstoffen. Gegarandeerd glutenvrij en veganistisch.`;\n  };\n\n  const getDefaultStoryContent = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return `Midden in de levendige Groningse wijk Korreweg, verscholen tussen karakteristieke jaren-30-woningen en moderne flatgebouwen, ligt de Hamburgervijver – een oase van rust waar jouw vlierbloesemkombucha zijn roots vindt. Deze iconische vijver, onderdeel van het Molukkenplantsoen, werd in de jaren 30 aangelegd als onderdeel van Berlage's visie voor een groene gordel rond de stad.\n\nHistorische Verbinding\n\nDe naam \"Hamburgervijver\" verwijst naar de Hamburgerstraat, die al in 1503 werd vermeld als Curreweg. In de jaren 50 fietsten arbeiders hier dagelijks langs naar de nabijgelegen fabrieken aan het Boterdiep. Vandaag vangen karpervissers er nog steeds karpers tot 5 pond, omringd door treurwilgen en het gelach van kinderen die over het slingerpad rennen.\n\nNatuur in de Stad\n\nHet water reflecteert de seizoenen: in de lente bloeien dotterbloemen langs de oevers, in de zomer weerspiegelen de vlierbloesemschermen zich in het oppervlak. Juist deze bloesems, geplukt in de straten rondom Star Numanstraat, vormen het hart van je kombucha. De combinatie van stadse dynamiek en wildpluktraditionele geeft elk flesje een uniek karakter – een eerbetoon aan Groningens vermogen om natuur en stadsleven te verweven.`;\n    } else if (name.includes(\"Rozen\")) {\n      return `Deze rozenkombucha wordt gemaakt van delicate rozenblaadjes uit onze eigen tuin aan de Star Numanstraat. Een subtiele bloemensmaak die perfect past bij thee of prosecco.\n\nDe Tuin\n\nOnze rozentuin ligt verscholen in het hart van Groningen, waar elke ochtend de rozen worden geplukt wanneer de dauw nog op de blaadjes ligt. Dit zorgt voor de meest intense smaak en geur.\n\nAmbachtelijk Proces\n\nElke fles bevat de essentie van tientallen rozen, zorgvuldig geoogst op het perfecte moment voor optimale smaak en geur. Het traditionele recept wordt al generaties doorgegeven.`;\n    }\n    return \"Een verhaal over dit bijzondere product...\";\n  };\n\n  const handleSave = () => {\n    if (!product || !editData) return;\n    updateProductMutation.mutate(editData);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEditData({});\n  };\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-8\" />\n            <div className=\"grid lg:grid-cols-2 gap-12\">\n              <div className=\"h-96 bg-gray-200 dark:bg-gray-700 rounded-xl\" />\n              <div className=\"space-y-4\">\n                <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-3/4\" />\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-full\" />\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-2/3\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  // Product not found\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n            Product niet gevonden\n          </h1>\n          <Button onClick={() => setLocation(\"/\")} variant=\"outline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Terug naar home\n          </Button>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  // Product data is available, continue with rendering\n  const isElderflower = product?.name?.includes(\"Vlierbloesem\") ?? false;\n  const isRose = product?.name?.includes(\"Rozen\") ?? false;\n  const otherProducts = allProducts?.filter(p => p.id !== product?.id && p.category === product?.category) || [];\n\n  const getProductTheme = () => {\n    if (isElderflower) {\n      return {\n        gradient: \"from-yellow-100 via-green-50 to-blue-50 dark:from-yellow-900/20 dark:via-green-900/20 dark:to-blue-900/20\",\n        accent: \"text-yellow-600 dark:text-yellow-400\",\n        button: \"bg-gradient-to-r from-yellow-500 to-green-500 hover:from-yellow-600 hover:to-green-600\",\n        badge: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\",\n      };\n    } else if (isRose) {\n      return {\n        gradient: \"from-pink-100 via-rose-50 to-red-50 dark:from-pink-900/20 dark:via-rose-900/20 dark:to-red-900/20\",\n        accent: \"text-rose-600 dark:text-rose-400\",\n        button: \"bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600\",\n        badge: \"bg-rose-100 text-rose-800 dark:bg-rose-900/20 dark:text-rose-400\",\n      };\n    }\n    return {\n      gradient: \"from-blue-100 via-purple-50 to-pink-50 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20\",\n      accent: \"text-purple-600 dark:text-purple-400\",\n      button: \"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\",\n      badge: \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\",\n    };\n  };\n\n  const theme = getProductTheme();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex flex-col\">\n      <Header />\n      \n      {/* Breadcrumb */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/\")}\n          className=\"text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Terug naar collectie\n        </Button>\n      </div>\n\n      {/* Product Hero */}\n      <div className={`bg-gradient-to-br ${theme.gradient} py-16`}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Product Images */}\n            <div className=\"order-1 lg:order-1\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"relative\">\n                  <img\n                    src={isElderflower ? \"/images/normaal_voorkant.png\" : isRose ? \"/images/rozen_voorkant.png\" : \"/images/voorkant-kombucha.png\"}\n                    alt={`${product.name} voorkant`}\n                    className=\"w-full h-auto drop-shadow-2xl\"\n                  />\n                </div>\n                <div className=\"relative\">\n                  <img\n                    src={isElderflower ? \"/images/normaal_achterkant.png\" : isRose ? \"/images/rozen_achterkant.png\" : \"/images/achterkant-kombucha.png\"}\n                    alt={`${product.name} achterkant`}\n                    className=\"w-full h-auto drop-shadow-2xl\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Product Info */}\n            <div className=\"order-2 lg:order-2 space-y-8\">\n              {/* Edit Button - Only for admins */}\n              {isAdmin && (\n                <div className=\"flex justify-end\">\n                  {!isEditing ? (\n                    <Button onClick={handleEdit} variant=\"outline\" size=\"sm\">\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Bewerk Pagina\n                    </Button>\n                  ) : (\n                    <div className=\"flex gap-2\">\n                      <Button onClick={handleSave} disabled={updateProductMutation.isPending} size=\"sm\">\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Opslaan\n                      </Button>\n                      <Button onClick={handleCancel} variant=\"outline\" size=\"sm\">\n                        <X className=\"w-4 h-4 mr-2\" />\n                        Annuleren\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              <div>\n                {isEditing ? (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Product Naam</label>\n                      <Input\n                        value={editData.name || ''}\n                        onChange={(e) => setEditData({ ...editData, name: e.target.value })}\n                        className=\"text-2xl font-bold\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Beschrijving</label>\n                      <Textarea\n                        value={editData.description || ''}\n                        onChange={(e) => setEditData({ ...editData, description: e.target.value })}\n                        rows={4}\n                        className=\"text-lg\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Prijs</label>\n                      <Input\n                        value={editData.price || ''}\n                        onChange={(e) => setEditData({ ...editData, price: e.target.value })}\n                        placeholder=\"6.99\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Afbeelding URL</label>\n                      <Input\n                        value={editData.imageUrl || ''}\n                        onChange={(e) => setEditData({ ...editData, imageUrl: e.target.value })}\n                        placeholder=\"/images/product.jpg\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Verhaal</label>\n                      <Textarea\n                        value={editData.story || ''}\n                        onChange={(e) => setEditData({ ...editData, story: e.target.value })}\n                        rows={3}\n                        placeholder=\"Het verhaal achter dit product...\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Ingrediënten</label>\n                      <Input\n                        value={editData.ingredients || ''}\n                        onChange={(e) => setEditData({ ...editData, ingredients: e.target.value })}\n                        placeholder=\"Ingrediëntenlijst\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Voedingswaarde</label>\n                      <Input\n                        value={editData.nutrition || ''}\n                        onChange={(e) => setEditData({ ...editData, nutrition: e.target.value })}\n                        placeholder=\"Voedingswaarde per 100ml\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Gebruik</label>\n                      <Textarea\n                        value={editData.usage || ''}\n                        onChange={(e) => setEditData({ ...editData, usage: e.target.value })}\n                        rows={2}\n                        placeholder=\"Hoe gebruik je dit product...\"\n                      />\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    <Badge className={theme.badge}>\n                      {product.category}\n                    </Badge>\n                    <h1 className=\"text-4xl lg:text-5xl font-display font-bold text-gray-900 dark:text-white mt-4\">\n                      {product.name}\n                    </h1>\n                    <p className=\"text-xl text-gray-600 dark:text-gray-300 mt-4 leading-relaxed\">\n                      {product.description}\n                    </p>\n                  </>\n                )}\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-4xl font-display font-bold ${theme.accent}`}>\n                    {formatPrice(product.price)}\n                  </span>\n                  <div className=\"text-right\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Voorraad</span>\n                    <div className={`text-lg font-semibold ${theme.accent}`}>\n                      {product.stock}/{product.maxStock} beschikbaar\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Features */}\n              {isElderflower && (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Card className=\"border-yellow-200 dark:border-yellow-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Leaf className=\"w-6 h-6 text-yellow-600 dark:text-yellow-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Handgeplukt</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Bij Hamburgervijver</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"border-green-200 dark:border-green-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Star className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Puur Natuurlijk</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Geen kunstmatige toevoegingen</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {isRose && (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Card className=\"border-rose-200 dark:border-rose-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Heart className=\"w-6 h-6 text-rose-600 dark:text-rose-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Eigen Tuin</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Verse rozen uit onze tuin</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"border-pink-200 dark:border-pink-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Shield className=\"w-6 h-6 text-pink-600 dark:text-pink-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Biologisch</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Zonder pesticiden</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {/* Add to Cart Button */}\n              <div className=\"pt-4\">\n                <AddToCartButton product={product} />\n              </div>\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1\">\n      \n      {/* Detailed Product Information - Always show */}\n      {product && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          {isEditing && isAdmin && (\n            <div className=\"mb-8 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <h3 className=\"text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n                Bewerk Mode Actief\n              </h3>\n              <p className=\"text-blue-700 dark:text-blue-300\">\n                Je kunt nu alle content op deze pagina aanpassen. Scroll naar boven om de basis productinfo te bewerken.\n              </p>\n            </div>\n          )}\n          \n          <div className=\"grid lg:grid-cols-2 gap-16\">\n            {/* Ingredients & Nutrition */}\n            <div>\n              {isEditing && isAdmin ? (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Sectie Titel - Ingrediënten</label>\n                    <Input\n                      value={editData.ingredientsTitle || \"Ingrediënten & Voedingswaarden\"}\n                      onChange={(e) => setEditData({ ...editData, ingredientsTitle: e.target.value })}\n                      placeholder=\"Ingrediënten & Voedingswaarden\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Ingrediënten Content</label>\n                    <Textarea\n                      value={editData.ingredientsContent || getDefaultIngredientsContent(product.name)}\n                      onChange={(e) => setEditData({ ...editData, ingredientsContent: e.target.value })}\n                      rows={8}\n                      placeholder=\"Volledige ingrediënten tekst...\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Voedingswaarden Content</label>\n                    <Textarea\n                      value={editData.nutritionContent || getDefaultNutritionContent()}\n                      onChange={(e) => setEditData({ ...editData, nutritionContent: e.target.value })}\n                      rows={6}\n                      placeholder=\"Volledige voedingswaarden tekst...\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <h2 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-8\">\n                    {product.ingredientsTitle || \"Ingrediënten & Voedingswaarden\"}\n                  </h2>\n                  \n                  <div className=\"space-y-6\">\n                    <div className=\"text-gray-600 dark:text-gray-300 whitespace-pre-line\">\n                      {product.ingredientsContent || getDefaultIngredientsContent(product.name)}\n                    </div>\n                    <div className=\"text-gray-600 dark:text-gray-300 whitespace-pre-line\">\n                      {product.nutritionContent || getDefaultNutritionContent()}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n\n            {/* Story */}\n            <div>\n              {isEditing && isAdmin ? (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Verhaal Titel</label>\n                    <Input\n                      value={editData.storyTitle || \"Verhaal: De Hamburgervijver en de Ziel van de Kombucha\"}\n                      onChange={(e) => setEditData({ ...editData, storyTitle: e.target.value })}\n                      placeholder=\"Verhaal titel...\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Verhaal Content</label>\n                    <Textarea\n                      value={editData.storyContent || getDefaultStoryContent(product.name)}\n                      onChange={(e) => setEditData({ ...editData, storyContent: e.target.value })}\n                      rows={12}\n                      placeholder=\"Het volledige verhaal...\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <h2 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-8\">\n                    {product.storyTitle || \"Verhaal: De Hamburgervijver en de Ziel van de Kombucha\"}\n                  </h2>\n                  \n                  <div className=\"space-y-6 text-gray-600 dark:text-gray-300 leading-relaxed whitespace-pre-line\">\n                    {product.storyContent || getDefaultStoryContent(product.name)}\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Related Products */}\n      {otherProducts.length > 0 && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <h2 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-8 text-center\">\n            Andere Producten\n          </h2>\n          <div className=\"grid grid-cols-1 gap-12\">\n            {otherProducts.slice(0, 3).map((otherProduct) => (\n              <div key={otherProduct.id} className=\"w-full max-w-none\">\n                <ProductCard product={otherProduct} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":27833},"client/src/pages/products.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Edit3, Eye, Package } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { formatPrice } from \"@/lib/utils\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductsPage() {\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-amber-50 dark:from-gray-900 dark:to-gray-800 py-12\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"h-64 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-amber-50 dark:from-gray-900 dark:to-gray-800 py-12\">\n      <div className=\"max-w-6xl mx-auto px-4\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Terug naar Home\n              </Link>\n            </Button>\n            <h1 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white\">\n              Product Pagina's\n            </h1>\n          </div>\n          <Button variant=\"outline\" asChild>\n            <Link href=\"/admin/dashboard\">\n              <Edit3 className=\"w-4 h-4 mr-2\" />\n              Admin Panel\n            </Link>\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {products?.map((product) => (\n            <Card key={product.id} className=\"group hover:shadow-xl transition-all duration-300\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-start justify-between\">\n                  <CardTitle className=\"text-lg font-display\">\n                    {product.name}\n                  </CardTitle>\n                  <Badge variant=\"secondary\">\n                    ID: {product.id}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"aspect-video bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                  {product.imageUrl ? (\n                    <img\n                      src={product.imageUrl}\n                      alt={product.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full flex items-center justify-center text-gray-400\">\n                      Geen afbeelding\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-3\">\n                    {product.description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(product.price)}\n                    </span>\n                    <Badge variant={product.stock > 0 ? \"default\" : \"destructive\"}>\n                      {product.stock > 0 ? `${product.stock} op voorraad` : \"Uitverkocht\"}\n                    </Badge>\n                  </div>\n                  \n                  {product.badges && product.badges.length > 0 && (\n                    <div className=\"flex flex-wrap gap-1\">\n                      {product.badges.map((badge) => (\n                        <Badge key={badge} variant=\"outline\" className=\"text-xs\">\n                          {badge}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button asChild className=\"flex-1\" variant=\"outline\">\n                    <Link href={`/producten/${product.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '')}`}>\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Bekijk\n                    </Link>\n                  </Button>\n                  <Button asChild className=\"flex-1\">\n                    <Link href={`/producten/${product.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '')}`}>\n                      <Edit3 className=\"w-4 h-4 mr-2\" />\n                      Bewerken\n                    </Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {(!products || products.length === 0) && (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-400 mb-4\">\n              <Package className=\"w-16 h-16 mx-auto\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n              Geen producten gevonden\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              Voeg je eerste product toe via het admin panel\n            </p>\n            <Button asChild>\n              <Link href=\"/admin\">\n                Naar Admin Panel\n              </Link>\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5935},"client/src/pages/workshop-details.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Clock, ChefHat, Calendar, Mail, MapPin, Truck, Users } from \"lucide-react\";\n\n\nexport default function WorkshopDetails() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <div className=\"max-w-4xl mx-auto px-4 py-12\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Terug naar home\n            </Button>\n          </Link>\n          \n          <h1 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n            Chicken Shoyu Ramen\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n            Alles wat je wilt weten over ons Ramen proces, bereiding en ophalen\n          </p>\n        </div>\n\n        {/* Bereidingsproces Foto's */}\n        <Card className=\"mb-8 overflow-hidden\">\n          <div className=\"grid md:grid-cols-2 gap-0\">\n            <div className=\"relative h-64\">\n              <img \n                src=\"/images/IMG20250123160935.jpg\" \n                alt=\"Voorbereiding van verse kip voor de workshop bouillon\" \n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-end\">\n                <div className=\"p-4 text-white\">\n                  <h3 className=\"font-semibold text-lg\">Verse ingrediënten</h3>\n                  <p className=\"text-sm opacity-90\">Voorbereiding van verse kip</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"relative h-64\">\n              <img \n                src=\"/images/IMG20250123170544.jpg\" \n                alt=\"Het kookproces van de workshop bouillon in de keuken\" \n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-end\">\n                <div className=\"p-4 text-white\">\n                  <h3 className=\"font-semibold text-lg\">Traditionele bereiding</h3>\n                  <p className=\"text-sm opacity-90\">Uren lang sudderen voor rijke smaak</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Process Section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-3xl font-semibold text-gray-900 dark:text-white mb-6\">\n              Het bereidingsproces\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-3 flex items-center\">\n                  <Clock className=\"w-5 h-5 mr-2\" />\n                  Dag 1: Bouillon maken\n                </h3>\n                <p className=\"text-blue-800 dark:text-blue-200 text-sm\">\n                  We beginnen de avond van te voren met het maken van de bouillon. Kippenbotten, vlees, vel, poten, \n                  ui, gember en knoflook worden 24+ uur zachtjes gekookt voor die diepe, \n                  en collageen rijke smaak die onze workshop zo bijzonder maakt.\n                </p>\n              </div>\n              \n              <div className=\"bg-green-50 dark:bg-green-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-green-900 dark:text-green-100 mb-3 flex items-center\">\n                  <ChefHat className=\"w-5 h-5 mr-2\" />\n                  Dag 2: Verse bereiding\n                </h3>\n                <p className=\"text-green-800 dark:text-green-200 text-sm\">\n                  Op de dag van levering bereiden we alle toppings vers: gemarineerde eieren \n                  die 24 uur in onze speciale marinade hebben gelegen, gepaneerde kip, \n                  verse noedels en alle garnituren. Elke kom wordt op bestelling samengesteld.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-semibold text-purple-900 dark:text-purple-100 mb-4\">\n                Wat maakt onze workshop speciaal?\n              </h3>\n              <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                <ul className=\"space-y-2 text-purple-800 dark:text-purple-200\">\n                  <li>• <strong>24+ uur gekookte bouillon</strong> voor diepe en stevige smaak</li>\n                  <li>• <strong>Authentieke ingrediënten</strong> direct uit Japan</li>\n                  <li>• <strong>Verse noedels</strong> - niet uit een pakje</li>\n                  <li>• <strong>24h gemarineerde eieren</strong> - perfecte textuur</li>\n                </ul>\n                <ul className=\"space-y-2 text-purple-800 dark:text-purple-200\">\n                  <li>• <strong>Handgesneden groenten</strong> - altijd vers</li>\n                  <li>• <strong>Geheime tare saus</strong> - ons eigen recept</li>\n                  <li>• <strong>Traditionele methoden</strong> - zoals in Japan</li>\n                  <li>• <strong>Kleine batches</strong> - kwaliteit boven kwantiteit</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* What you get section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-3xl font-semibold text-gray-900 dark:text-white mb-6\">\n              Wat krijg je precies?\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  In elke kom Ramen:\n                </h3>\n                <ul className=\"space-y-3 text-gray-600 dark:text-gray-300\">\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Verse Ramen noedels</strong> - Gemaakt door Damian met de hand.\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Rijke chicken shoyu bouillon</strong> - 24+ uur getrokken, vol van smaak\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Ajitsuke tamago</strong> - Perfect gemarineerde eieren met romige dooier\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Gepaneerde kip</strong> - Mals, sappig en vol van smaak\n                    </div>\n                  </li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  Plus alle garnituren:\n                </h3>\n                <ul className=\"space-y-3 text-gray-600 dark:text-gray-300\">\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Verse lente-uitjes</strong> - Voor die perfecte bite en frisheid\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Nori zeewier</strong> - Authentieke Japanse umami\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Menma bamboe & andere groenten</strong> - Traditionele knapperige toppings\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Speciale tare saus</strong> - Ons geheime recept voor de perfecte smaak\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Pickup process */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-3xl font-semibold text-gray-900 dark:text-white mb-6\">\n              Hoe werkt het ophalen?\n            </h2>\n            \n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Calendar className=\"w-8 h-8 text-purple-600 dark:text-purple-300\" />\n                </div>\n                <h3 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-3\">1. Reserveren</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Kies een vrijdag en bestel minimaal 4 dagen van tevoren via onze website. (mits nog beschikbaar) \n                  We hebben beperkte plekken per sessie.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Mail className=\"w-8 h-8 text-purple-600 dark:text-purple-300\" />\n                </div>\n                <h3 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-3\">2. Bevestiging</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Je ontvangt een bevestiging met het exacte ophaaltijdstip, locatie en \n                  eventuele bijzondere instructies.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <MapPin className=\"w-8 h-8 text-purple-600 dark:text-purple-300\" />\n                </div>\n                <h3 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-3\">3. Ophalen</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Haal je bestelling af op de afgesproken tijd. Alles is warm verpakt \n                  en klaar om mee te nemen en direct te eten.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-yellow-900 dark:text-yellow-100 mb-3 flex items-center\">\n                  <Truck className=\"w-5 h-5 mr-2\" />\n                  Bezorging helaas nog niet mogelijk\n                </h3>\n                <p className=\"text-yellow-800 dark:text-yellow-200 text-sm\">\n                  Wij bezorgen helaas niet, wij willen ervoor zorgen dat je Ramen ervaring authentiek blijft. En het mensenlijk contact behouden.\n                </p>\n              </div>\n              \n              <div className=\"bg-orange-50 dark:bg-orange-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-orange-900 dark:text-orange-100 mb-3 flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Groepsbestellingen\n                </h3>\n                <p className=\"text-orange-800 dark:text-orange-200 text-sm\">\n                  Bij 6+ personen wordt je bestelling automatisch bevestigd. \n                  Perfect voor familie-avonden of vriendendiner! Maximaal 12 personen per sessie.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Important info */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"bg-red-50 dark:bg-red-900/20 p-6 rounded-lg\">\n              <h3 className=\"font-semibold text-red-900 dark:text-red-100 mb-4 flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Belangrijk om te weten:\n              </h3>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <ul className=\"text-red-800 dark:text-red-200 text-sm space-y-2\">\n                  <li>• Alleen beschikbaar op vrijdagen</li>\n                  <li>• Maximaal 12 personen per sessie</li>\n                  <li>• Minimaal 2 dagen van tevoren bestellen</li>\n                </ul>\n                <ul className=\"text-red-800 dark:text-red-200 text-sm space-y-2\">\n                  <li>• Bij annulering binnen 24 uur geen terugbetaling</li>\n                  <li>• Elke kom wordt vers bereid volgens Japanse traditie</li>\n                  <li>• Prijs: €12,50 per persoon (bezorging +€1)</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* CTA Section */}\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n              Klaar om te bestellen?\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n              Ga terug naar de homepage en reserveer je plek!\n            </p>\n            <Link href=\"/\">\n              <Button size=\"lg\" className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\">\n                Naar bestelpagina\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14768},"client/src/pages/workshops.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, Users, MapPin, Star, CheckCircle2 } from \"lucide-react\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport type { Product } from \"@shared/schema\";\n\nconst workshopRegistrationSchema = z.object({\n  customerName: z.string().min(1, \"Naam is verplicht\"),\n  customerEmail: z.string().email(\"Ongeldig email adres\"),\n  customerPhone: z.string().min(1, \"Telefoon is verplicht\"),\n  notes: z.string().optional(),\n});\n\ntype WorkshopRegistrationForm = z.infer<typeof workshopRegistrationSchema>;\n\ninterface WorkshopCardProps {\n  workshop: Product;\n  onRegister: (workshop: Product) => void;\n}\n\nfunction WorkshopCard({ workshop, onRegister }: WorkshopCardProps) {\n  const maxCapacity = 12;\n  const registeredCount = maxCapacity - workshop.stock;\n  const isFullyBooked = workshop.stock === 0;\n  const spotsLeft = workshop.stock;\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow duration-300\">\n      <div className=\"relative\">\n        <img\n          src={workshop.imageUrl || \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"}\n          alt={workshop.name}\n          className=\"w-full h-48 object-cover\"\n        />\n        <div className=\"absolute top-4 right-4\">\n          <Badge variant={isFullyBooked ? \"destructive\" : \"secondary\"} className=\"bg-white/90 text-gray-800\">\n            {isFullyBooked ? \"Volgeboekt\" : `${spotsLeft} plekken over`}\n          </Badge>\n        </div>\n      </div>\n      \n      <CardHeader>\n        <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n          {workshop.name}\n        </CardTitle>\n        <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400\">\n          <div className=\"flex items-center gap-1\">\n            <Users className=\"w-4 h-4\" />\n            <span>{registeredCount}/{maxCapacity}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"w-4 h-4\" />\n            <span>Zaterdagen</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span>3 uur</span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <p className=\"text-gray-700 dark:text-gray-300 mb-4 leading-relaxed\">\n          {workshop.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            €{parseFloat(workshop.price.toString()).toFixed(2)}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n            <span className=\"ml-1 text-sm text-gray-600 dark:text-gray-400\">(5.0)</span>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n            <span>Alle materialen inbegrepen</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n            <span>Eigen SCOBY mee naar huis</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n            <span>Receptenboek inbegrepen</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <MapPin className=\"w-4 h-4 text-blue-500\" />\n            <span>Star Numanstraat, Groningen</span>\n          </div>\n        </div>\n        \n        <Button\n          onClick={() => onRegister(workshop)}\n          disabled={isFullyBooked}\n          className={`w-full ${\n            isFullyBooked\n              ? \"bg-gray-400 cursor-not-allowed\"\n              : \"bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800\"\n          } text-white font-semibold py-2 px-4 rounded-lg transition-all duration-300`}\n        >\n          {isFullyBooked ? \"Volgeboekt\" : \"Aanmelden\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface RegistrationModalProps {\n  workshop: Product | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction RegistrationModal({ workshop, isOpen, onClose }: RegistrationModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<WorkshopRegistrationForm>({\n    resolver: zodResolver(workshopRegistrationSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      notes: \"\",\n    },\n  });\n\n  const registrationMutation = useMutation({\n    mutationFn: async (data: WorkshopRegistrationForm) => {\n      // Register for workshop by creating an order\n      const orderData = {\n        customerName: data.customerName,\n        customerEmail: data.customerEmail,\n        customerPhone: data.customerPhone,\n        productId: workshop!.id,\n        quantity: 1,\n        totalAmount: parseFloat(workshop!.price.toString()),\n        notes: data.notes || \"\",\n        status: \"confirmed\",\n        deliveryMethod: \"pickup\"\n      };\n      \n      // Create order and reduce stock\n      await apiRequest(\"POST\", \"/api/orders\", orderData);\n      \n      // Update product stock\n      await apiRequest(\"PATCH\", `/api/products/${workshop!.id}`, {\n        stock: Math.max(0, workshop!.stock - 1)\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Aanmelding succesvol!\",\n        description: \"Je bent aangemeld voor de workshop. Je ontvangt een bevestigingsmail.\",\n      });\n      form.reset();\n      onClose();\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: error.message || \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: WorkshopRegistrationForm) => {\n    registrationMutation.mutate(data);\n  };\n\n  if (!isOpen || !workshop) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Aanmelden voor {workshop.name}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"customerName\" className=\"block text-sm font-medium mb-1\">\n                Naam *\n              </label>\n              <Input\n                id=\"customerName\"\n                {...form.register(\"customerName\")}\n                placeholder=\"Je volledige naam\"\n              />\n              {form.formState.errors.customerName && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {form.formState.errors.customerName.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"customerEmail\" className=\"block text-sm font-medium mb-1\">\n                Email *\n              </label>\n              <Input\n                id=\"customerEmail\"\n                type=\"email\"\n                {...form.register(\"customerEmail\")}\n                placeholder=\"je@email.nl\"\n              />\n              {form.formState.errors.customerEmail && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {form.formState.errors.customerEmail.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"customerPhone\" className=\"block text-sm font-medium mb-1\">\n                Telefoonnummer *\n              </label>\n              <Input\n                id=\"customerPhone\"\n                type=\"tel\"\n                {...form.register(\"customerPhone\")}\n                placeholder=\"06-12345678\"\n              />\n              {form.formState.errors.customerPhone && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {form.formState.errors.customerPhone.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"notes\" className=\"block text-sm font-medium mb-1\">\n                Opmerkingen (optioneel)\n              </label>\n              <Textarea\n                id=\"notes\"\n                {...form.register(\"notes\")}\n                placeholder=\"Eventuele vragen of opmerkingen...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Annuleren\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={registrationMutation.isPending}\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              >\n                {registrationMutation.isPending ? \"Aanmelden...\" : \"Aanmelden\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function WorkshopsPage() {\n  const [selectedWorkshop, setSelectedWorkshop] = useState<Product | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const workshops = products.filter(product => product.category === \"workshop\");\n\n  const handleRegister = (workshop: Product) => {\n    setSelectedWorkshop(workshop);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedWorkshop(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <Header />\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-green-600 border-t-transparent rounded-full\" />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n            Workshops\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto\">\n            Leer de kunst van brouwen in onze hands-on workshops. \n            Perfect voor beginners en ervaren brouwers die hun kennis willen uitbreiden.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          {workshops.map((workshop) => (\n            <WorkshopCard\n              key={workshop.id}\n              workshop={workshop}\n              onRegister={handleRegister}\n            />\n          ))}\n        </div>\n\n        {workshops.length === 0 && (\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-semibold text-gray-600 dark:text-gray-400 mb-4\">\n              Geen workshops beschikbaar\n            </h2>\n            <p className=\"text-gray-500 dark:text-gray-500\">\n              Er zijn momenteel geen workshops gepland. Kom later terug voor nieuwe data!\n            </p>\n          </div>\n        )}\n      </main>\n\n      <RegistrationModal\n        workshop={selectedWorkshop}\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":12651},"backup/syrup-website/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport ProductsPage from \"@/pages/products\";\nimport ChickenShoyuRamen from \"@/pages/chicken-shoyu-ramen\";\nimport RamenDetails from \"@/pages/ramen-details\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={ProductsPage} />\n      <Route path=\"/producten/:slug\" component={ProductDetail} />\n      <Route path=\"/chicken-shoyu-ramen\" component={ChickenShoyuRamen} />\n      <Route path=\"/ramen-details\" component={RamenDetails} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1508},"backup/syrup-website/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap');\n\n@property --syrup-hue {\n  syntax: \"<number>\";\n  initial-value: 260;\n  inherits: true;\n}\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 20 14.3% 4.1%;\n  --muted: 60 4.8% 95.9%;\n  --muted-foreground: 25 5.3% 44.7%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 20 14.3% 4.1%;\n  --card: 0 0% 100%;\n  --card-foreground: 20 14.3% 4.1%;\n  --border: 20 5.9% 90%;\n  --input: 20 5.9% 90%;\n  --primary: 262 83% 58%;\n  --primary-foreground: 210 40% 98%;\n  --secondary: 60 4.8% 95.9%;\n  --secondary-foreground: 24 9.8% 10%;\n  --accent: 60 4.8% 95.9%;\n  --accent-foreground: 24 9.8% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --ring: 20 14.3% 4.1%;\n  --radius: 0.5rem;\n  \n  /* Custom syrup colors */\n  --syrup-accent: oklch(65% 0.25 var(--syrup-hue));\n  --elderflower-accent: oklch(75% 0.15 30);\n  --rose-accent: oklch(70% 0.20 340);\n}\n\n.dark {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 98%;\n  --muted: 240 3.7% 15.9%;\n  --muted-foreground: 240 5% 64.9%;\n  --popover: 240 10% 3.9%;\n  --popover-foreground: 0 0% 98%;\n  --card: 240 10% 3.9%;\n  --card-foreground: 0 0% 98%;\n  --border: 240 3.7% 15.9%;\n  --input: 240 3.7% 15.9%;\n  --primary: 262 83% 58%;\n  --primary-foreground: 210 40% 98%;\n  --secondary: 240 3.7% 15.9%;\n  --secondary-foreground: 0 0% 98%;\n  --accent: 240 3.7% 15.9%;\n  --accent-foreground: 0 0% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --ring: 240 4.9% 83.9%;\n  --radius: 0.5rem;\n  \n  --syrup-hue: 200;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n  \n  .font-display {\n    font-family: 'Playfair Display', serif;\n  }\n}\n\n@layer components {\n  .parallax-container {\n    overflow: hidden;\n  }\n\n  .parallax-element {\n    transform: translateZ(0);\n    will-change: transform;\n  }\n\n  .glass-effect {\n    backdrop-filter: blur(20px);\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out forwards;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out forwards;\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(40px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n/* Scroll-driven animations for modern browsers */\n@supports (animation-timeline: view()) {\n  .scroll-animate {\n    animation: parallax linear;\n    animation-timeline: view();\n    animation-range: entry 0% cover 100%;\n  }\n}\n\n@keyframes parallax {\n  to {\n    transform: translateY(-50px);\n  }\n}\n\n/* View transitions for modern browsers */\n@supports (view-transition-name: none) {\n  .view-transition-hero {\n    view-transition-name: hero;\n  }\n}\n","size_bytes":3336},"backup/syrup-website/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"backup/syrup-website/client/src/components/cart.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ShoppingCart, X, Plus, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { formatPrice } from \"@/lib/utils\";\nimport type { Product } from \"@shared/schema\";\n\ninterface CartItem {\n  product: Product;\n  quantity: number;\n}\n\ninterface CartProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\n// Simple cart state management (in a real app, you'd use Context or a state management library)\nlet cartItems: CartItem[] = [];\nlet cartListeners: (() => void)[] = [];\n\nexport const cart = {\n  getItems: () => cartItems,\n  addItem: (product: Product) => {\n    const existingItem = cartItems.find(item => item.product.id === product.id);\n    if (existingItem) {\n      // Maximum 1 per person - don't increase if already in cart\n      return;\n    }\n    cartItems.push({ product, quantity: 1 });\n    cartListeners.forEach(listener => listener());\n  },\n  removeItem: (productId: number) => {\n    cartItems = cartItems.filter(item => item.product.id !== productId);\n    cartListeners.forEach(listener => listener());\n  },\n  updateQuantity: (productId: number, quantity: number) => {\n    // For siroop products, max quantity is 1\n    if (quantity > 1) quantity = 1;\n    if (quantity <= 0) {\n      cart.removeItem(productId);\n      return;\n    }\n    const item = cartItems.find(item => item.product.id === productId);\n    if (item) {\n      item.quantity = quantity;\n      cartListeners.forEach(listener => listener());\n    }\n  },\n  clear: () => {\n    cartItems = [];\n    cartListeners.forEach(listener => listener());\n  },\n  subscribe: (listener: () => void) => {\n    cartListeners.push(listener);\n    return () => {\n      cartListeners = cartListeners.filter(l => l !== listener);\n    };\n  },\n  getTotalPrice: () => {\n    return cartItems.reduce((total, item) => total + (parseFloat(item.product.price) * item.quantity), 0);\n  },\n  getItemCount: () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  }\n};\n\nexport function useCart() {\n  const [, forceUpdate] = useState({});\n  \n  useEffect(() => {\n    const unsubscribe = cart.subscribe(() => {\n      forceUpdate({});\n    });\n    return unsubscribe;\n  }, []);\n\n  return {\n    items: cart.getItems(),\n    addItem: cart.addItem,\n    removeItem: cart.removeItem,\n    updateQuantity: cart.updateQuantity,\n    clear: cart.clear,\n    totalPrice: cart.getTotalPrice(),\n    itemCount: cart.getItemCount()\n  };\n}\n\nexport function Cart({ isOpen, onClose }: CartProps) {\n  const { items, removeItem, updateQuantity, totalPrice, clear } = useCart();\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md max-h-[80vh] overflow-hidden\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"w-5 h-5\" />\n            Winkelwagen\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"flex flex-col h-full\">\n          {items.length === 0 ? (\n            <div className=\"flex-1 flex items-center justify-center text-center py-8\">\n              <div>\n                <ShoppingCart className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">Je winkelwagen is leeg</p>\n                <p className=\"text-sm text-gray-400 mt-2\">Voeg producten toe om te beginnen</p>\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex-1 overflow-y-auto space-y-4\">\n                {items.map((item) => (\n                  <div key={item.product.id} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                    <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                      {item.product.imageUrl ? (\n                        <img\n                          src={item.product.imageUrl}\n                          alt={item.product.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                        {item.product.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {formatPrice(item.product.price)}\n                      </p>\n                      <Badge variant=\"secondary\" className=\"mt-1\">\n                        Max 1 per persoon\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.product.id, item.quantity - 1)}\n                        disabled={item.quantity <= 1}\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span className=\"w-8 text-center font-medium\">{item.quantity}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.product.id, item.quantity + 1)}\n                        disabled={item.quantity >= 1} // Max 1 per person\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.product.id)}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <Separator className=\"my-4\" />\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center text-lg font-semibold\">\n                  <span>Totaal:</span>\n                  <span>{formatPrice(totalPrice.toFixed(2))}</span>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" onClick={clear} className=\"flex-1\">\n                    Leegmaken\n                  </Button>\n                  <Button className=\"flex-1\" onClick={onClose}>\n                    Afrekenen\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport function CartButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { itemCount } = useCart();\n\n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        onClick={() => setIsOpen(true)}\n        className=\"relative\"\n      >\n        <ShoppingCart className=\"w-4 h-4\" />\n        {itemCount > 0 && (\n          <Badge \n            variant=\"destructive\" \n            className=\"absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n          >\n            {itemCount}\n          </Badge>\n        )}\n      </Button>\n      <Cart isOpen={isOpen} onClose={() => setIsOpen(false)} />\n    </>\n  );\n}","size_bytes":8017},"backup/syrup-website/client/src/components/contact-section.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, Phone, Mail, Clock, Send, Instagram } from \"lucide-react\";\n\nconst contactSchema = z.object({\n  firstName: z.string().min(1, \"Voornaam is verplicht\"),\n  lastName: z.string().min(1, \"Achternaam is verplicht\"),\n  email: z.string().email(\"Ongeldig email adres\"),\n  subject: z.string().min(1, \"Selecteer een onderwerp\"),\n  message: z.string().min(10, \"Bericht moet minimaal 10 karakters bevatten\"),\n});\n\ntype ContactForm = z.infer<typeof contactSchema>;\n\nexport function ContactSection() {\n  const { toast } = useToast();\n\n  const form = useForm<ContactForm>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactForm) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bericht verzonden!\",\n        description: \"We nemen zo snel mogelijk contact met je op.\",\n      });\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactForm) => {\n    contactMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Contact & Locatie\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400\">\n            Vragen over onze producten? Neem contact op of kom langs in Groningen.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-12\">\n          {/* Contact Info */}\n          <div className=\"lg:col-span-1 space-y-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  Digimaatwerk Siroperij\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <MapPin className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Adres</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        Star Numanstraat<br/>9717JE Groningen\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Phone className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Telefoon</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">+31 6 12345678</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Mail className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Email</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">info@digimaatwerk-siroop.nl</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Clock className=\"text-purple-500 mt-1 w-5 h-5\" />\n                    <div>\n                      <p className=\"text-gray-900 dark:text-white font-medium\">Openingstijden</p>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        Ma-Vr: 09:00-17:00<br/>Op afspraak\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Social Links */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Volg ons</h4>\n                <div className=\"flex space-x-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-600 border-0 text-white hover:from-purple-600 hover:to-purple-700\"\n                    onClick={() => window.open('https://www.instagram.com/pluk_en_poot/', '_blank')}\n                  >\n                    <Instagram className=\"w-4 h-4\" />\n                  </Button>\n\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardContent className=\"p-8\">\n                <h3 className=\"font-display text-2xl font-semibold text-gray-900 dark:text-white mb-6\">\n                  Stuur ons een bericht\n                </h3>\n                \n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"firstName\">Voornaam</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...form.register(\"firstName\")}\n                        className=\"mt-1\"\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Achternaam</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...form.register(\"lastName\")}\n                        className=\"mt-1\"\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...form.register(\"email\")}\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {form.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"subject\">Onderwerp</Label>\n                    <Select onValueChange={(value) => form.setValue(\"subject\", value)}>\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue placeholder=\"Kies een onderwerp\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"algemeen\">Algemene vraag</SelectItem>\n                        <SelectItem value=\"product\">Product informatie</SelectItem>\n                        <SelectItem value=\"ramen\">Ramen bestelling</SelectItem>\n                        <SelectItem value=\"bulk\">Bulk bestelling</SelectItem>\n                        <SelectItem value=\"samenwerking\">Samenwerking</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {form.formState.errors.subject && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {form.formState.errors.subject.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"message\">Bericht</Label>\n                    <Textarea\n                      id=\"message\"\n                      {...form.register(\"message\")}\n                      placeholder=\"Vertel ons over je vraag of opmerking...\"\n                      className=\"mt-1\"\n                      rows={5}\n                    />\n                    {form.formState.errors.message && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {form.formState.errors.message.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    disabled={contactMutation.isPending}\n                    className=\"w-full bg-gradient-to-r from-purple-600 to-purple-700 text-white py-4 rounded-xl font-semibold hover:from-purple-700 hover:to-purple-800 transition-all duration-300 transform hover:scale-105 shadow-lg\"\n                  >\n                    <Send className=\"mr-2 w-4 h-4\" />\n                    {contactMutation.isPending ? \"Bezig...\" : \"Verzend Bericht\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n            \n\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10266},"backup/syrup-website/client/src/components/footer.tsx":{"content":"import { Leaf, Instagram, Mail, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Footer() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <footer className=\"bg-gray-900 dark:bg-gray-950 text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <button \n              onClick={() => window.location.href = \"/\"}\n              className=\"flex items-center space-x-3 mb-6 hover:opacity-80 transition-opacity\"\n            >\n              <img \n                src=\"/images/logo.png\" \n                alt=\"Pluk & Poot Logo\" \n                className=\"w-12 h-12 rounded-full object-cover\"\n              />\n              <span className=\"font-display font-bold text-2xl\">Pluk & Poot</span>\n            </button>\n            \n            <p className=\"text-gray-400 mb-6 max-w-md leading-relaxed\">\n              Handgemaakte ambachtelijke siroop uit het hart van Groningen. \n              Met liefde bereid door Elfie en mij, van lokale ingrediënten naar jouw glas.\n            </p>\n            \n            <div className=\"flex space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-10 h-10 bg-gray-800 rounded-full hover:bg-purple-600 transition-colors\"\n                onClick={() => window.open('https://www.instagram.com/pluk_en_poot/', '_blank')}\n              >\n                <Instagram className=\"w-4 h-4\" />\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-10 h-10 bg-gray-800 rounded-full hover:bg-purple-600 transition-colors\"\n              >\n                <Mail className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Producten</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"producten\")}\n                  className=\"hover:text-yellow-400 transition-colors\"\n                >\n                  Vlierbloesem Siroop\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"producten\")}\n                  className=\"hover:text-pink-400 transition-colors\"\n                >\n                  Rozen Siroop\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"ramen\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Ramen Pre-order\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"producten\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Seizoensspecials\n                </button>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Informatie</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"verhaal\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Over ons\n                </button>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-purple-400 transition-colors\">\n                  Bestelvoorwaarden\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-purple-400 transition-colors\">\n                  Privacy\n                </a>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection(\"contact\")}\n                  className=\"hover:text-purple-400 transition-colors\"\n                >\n                  Contact\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-gray-400 text-sm\">\n            © 2025 Pluk & Poot onderdeel van Digimaatwerk. Handgemaakt in Groningen, nabij de iconische Hamburgervijver.\n          </p>\n          <p className=\"text-gray-500 text-xs mt-4 md:mt-0 flex items-center\">\n            <Heart className=\"w-3 h-3 mr-1\" />\n            Met trots gemaakt door Team Digimaatwerk\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4957},"backup/syrup-website/client/src/components/header.tsx":{"content":"import { useTheme } from \"./theme-provider\";\nimport { Moon, Sun, Menu, Leaf, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { CartButton } from \"./shopping-cart\";\n\nexport function Header() {\n  const { theme, toggleTheme } = useTheme();\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return localStorage.getItem('adminToken') !== null;\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('adminToken');\n    window.location.href = '/';\n  };\n\n  const scrollToSection = (sectionId: string) => {\n    // If not on home page, navigate to home first\n    if (window.location.pathname !== \"/\") {\n      window.location.href = `/#${sectionId}`;\n      return;\n    }\n    \n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 backdrop-blur-lg bg-white/90 dark:bg-gray-900/90 border-b border-white/20\">\n      <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <button \n            onClick={() => window.location.href = \"/\"}\n            className=\"flex items-center space-x-3 hover:opacity-80 transition-opacity\"\n          >\n            <img \n              src=\"/images/logo.png\" \n              alt=\"Pluk & Poot Logo\" \n              className=\"w-10 h-10 rounded-full object-cover\"\n            />\n            <span className=\"font-display font-semibold text-xl text-purple-600 dark:text-purple-400\">\n              Pluk & Poot\n            </span>\n          </button>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <button\n              onClick={() => scrollToSection(\"verhaal\")}\n              className=\"text-gray-700 dark:text-gray-300 hover:text-purple-600 dark:hover:text-purple-400 transition-colors\"\n            >\n              Ons Verhaal\n            </button>\n            <button\n              onClick={() => scrollToSection(\"producten\")}\n              className=\"text-gray-700 dark:text-gray-300 hover:text-purple-600 dark:hover:text-purple-400 transition-colors\"\n            >\n              Producten\n            </button>\n            <button\n              onClick={() => scrollToSection(\"ramen\")}\n              className=\"text-gray-700 dark:text-gray-300 hover:text-purple-600 dark:hover:text-purple-400 transition-colors\"\n            >\n              Ramen Pre-order\n            </button>\n            <button\n              onClick={() => scrollToSection(\"contact\")}\n              className=\"text-gray-700 dark:text-gray-300 hover:text-purple-600 dark:hover:text-purple-400 transition-colors\"\n            >\n              Contact\n            </button>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <CartButton />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"rounded-lg\"\n            >\n              {theme === \"dark\" ? (\n                <Sun className=\"h-5 w-5\" />\n              ) : (\n                <Moon className=\"h-5 w-5\" />\n              )}\n            </Button>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n}\n","size_bytes":3419},"backup/syrup-website/client/src/components/hero-section.tsx":{"content":"import { ChevronDown, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function HeroSection() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-fixed\"\n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')\"\n        }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-br from-black/60 via-black/40 to-transparent\" />\n      \n      <div className=\"relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-4xl mx-auto\">\n        <div className=\"animate-fade-in\">\n          <h1 className=\"font-display text-5xl sm:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight\">\n            Ambachtelijke Siroop\n            <span className=\"block text-yellow-300\">uit Groningen</span>\n          </h1>\n          \n          <div className=\"inline-flex items-center bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-full px-6 py-3 mb-8 border border-white/20\">\n            <Heart className=\"text-yellow-300 mr-2 w-5 h-5\" />\n            <span className=\"text-white font-medium\">Met liefde gemaakt door Elfie</span>\n          </div>\n          \n          <p className=\"text-xl text-gray-200 mb-8 max-w-2xl mx-auto leading-relaxed\">\n            Van verse vlierbloesem uit de Hamburgervijver tot rozenblaadjes uit onze eigen tuin. \n            Elke fles vertelt een verhaal van ambacht en passie.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button\n              onClick={() => scrollToSection(\"producten\")}\n              className=\"bg-gradient-to-r from-purple-600 to-purple-700 text-white px-8 py-4 rounded-xl font-semibold hover:from-purple-700 hover:to-purple-800 transition-all duration-300 transform hover:scale-105 shadow-lg\"\n            >\n              Bekijk Producten\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => scrollToSection(\"verhaal\")}\n              className=\"border-2 border-white text-white px-8 py-4 rounded-xl font-semibold hover:bg-white hover:text-gray-900 transition-all duration-300\"\n            >\n              Ons Verhaal\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Scroll indicator */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce\">\n        <ChevronDown className=\"text-white text-2xl\" />\n      </div>\n    </section>\n  );\n}\n","size_bytes":2880},"backup/syrup-website/client/src/components/product-card.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StockIndicator } from \"./stock-indicator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product } from \"@shared/schema\";\n\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport function ProductCard({ product }: ProductCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const orderMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/orders/syrup\", {\n        customerName: \"Demo Customer\",\n        customerEmail: \"demo@example.com\",\n        customerPhone: \"06-12345678\",\n        productId: product.id,\n        quantity: 1,\n        totalAmount: product.price,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bestelling geplaatst!\",\n        description: `${product.name} is toegevoegd aan je bestelling.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const isElderflower = product.name.includes(\"Vlierbloesem\");\n  const isRose = product.name.includes(\"Rozen\");\n  \n  const gradientClass = isElderflower \n    ? \"from-yellow-50 to-yellow-100 dark:from-gray-700 dark:to-gray-600\"\n    : isRose \n    ? \"from-pink-50 to-pink-100 dark:from-gray-700 dark:to-gray-600\"\n    : \"from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600\";\n    \n  const badgeClass = isElderflower\n    ? \"bg-yellow-200 dark:bg-yellow-600 text-yellow-800 dark:text-yellow-100\"\n    : isRose\n    ? \"bg-pink-200 dark:bg-pink-600 text-pink-800 dark:text-pink-100\"\n    : \"bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-100\";\n    \n  const priceClass = isElderflower\n    ? \"text-yellow-600 dark:text-yellow-400\"\n    : isRose\n    ? \"text-pink-600 dark:text-pink-400\"\n    : \"text-purple-600 dark:text-purple-400\";\n    \n  const buttonClass = isElderflower\n    ? \"bg-yellow-600 hover:bg-yellow-700\"\n    : isRose\n    ? \"bg-pink-600 hover:bg-pink-700\"\n    : \"bg-purple-600 hover:bg-purple-700\";\n\n  return (\n    <div className=\"group h-full\">\n      <div className={`bg-gradient-to-br ${gradientClass} rounded-2xl p-8 transition-all duration-500 hover:shadow-2xl hover:scale-105 h-full flex flex-col`}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n          <div className=\"order-2 md:order-1\">\n            <Badge className={`${badgeClass} mb-4`}>\n              {isElderflower ? \"Seizoensspecialiteit\" : isRose ? \"Huistuin Delicatesse\" : \"Premium\"}\n            </Badge>\n            \n            <h3 className=\"font-display text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n              {product.name}\n            </h3>\n            \n            <p className=\"text-gray-600 dark:text-gray-300 mb-6 leading-relaxed\">\n              {product.description}\n            </p>\n            \n            <div className=\"space-y-4\">\n              <StockIndicator \n                current={product.stock} \n                max={product.maxStock}\n                productName={product.name}\n              />\n\n              <div className=\"flex items-center justify-between\">\n                <span className={`font-display text-3xl font-bold ${priceClass}`}>\n                  €{product.price}\n                </span>\n                <Button\n                  onClick={() => {\n                    if (product.category === \"ramen\") {\n                      // Voor ramen: scroll naar booking sectie\n                      const ramenSection = document.getElementById('ramen');\n                      if (ramenSection) {\n                        ramenSection.scrollIntoView({ behavior: 'smooth' });\n                      }\n                    } else {\n                      // Voor siroopproducten: ga naar detail pagina\n                      const slug = product.name === \"Vlierbloesem Siroop\" ? \"vlierbloesem-siroop\" \n                        : product.name === \"Rozen Siroop\" ? \"rozen-siroop\"\n                        : product.id.toString();\n                      window.location.href = `/producten/${slug}`;\n                    }\n                  }}\n                  disabled={product.stock === 0}\n                  className={`${buttonClass} text-white px-6 py-3 rounded-xl font-semibold transition-colors transform hover:scale-105`}\n                >\n                  {product.stock === 0 ? \"Uitverkocht\" : product.category === \"ramen\" ? \"Boek Nu\" : \"Bekijk Product\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"order-1 md:order-2\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <img \n                src={isElderflower ? \"/images/normaal_voorkant.png\" : isRose ? \"/images/rozen_voorkant.png\" : \"/images/voorkant-siroop.png\"} \n                alt={`${product.name} voorkant`} \n                className=\"w-full h-auto rounded-xl shadow-lg transform group-hover:scale-105 transition-transform duration-500\" \n              />\n              <img \n                src={isElderflower ? \"/images/normaal_achterkant.png\" : isRose ? \"/images/rozen_achterkant.png\" : \"/images/achterkant-siroop.png\"} \n                alt={`${product.name} achterkant`} \n                className=\"w-full h-auto rounded-xl shadow-lg transform group-hover:scale-105 transition-transform duration-500\" \n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5720},"backup/syrup-website/client/src/components/product-showcase.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ProductCard } from \"./product-card\";\nimport type { Product } from \"@shared/schema\";\n\nexport function ProductShowcase() {\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const syrupProducts = products?.filter(p => p.category === \"syrup\") || [];\n\n  if (isLoading) {\n    return (\n      <section id=\"producten\" className=\"py-20 bg-white dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <div className=\"h-12 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mx-auto mb-4\" />\n            <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mx-auto\" />\n          </div>\n          <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16\">\n            {[1, 2].map(i => (\n              <div key={i} className=\"bg-gray-200 dark:bg-gray-700 rounded-2xl h-96 animate-pulse\" />\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"producten\" className=\"py-20 bg-white dark:bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Onze Collectie\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n            Elk product wordt met zorg bereid met ingrediënten uit en rond Groningen. \n            Beperkte voorraad, op aanvraag of gewoon zomaar.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16 items-stretch\">\n          {syrupProducts.map(product => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n        </div>\n\n\n      </div>\n    </section>\n  );\n}\n","size_bytes":1903},"backup/syrup-website/client/src/components/ramen-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronLeft, ChevronRight, Calendar, Users, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { RamenOrder } from \"@shared/schema\";\n\ninterface CalendarDay {\n  date: Date;\n  available: number;\n  total: number;\n  isSelectable: boolean;\n  status: 'available' | 'pending' | 'confirmed' | 'full';\n  ordersCount: number;\n}\n\ninterface RamenCalendarProps {\n  onDateSelect: (date: Date) => void;\n  selectedDate?: Date;\n}\n\nexport function RamenCalendar({ onDateSelect, selectedDate }: RamenCalendarProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  // Haal echte ramen orders op van de server\n  const { data: ramenOrders = [] } = useQuery<RamenOrder[]>({\n    queryKey: [\"/api/ramen-orders\"],\n  });\n\n  // Bereken beschikbaarheid en status op basis van echte orders\n  const getDateInfo = (date: Date): { available: number; total: number; status: 'available' | 'pending' | 'confirmed' | 'full'; ordersCount: number } => {\n    // Alleen vrijdagen zijn beschikbaar\n    if (date.getDay() !== 5) {\n      return { available: 0, total: 12, status: 'full', ordersCount: 0 };\n    }\n    \n    // Tel orders voor deze datum\n    const dateString = date.toISOString().split('T')[0];\n    const ordersForDate = ramenOrders.filter(order => {\n      const orderDate = new Date(order.preferredDate).toISOString().split('T')[0];\n      return orderDate === dateString;\n    });\n\n    const totalOrders = ordersForDate.length;\n    const confirmedOrders = ordersForDate.filter(order => order.status === 'confirmed').length;\n    const available = Math.max(0, 12 - totalOrders);\n\n    // Bepaal status op basis van orders\n    let status: 'available' | 'pending' | 'confirmed' | 'full';\n    if (totalOrders === 0) {\n      status = 'available';\n    } else if (totalOrders >= 12) {\n      status = 'full';\n    } else if (confirmedOrders >= 6) {\n      status = 'confirmed';\n    } else {\n      status = 'pending';\n    }\n\n    return { available, total: 12, status, ordersCount: totalOrders };\n  };\n\n  const getStatusColor = (status: 'available' | 'pending' | 'confirmed' | 'full') => {\n    switch (status) {\n      case 'available': return \"bg-green-500\"; // Groen - beschikbaar\n      case 'pending': return \"bg-blue-500\"; // Blauw - pending orders\n      case 'confirmed': return \"bg-orange-500\"; // Oranje - bevestigd evenement\n      case 'full': return \"bg-red-500\"; // Rood - vol\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusText = (status: 'available' | 'pending' | 'confirmed' | 'full', ordersCount: number) => {\n    switch (status) {\n      case 'available': return \"Beschikbaar\";\n      case 'pending': return `${ordersCount} pending`;\n      case 'confirmed': return \"Bevestigd\";\n      case 'full': return \"Vol\";\n      default: return \"Niet beschikbaar\";\n    }\n  };\n\n  const getDaysInMonth = (date: Date): CalendarDay[] => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startDate = new Date(firstDay);\n    startDate.setDate(startDate.getDate() - firstDay.getDay());\n\n    const days: CalendarDay[] = [];\n    \n    for (let i = 0; i < 42; i++) {\n      const currentDate = new Date(startDate);\n      currentDate.setDate(startDate.getDate() + i);\n      \n      const isCurrentMonth = currentDate.getMonth() === month;\n      const isFriday = currentDate.getDay() === 5;\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const currentDateNormalized = new Date(currentDate);\n      currentDateNormalized.setHours(0, 0, 0, 0);\n      const daysDifference = Math.ceil((currentDateNormalized.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n      const isWithin4Days = daysDifference <= 4 && daysDifference >= 0;\n      const isFuture = currentDateNormalized > today;\n      const isSelectable = isCurrentMonth && isFriday && isFuture && !isWithin4Days;\n      \n      const dateInfo = getDateInfo(currentDate);\n      \n      days.push({\n        date: currentDate,\n        available: dateInfo.available,\n        total: dateInfo.total,\n        isSelectable: isSelectable && dateInfo.available > 0,\n        status: dateInfo.status,\n        ordersCount: dateInfo.ordersCount,\n      });\n    }\n    \n    return days;\n  };\n\n  const days = getDaysInMonth(currentMonth);\n  const monthNames = [\n    \"januari\", \"februari\", \"maart\", \"april\", \"mei\", \"juni\",\n    \"juli\", \"augustus\", \"september\", \"oktober\", \"november\", \"december\"\n  ];\n  const dayNames = [\"Zo\", \"Ma\", \"Di\", \"Wo\", \"Do\", \"Vr\", \"Za\"];\n\n  const previousMonth = () => {\n    setCurrentMonth(new Date(currentMonth.setMonth(currentMonth.getMonth() - 1)));\n  };\n\n  const nextMonth = () => {\n    setCurrentMonth(new Date(currentMonth.setMonth(currentMonth.getMonth() + 1)));\n  };\n\n  const isSelectedDate = (date: Date) => {\n    if (!selectedDate) return false;\n    return date.toDateString() === selectedDate.toDateString();\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calendar className=\"w-5 h-5\" />\n          Kies een vrijdag\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Maand navigatie */}\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"outline\" size=\"sm\" onClick={previousMonth}>\n            <ChevronLeft className=\"w-4 h-4\" />\n          </Button>\n          <h3 className=\"font-semibold text-lg\">\n            {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}\n          </h3>\n          <Button variant=\"outline\" size=\"sm\" onClick={nextMonth}>\n            <ChevronRight className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Kalender grid */}\n        <div className=\"grid grid-cols-7 gap-1\">\n          {/* Dag headers */}\n          {dayNames.map(day => (\n            <div key={day} className=\"text-center text-sm font-medium text-gray-500 p-2\">\n              {day}\n            </div>\n          ))}\n          \n          {/* Kalender dagen */}\n          {days.map((day, index) => {\n            const isCurrentMonth = day.date.getMonth() === currentMonth.getMonth();\n            const isFriday = day.date.getDay() === 5;\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            const dayDateNormalized = new Date(day.date);\n            dayDateNormalized.setHours(0, 0, 0, 0);\n            const daysDifference = Math.ceil((dayDateNormalized.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n            const isWithin4Days = daysDifference <= 4 && daysDifference >= 0;\n            const statusColor = getStatusColor(day.status);\n            \n            return (\n              <button\n                key={index}\n                onClick={() => day.isSelectable && onDateSelect(day.date)}\n                disabled={!day.isSelectable}\n                className={`\n                  relative p-2 text-sm rounded-lg transition-all duration-200\n                  ${isCurrentMonth ? 'text-gray-900 dark:text-white' : 'text-gray-400 dark:text-gray-600'}\n                  ${day.isSelectable ? 'hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer' : 'cursor-not-allowed'}\n                  ${isSelectedDate(day.date) ? 'bg-blue-100 dark:bg-blue-900 ring-2 ring-blue-500' : ''}\n                  ${!isCurrentMonth ? 'opacity-30' : ''}\n                  ${isFriday && isCurrentMonth && isWithin4Days ? 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300' : ''}\n                `}\n              >\n                <span className=\"relative z-10\">{day.date.getDate()}</span>\n                \n                {/* Status indicator voor vrijdagen */}\n                {isFriday && isCurrentMonth && (\n                  <div className={`absolute bottom-1 right-1 w-2 h-2 rounded-full ${statusColor}`} />\n                )}\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Legenda */}\n        <div className=\"space-y-3 pt-4 border-t\">\n          <h4 className=\"font-medium text-sm\">Legenda:</h4>\n          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-green-500\" />\n              <span>Beschikbaar</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-blue-500\" />\n              <span>Pending orders</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-orange-500\" />\n              <span>Bevestigd evenement</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-red-500\" />\n              <span>Vol</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Info */}\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n          <div className=\"flex items-start gap-2\">\n            <Clock className=\"w-4 h-4 text-blue-600 dark:text-blue-400 mt-0.5\" />\n            <div className=\"text-sm text-blue-700 dark:text-blue-300\">\n              <p className=\"font-medium\">Alleen vrijdagen beschikbaar</p>\n              <p className=\"text-xs mt-1\">Ramen wordt vers bereid voor max 6 personen per avond</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9756},"backup/syrup-website/client/src/components/ramen-preorder-fixed.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, Users, CheckCircle, Info, MapPin, ExternalLink } from \"lucide-react\";\nimport { RamenCalendar } from \"./ramen-calendar\";\n\n\nconst ramenOrderSchema = z.object({\n  customerName: z.string().min(1, \"Naam is verplicht\"),\n  customerEmail: z.string().email(\"Ongeldig email adres\"),\n  customerPhone: z.string().min(1, \"Telefoon is verplicht\"),\n  preferredDate: z.string().min(1, \"Selecteer een datum\"),\n  notes: z.string().optional(),\n});\n\ntype RamenOrderForm = z.infer<typeof ramenOrderSchema>;\n\nexport function RamenPreorderFixed() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n  const { toast } = useToast();\n\n  const form = useForm<RamenOrderForm>({\n    resolver: zodResolver(ramenOrderSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      preferredDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  const handleDateSelect = (date: Date) => {\n    setSelectedDate(date);\n    form.setValue(\"preferredDate\", date.toISOString().split('T')[0]);\n  };\n\n  const orderMutation = useMutation({\n    mutationFn: async (data: RamenOrderForm) => {\n      return apiRequest(\"POST\", \"/api/orders/ramen\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ramen bestelling geplaatst!\",\n        description: \"We nemen contact met je op voor bevestiging.\",\n      });\n      form.reset();\n      setSelectedDate(undefined);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: error.message || \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RamenOrderForm) => {\n    orderMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"ramen\" className=\"py-20 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Ramen Voorbestelling\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n            Authentieke Japanse ramen bereid met verse lokale ingrediënten. \n            Alleen op vrijdag, minimaal 6 personen per avond.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Calendar className=\"w-8 h-8 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Alleen Vrijdagen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse ramen elke vrijdag tussen 17:00-19:00. Minimaal 4 dagen van tevoren boeken.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Users className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Minimaal 6 Personen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Intieme setting voor de beste kwaliteit. Elk kom wordt met zorg bereid.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <MapPin className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Lokale Ingrediënten\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse ingrediënten uit Groningen, gecombineerd met authentieke Japanse technieken.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-2xl overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"grid lg:grid-cols-2\">\n                <div className=\"relative h-64 lg:h-auto\">\n                  <img\n                    src=\"/images/chicken-shoyu-ramen.jpg\"\n                    alt=\"Chicken Shoyu Ramen\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                </div>\n                <div className=\"p-8 flex flex-col justify-center\">\n                  <h3 className=\"font-display text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                    Chicken Shoyu Ramen\n                  </h3>\n                  <div className=\"space-y-3 mb-6\">\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse zelfgemaakte noedels\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Krokante kip met perfecte textuur\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Rijke shoyu bouillon (24+ uur getrokken)\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse toppings: ajitsuke tamago, nori, lente-ui en meer\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Lokale ingrediënten uit Groningen\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <div>\n                      <span className=\"text-3xl font-display font-bold text-purple-600 dark:text-purple-400\">\n                        €12,50\n                      </span>\n                      <span className=\"text-gray-500 ml-2\">per persoon</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Meer Details Sectie */}\n        <div className=\"max-w-4xl mx-auto text-center my-8\">\n          <div className=\"bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 p-6 rounded-lg border border-purple-200\">\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-3\">\n              🍜 Meer weten over ons ramen proces?\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n              Ontdek hoe we bereiden, wat je krijgt en hoe het ophalen werkt.\n            </p>\n            <a \n              href=\"/ramen-details\" \n              className=\"inline-flex items-center px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors font-medium\"\n            >\n              <ExternalLink className=\"w-5 h-5 mr-2\" />\n              Bekijk alle details\n            </a>\n          </div>\n        </div>\n\n        <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <RamenCalendar \n                  onDateSelect={handleDateSelect}\n                  selectedDate={selectedDate}\n                />\n              </div>\n\n              <div>\n                <h3 className=\"font-display text-2xl font-semibold text-gray-900 dark:text-white mb-6\">\n                  Boek je plek\n                </h3>\n                \n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"customerName\">Naam</Label>\n                    <Input\n                      id=\"customerName\"\n                      {...form.register(\"customerName\")}\n                      placeholder=\"Je volledige naam\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerName && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerName.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerEmail\">Email</Label>\n                    <Input\n                      id=\"customerEmail\"\n                      type=\"email\"\n                      {...form.register(\"customerEmail\")}\n                      placeholder=\"je@email.com\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerEmail && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerEmail.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerPhone\">Telefoon</Label>\n                    <Input\n                      id=\"customerPhone\"\n                      {...form.register(\"customerPhone\")}\n                      placeholder=\"06-12345678\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerPhone && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerPhone.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"notes\">Opmerkingen (optioneel)</Label>\n                    <Textarea\n                      id=\"notes\"\n                      {...form.register(\"notes\")}\n                      placeholder=\"Allergieën, dieetwensen, etc.\"\n                      className=\"mt-1\"\n                      rows={3}\n                    />\n                  </div>\n\n                  {form.formState.errors.preferredDate && (\n                    <p className=\"text-red-500 text-sm\">\n                      {form.formState.errors.preferredDate.message}\n                    </p>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-purple-600 hover:bg-purple-700 text-white py-3 text-lg font-semibold\"\n                    disabled={orderMutation.isPending || !selectedDate}\n                  >\n                    {orderMutation.isPending ? \"Bezig...\" : \"Boek Mijn Plek - €12,50\"}\n                  </Button>\n                </form>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}","size_bytes":12468},"backup/syrup-website/client/src/components/ramen-preorder.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, Users, CheckCircle, MapPin, ExternalLink } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { RamenCalendar } from \"./ramen-calendar\";\nimport ramenImage from \"@assets/IMG_20250527_233628.jpg\";\n\nconst ramenOrderSchema = z.object({\n  customerName: z.string().min(1, \"Naam is verplicht\"),\n  customerEmail: z.string().email(\"Ongeldig email adres\"),\n  customerPhone: z.string().min(1, \"Telefoon is verplicht\"),\n  preferredDate: z.string().min(1, \"Selecteer een datum\").refine((dateStr) => {\n    const date = new Date(dateStr);\n    return date.getDay() === 5; // 5 = Friday\n  }, \"Ramen afhaling is alleen mogelijk op vrijdag\"),\n  notes: z.string().optional(),\n});\n\ntype RamenOrderForm = z.infer<typeof ramenOrderSchema>;\n\nexport function RamenPreorder() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<RamenOrderForm>({\n    resolver: zodResolver(ramenOrderSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      preferredDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  const handleDateSelect = (date: Date) => {\n    setSelectedDate(date);\n    // Format date as YYYY-MM-DD to avoid timezone issues\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    form.setValue(\"preferredDate\", dateString);\n  };\n\n  const orderMutation = useMutation({\n    mutationFn: async (data: RamenOrderForm) => {\n      return apiRequest(\"POST\", \"/api/orders/ramen\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ramen bestelling geplaatst!\",\n        description: \"We nemen contact met je op voor bevestiging.\",\n      });\n      form.reset();\n      setSelectedDate(undefined);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Er ging iets mis\",\n        description: error.message || \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RamenOrderForm) => {\n    orderMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"ramen\" className=\"py-20 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Ramen Voorbestelling\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n            Authentieke Japanse ramen bereid met verse lokale ingrediënten. \n            Alleen op vrijdag, minimaal 6 personen voor bevestiging.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Calendar className=\"w-8 h-8 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Alleen Vrijdagen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse ramen elke vrijdag tussen 17:00-19:00. Minimaal 4 dagen van tevoren boeken.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Users className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Minimaal 6 Personen\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Avond wordt alleen bevestigd bij minimaal 6 reserveringen. Elk kom wordt met zorg bereid.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <MapPin className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <h3 className=\"font-display text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Lokale Ingrediënten\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Verse ingrediënten uit Groningen, gecombineerd met authentieke Japanse technieken.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mb-12\">\n          <Card className=\"bg-white dark:bg-gray-800 shadow-2xl overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"grid lg:grid-cols-2\">\n                <div className=\"relative h-64 lg:h-auto\">\n                  <img\n                    src={ramenImage}\n                    alt=\"Chicken Shoyu Ramen\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                </div>\n                <div className=\"p-8 flex flex-col justify-center\">\n                  <h3 className=\"font-display text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                    Chicken Shoyu Ramen\n                  </h3>\n                  <div className=\"space-y-3 mb-6\">\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse zelfgemaakte noedels\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Krokante kip met perfecte textuur\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Rijke shoyu bouillon (24+ uur getrokken)\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Verse toppings: ajitsuke tamago, nori, lente-ui\n                    </div>\n                    <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />\n                      Lokale ingrediënten uit Groningen\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"text-3xl font-display font-bold text-purple-600 dark:text-purple-400\">\n                        €12,50\n                      </span>\n                      <span className=\"text-gray-500 ml-2\">per persoon</span>\n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* NIEUW: Meer Details Link - Force Cache Refresh */}\n        <div className=\"max-w-4xl mx-auto text-center my-8\" style={{ display: 'block' }}>\n          <div className=\"bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 p-8 rounded-xl shadow-lg border-2 border-purple-200\">\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n              🍜 Meer weten over ons ramen proces?\n            </h3>\n            <p className=\"text-gray-700 dark:text-gray-200 mb-6 text-lg\">\n              Ontdek hoe we onze authentieke Chicken Shoyu Ramen bereiden, wat je precies krijgt en hoe het ophalen werkt.\n            </p>\n            <a \n              href=\"/ramen-details\" \n              className=\"inline-flex items-center px-8 py-4 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all duration-300 font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105\"\n              style={{ textDecoration: 'none' }}\n            >\n              <ExternalLink className=\"w-6 h-6 mr-3\" />\n              Bekijk alle details over bereiding en ophalen\n            </a>\n          </div>\n        </div>\n\n        <Card className=\"bg-white dark:bg-gray-800 shadow-xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <RamenCalendar \n                  onDateSelect={handleDateSelect}\n                  selectedDate={selectedDate}\n                />\n              </div>\n\n              <div>\n                <h3 className=\"font-display text-2xl font-semibold text-gray-900 dark:text-white mb-6\">\n                  Boek je plek\n                </h3>\n                \n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"customerName\">Naam</Label>\n                    <Input\n                      id=\"customerName\"\n                      {...form.register(\"customerName\")}\n                      placeholder=\"Je volledige naam\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerName && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerName.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerEmail\">Email</Label>\n                    <Input\n                      id=\"customerEmail\"\n                      type=\"email\"\n                      {...form.register(\"customerEmail\")}\n                      placeholder=\"je@email.com\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerEmail && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerEmail.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerPhone\">Telefoon</Label>\n                    <Input\n                      id=\"customerPhone\"\n                      {...form.register(\"customerPhone\")}\n                      placeholder=\"06-12345678\"\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.customerPhone && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.customerPhone.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"notes\">Opmerkingen (optioneel)</Label>\n                    <Textarea\n                      id=\"notes\"\n                      {...form.register(\"notes\")}\n                      placeholder=\"Allergieën, dieetwensen, etc.\"\n                      className=\"mt-1\"\n                      rows={3}\n                    />\n                  </div>\n\n                  {form.formState.errors.preferredDate && (\n                    <p className=\"text-red-500 text-sm\">\n                      {form.formState.errors.preferredDate.message}\n                    </p>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-purple-600 hover:bg-purple-700 text-white py-3 text-lg font-semibold\"\n                    disabled={orderMutation.isPending || !selectedDate}\n                  >\n                    {orderMutation.isPending ? \"Bezig...\" : \"Boek Mijn Plek - €12,50\"}\n                  </Button>\n                </form>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}","size_bytes":13217},"backup/syrup-website/client/src/components/shopping-cart.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ShoppingCart as ShoppingCartIcon, X, Plus, Minus, Trash2, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatPrice } from \"@/lib/utils\";\nimport type { Product } from \"@shared/schema\";\n\ninterface CartItem {\n  product: Product;\n  quantity: number;\n}\n\nexport const cartService = {\n  items: [] as CartItem[],\n  listeners: [] as (() => void)[],\n\n  addItem: (product: Product) => {\n    console.log(\"CART DEBUG: Adding product:\", product);\n    console.log(\"CART DEBUG: Current cart items:\", cartService.items.length);\n    \n    if (!product) {\n      console.error(\"CART ERROR: Product is null/undefined\");\n      return false;\n    }\n    \n    if (!product.id) {\n      console.error(\"CART ERROR: Product missing ID:\", product);\n      return false;\n    }\n    \n    const existingItem = cartService.items.find(item => item.product?.id === product.id);\n    if (existingItem) {\n      console.log(\"CART DEBUG: Product already in cart, increasing quantity\");\n      existingItem.quantity += 1;\n      cartService.notifyListeners();\n      return true;\n    }\n    \n    cartService.items.push({ product, quantity: 1 });\n    console.log(\"CART DEBUG: Added new item, cart now has:\", cartService.items.length, \"items\");\n    cartService.notifyListeners();\n    return true;\n  },\n\n  removeItem: (productId: number) => {\n    cartService.items = cartService.items.filter(item => item.product.id !== productId);\n    cartService.notifyListeners();\n  },\n\n  updateQuantity: (productId: number, quantity: number) => {\n    if (quantity <= 0) {\n      cartService.removeItem(productId);\n      return;\n    }\n    const item = cartService.items.find(item => item.product.id === productId);\n    if (item && quantity <= 1) { // Max 1 per product\n      item.quantity = quantity;\n      cartService.notifyListeners();\n    }\n  },\n\n  clear: () => {\n    cartService.items = [];\n    cartService.notifyListeners();\n  },\n\n  getTotalPrice: () => {\n    return cartService.items.reduce((total, item) => {\n      return total + (parseFloat(item.product.price) * item.quantity);\n    }, 0);\n  },\n\n  getItemCount: () => {\n    return cartService.items.reduce((total, item) => total + item.quantity, 0);\n  },\n\n  subscribe: (listener: () => void) => {\n    cartService.listeners.push(listener);\n    return () => {\n      cartService.listeners = cartService.listeners.filter(l => l !== listener);\n    };\n  },\n\n  notifyListeners: () => {\n    cartService.listeners.forEach(listener => listener());\n  }\n};\n\nexport function useShoppingCart() {\n  const [, forceUpdate] = useState(0);\n\n  useEffect(() => {\n    const unsubscribe = cartService.subscribe(() => {\n      forceUpdate(prev => prev + 1);\n    });\n    return unsubscribe;\n  }, []);\n\n  return {\n    items: cartService.items,\n    addItem: cartService.addItem,\n    removeItem: cartService.removeItem,\n    updateQuantity: cartService.updateQuantity,\n    clear: cartService.clear,\n    totalPrice: cartService.getTotalPrice(),\n    itemCount: cartService.getItemCount()\n  };\n}\n\nexport function ShoppingCart() {\n  const { items, removeItem, updateQuantity, totalPrice, clear } = useShoppingCart();\n  const [showCheckout, setShowCheckout] = useState(false);\n  const [customerInfo, setCustomerInfo] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    deliveryMethod: 'pickup',\n    streetAddress: '',\n    postalCode: '',\n    city: '',\n    country: 'Nederland',\n    notes: ''\n  });\n  const { toast } = useToast();\n\n  const handleCheckout = async () => {\n    if (!customerInfo.name || !customerInfo.email) {\n      toast({\n        title: \"Ontbrekende gegevens\",\n        description: \"Vul je naam en email in.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (customerInfo.deliveryMethod === 'delivery' && (!customerInfo.streetAddress || !customerInfo.postalCode || !customerInfo.city)) {\n      toast({\n        title: \"Ontbrekende adresgegevens\",\n        description: \"Vul alle adresgegevens in voor bezorging.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      for (const item of items) {\n        await apiRequest(\"POST\", \"/api/orders\", {\n          customerName: customerInfo.name,\n          customerEmail: customerInfo.email,\n          customerPhone: customerInfo.phone,\n          productId: item.product.id,\n          quantity: item.quantity,\n          totalAmount: (parseFloat(item.product.price) * item.quantity).toFixed(2),\n          orderType: \"syrup\",\n          deliveryMethod: customerInfo.deliveryMethod,\n          streetAddress: customerInfo.streetAddress,\n          postalCode: customerInfo.postalCode,\n          city: customerInfo.city,\n          country: customerInfo.country,\n          notes: customerInfo.notes\n        });\n      }\n      \n      clear();\n      setShowCheckout(false);\n      setCustomerInfo({\n        name: '',\n        email: '',\n        phone: '',\n        deliveryMethod: 'pickup',\n        streetAddress: '',\n        postalCode: '',\n        city: '',\n        country: 'Nederland',\n        notes: ''\n      });\n      \n      toast({\n        title: \"Bestelling geplaatst!\",\n        description: \"Je bestelling is succesvol geplaatst. Je ontvangt een bevestiging per email.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Fout bij bestellen\",\n        description: \"Er ging iets mis. Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (showCheckout) {\n    const deliveryCost = customerInfo.deliveryMethod === 'delivery' ? 1.00 : 0;\n    const finalTotal = totalPrice + deliveryCost;\n\n    return (\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <CardTitle>Bestelling Afronden</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Order Summary */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Bestelling overzicht</h3>\n            {items.map((item) => (\n              <div key={item.product.id} className=\"flex justify-between items-center\">\n                <span>{item.product.name} x {item.quantity}</span>\n                <span>€{(parseFloat(item.product.price) * item.quantity).toFixed(2)}</span>\n              </div>\n            ))}\n            {customerInfo.deliveryMethod === 'delivery' && (\n              <div className=\"flex justify-between items-center text-sm\">\n                <span>Fietskosten</span>\n                <span>€{deliveryCost.toFixed(2)}</span>\n              </div>\n            )}\n            <div className=\"border-t pt-2\">\n              <div className=\"flex justify-between font-semibold\">\n                <span>Totaal:</span>\n                <span>€{finalTotal.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Customer Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Contactgegevens</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Naam *</Label>\n                <Input\n                  id=\"name\"\n                  value={customerInfo.name}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, name: e.target.value })}\n                  placeholder=\"Je volledige naam\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={customerInfo.email}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, email: e.target.value })}\n                  placeholder=\"je@email.com\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"phone\">Telefoon</Label>\n              <Input\n                id=\"phone\"\n                value={customerInfo.phone}\n                onChange={(e) => setCustomerInfo({ ...customerInfo, phone: e.target.value })}\n                placeholder=\"06-12345678\"\n              />\n            </div>\n          </div>\n\n          {/* Delivery Method */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Bezorging</h3>\n            <Select\n              value={customerInfo.deliveryMethod}\n              onValueChange={(value) => setCustomerInfo({ ...customerInfo, deliveryMethod: value })}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Kies bezorgmethode\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"pickup\">Ophalen bij mijn adres (gratis)</SelectItem>\n                <SelectItem value=\"delivery\">Bezorging (€1,00 fietskosten)</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Address fields for delivery */}\n            {customerInfo.deliveryMethod === 'delivery' && (\n              <div className=\"space-y-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\">\n                <h4 className=\"font-medium\">Bezorgadres</h4>\n                <div>\n                  <Label htmlFor=\"streetAddress\">Straat en huisnummer *</Label>\n                  <Input\n                    id=\"streetAddress\"\n                    value={customerInfo.streetAddress}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, streetAddress: e.target.value })}\n                    placeholder=\"Hoofdstraat 123\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"postalCode\">Postcode *</Label>\n                    <Input\n                      id=\"postalCode\"\n                      value={customerInfo.postalCode}\n                      onChange={(e) => setCustomerInfo({ ...customerInfo, postalCode: e.target.value })}\n                      placeholder=\"1234 AB\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"city\">Plaats *</Label>\n                    <Input\n                      id=\"city\"\n                      value={customerInfo.city}\n                      onChange={(e) => setCustomerInfo({ ...customerInfo, city: e.target.value })}\n                      placeholder=\"Groningen\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"country\">Land</Label>\n                  <Input\n                    id=\"country\"\n                    value={customerInfo.country}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, country: e.target.value })}\n                    placeholder=\"Nederland\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Opmerkingen (optioneel)</Label>\n            <Textarea\n              id=\"notes\"\n              value={customerInfo.notes}\n              onChange={(e) => setCustomerInfo({ ...customerInfo, notes: e.target.value })}\n              placeholder=\"Speciale instructies voor je bestelling...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Action buttons */}\n          <div className=\"flex gap-2 pt-4\">\n            <Button onClick={() => setShowCheckout(false)} variant=\"outline\" className=\"flex-1\">\n              Terug naar winkelwagen\n            </Button>\n            <Button onClick={handleCheckout} className=\"flex-1\">\n              Bestelling plaatsen (€{finalTotal.toFixed(2)})\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <ShoppingCartIcon className=\"h-5 w-5\" />\n          Winkelwagen ({items.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {items.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <ShoppingCartIcon className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <p className=\"text-gray-500\">Je winkelwagen is leeg</p>\n            <p className=\"text-sm text-gray-400 mt-2\">Voeg producten toe om te beginnen</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {items.filter(item => item.product && item.product.id).map((item) => (\n              <div key={`cart-item-${item.product.id}`} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                  {item.product.imageUrl ? (\n                    <img\n                      src={item.product.imageUrl}\n                      alt={item.product.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-gradient-to-br from-purple-400 to-purple-600\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-gray-900 dark:text-white\">{item.product.name}</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">€{item.product.price}</p>\n                  <Badge variant=\"secondary\" className=\"mt-1\">\n                    Aantal: {item.quantity}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => updateQuantity(item.product.id, item.quantity - 1)}\n                    disabled={item.quantity <= 1}\n                    className=\"h-8 w-8\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => updateQuantity(item.product.id, item.quantity + 1)}\n                    disabled={item.quantity >= 1} // Max 1 per product\n                    className=\"h-8 w-8\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => removeItem(item.product.id)}\n                    className=\"h-8 w-8\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n            \n            <Separator />\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center text-lg font-semibold\">\n                <span>Totaal:</span>\n                <span>{formatPrice(totalPrice.toFixed(2))}</span>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" onClick={clear} className=\"flex-1\">\n                  Leegmaken\n                </Button>\n                <Button onClick={() => setShowCheckout(true)} className=\"flex-1\">\n                  Afrekenen\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function AddToCartButton({ product }: { product: Product }) {\n  const { addItem } = useShoppingCart();\n  const { toast } = useToast();\n\n  const handleAddToCart = () => {\n    const success = addItem(product);\n    if (success) {\n      toast({\n        title: \"Toegevoegd aan winkelwagen\",\n        description: `${product.name} is toegevoegd aan je winkelwagen.`,\n      });\n    } else {\n      toast({\n        title: \"Al in winkelwagen\",\n        description: \"Dit product zit al in je winkelwagen. Maximum 1 per persoon.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Button\n      onClick={handleAddToCart}\n      disabled={product.stock === 0}\n      className=\"w-full\"\n      size=\"lg\"\n    >\n      {product.stock === 0 ? \"Uitverkocht\" : \"Toevoegen aan winkelwagen\"}\n    </Button>\n  );\n}\n\nexport function CartButton() {\n  const { items } = useShoppingCart();\n  const [isOpen, setIsOpen] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  \n  const itemCount = items.reduce((total, item) => total + item.quantity, 0);\n\n  // Check admin status from server\n  const { data: adminStatus } = useQuery({\n    queryKey: ['/api/admin/status'],\n    retry: false,\n  });\n\n  useEffect(() => {\n    setIsAdmin(adminStatus?.isAdmin || false);\n  }, [adminStatus]);\n\n  console.log('CartButton admin status:', { adminStatus, isAdmin });\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest('POST', '/api/admin/logout');\n      setIsAdmin(false);\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n  \n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        onClick={() => setIsOpen(true)}\n        className=\"relative\"\n      >\n        <ShoppingCartIcon className=\"h-5 w-5\" />\n        {itemCount > 0 && (\n          <span className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full bg-purple-600 text-white text-xs flex items-center justify-center\">\n            {itemCount}\n          </span>\n        )}\n      </Button>\n      \n      {isAdmin && (\n        <Button\n          onClick={handleLogout}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-2 text-red-600 border-red-600 hover:bg-red-50 dark:text-red-400 dark:border-red-400 dark:hover:bg-red-900/20\"\n        >\n          <LogOut className=\"w-4 h-4 mr-1\" />\n          Uitloggen\n        </Button>\n      )}\n      \n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"max-w-lg max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Winkelwagen</DialogTitle>\n          </DialogHeader>\n          <ShoppingCart />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":18725},"backup/syrup-website/client/src/components/stock-indicator.tsx":{"content":"import { AlertTriangle } from \"lucide-react\";\n\ninterface StockIndicatorProps {\n  current: number;\n  max: number;\n  productName: string;\n}\n\nexport function StockIndicator({ current, max, productName }: StockIndicatorProps) {\n  const percentage = (current / max) * 100;\n  const isLowStock = current <= 5;\n  \n  const getStockColor = () => {\n    if (percentage > 50) return \"bg-green-500\";\n    if (percentage > 20) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getTextColor = () => {\n    if (productName?.includes(\"Vlierbloesem\")) return \"text-yellow-600 dark:text-yellow-400\";\n    if (productName?.includes(\"Rozen\")) return \"text-pink-600 dark:text-pink-400\";\n    return \"text-purple-600 dark:text-purple-400\";\n  };\n\n  return (\n    <div className=\"mb-6\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Voorraad</span>\n        <span className={`text-sm font-semibold ${getTextColor()}`}>\n          {current}/{max} beschikbaar\n        </span>\n      </div>\n      \n      <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n        <div \n          className={`h-2 rounded-full transition-all duration-1000 ${getStockColor()}`}\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n      \n      {isLowStock && current > 0 && (\n        <div className=\"flex items-center mt-1\">\n          <AlertTriangle className=\"w-3 h-3 text-red-600 dark:text-red-400 mr-1\" />\n          <span className=\"text-xs text-red-600 dark:text-red-400\">Beperkte voorraad</span>\n        </div>\n      )}\n      \n      {current === 0 && (\n        <div className=\"flex items-center mt-1\">\n          <AlertTriangle className=\"w-3 h-3 text-red-600 dark:text-red-400 mr-1\" />\n          <span className=\"text-xs text-red-600 dark:text-red-400\">Uitverkocht</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1908},"backup/syrup-website/client/src/components/story-section.tsx":{"content":"import { MapPin, Heart, Trees, Flower } from \"lucide-react\";\n\nexport function StorySection() {\n  return (\n    <section id=\"verhaal\" className=\"py-20 bg-white dark:bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n          <div>\n            <h2 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-8\">\n              Wie zijn wij?\n            </h2>\n            \n            <div className=\"space-y-6 text-lg text-gray-600 dark:text-gray-400 leading-relaxed\">\n              <p>\n                Het begon allemaal tijdens onze wandelingen door Groningen. Elfie en ik ontdekten \n                de schitterende vlierbloesem bij de Hamburgervijver, en ik raakte gefascineerd \n                door de mogelijkheden van deze natuurlijke ingrediënten.\n              </p>\n              \n              <p>\n                Vanuit onze basis aan de Star Numanstraat experimenteren we met seizoensgebonden \n                ingrediënten. Elke fles siroop is handgemaakt met zorg voor kwaliteit en respect \n                voor de natuur om ons heen.\n              </p>\n              \n              <p>\n                Elfie is niet alleen mijn trouwe metgezel, maar ook mijn inspiratiebron. \n                Samen ontdekken we de beste plekjes in Groningen voor onze ingrediënten, \n                van rozenblaadjes uit onze eigen tuin tot wilde kruiden in de omgeving.\n              </p>\n            </div>\n            \n            <div className=\"mt-8 grid grid-cols-2 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <Trees className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2\">100%</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Natuurlijk</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-pink-100 dark:bg-pink-900 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <Flower className=\"w-6 h-6 text-pink-600 dark:text-pink-400\" />\n                </div>\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2\">30+</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Schermen per liter</div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"relative rounded-2xl overflow-hidden shadow-2xl\">\n              <img \n                src=\"/images/dc_foto.jpg\" \n                alt=\"Portret met mijn honden in de tuin\" \n                className=\"w-full h-auto\" \n              />\n              \n              {/* Floating badges */}\n              <div className=\"absolute top-6 right-6 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-full px-4 py-2 shadow-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"w-4 h-4 text-purple-500\" />\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">Groningen</span>\n                </div>\n              </div>\n              \n\n            </div>\n            \n            {/* Floating elements */}\n            <div className=\"absolute -top-4 -left-4 w-20 h-20 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full animate-pulse opacity-20\" />\n            <div className=\"absolute -bottom-6 -right-6 w-16 h-16 bg-gradient-to-br from-pink-400 to-pink-600 rounded-full animate-pulse opacity-20\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3866},"backup/syrup-website/client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    \n    // Update syrup hue for theme\n    if (theme === \"dark\") {\n      root.style.setProperty(\"--syrup-hue\", \"200\");\n    } else {\n      root.style.setProperty(\"--syrup-hue\", \"260\");\n    }\n    \n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1359},"backup/syrup-website/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"backup/syrup-website/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"backup/syrup-website/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"backup/syrup-website/client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatPrice(price: string | number): string {\n  const numPrice = typeof price === \"string\" ? parseFloat(price) : price;\n  if (isNaN(numPrice) || numPrice === 0) {\n    return \"€6,99\"; // Default voor siropen\n  }\n  return new Intl.NumberFormat(\"nl-NL\", {\n    style: \"currency\",\n    currency: \"EUR\",\n  }).format(numPrice);\n}\n\nexport function formatDate(date: Date | string): string {\n  const dateObj = typeof date === \"string\" ? new Date(date) : date;\n  return new Intl.DateTimeFormat(\"nl-NL\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  }).format(dateObj);\n}\n\nexport function getStockPercentage(current: number, max: number): number {\n  return Math.round((current / max) * 100);\n}\n\nexport function isLowStock(current: number, max: number): boolean {\n  return current <= Math.max(1, Math.floor(max * 0.2));\n}\n","size_bytes":1035},"backup/syrup-website/client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Edit, Plus, LogOut, Check, X, Calendar, Mail } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useLocation } from \"wouter\";\nimport type { Product, RamenOrder } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  // All hooks must be at the top before any conditional logic\n  const [editingProduct, setEditingProduct] = useState<number | null>(null);\n  const [editProductData, setEditProductData] = useState<any>(null);\n  const [newProduct, setNewProduct] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    stock: \"\",\n    maxStock: \"\",\n    category: \"syrup\",\n    imageUrl: \"\",\n    featured: false,\n    limitedStock: false,\n    badges: [] as string[]\n  });\n  const [availableBadges, setAvailableBadges] = useState([\"Seizoenspecialiteit\", \"Huistuin delicatesse\", \"Premium\"]);\n  const [newBadge, setNewBadge] = useState(\"\");\n\n  // Check admin authentication\n  const { data: adminStatus, isLoading: adminLoading } = useQuery({\n    queryKey: ['/api/admin/status'],\n    retry: false,\n    refetchOnMount: true,\n    refetchOnWindowFocus: false,\n    staleTime: 0,\n  });\n\n  // Fetch data\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: ramenOrders = [] } = useQuery({\n    queryKey: [\"/api/ramen-orders\"],\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  // Mutations\n  const updateStockMutation = useMutation({\n    mutationFn: async ({ id, stock }: { id: number; stock: number }) => {\n      const response = await apiRequest(\"PATCH\", `/api/products/${id}/stock`, { stock });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Voorraad bijgewerkt\",\n        description: \"De voorraad is succesvol aangepast.\",\n      });\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setNewProduct({\n        name: \"\",\n        description: \"\",\n        price: \"\",\n        stock: \"\",\n        maxStock: \"\",\n        category: \"syrup\",\n        imageUrl: \"\",\n        featured: false,\n        limitedStock: false,\n        badges: []\n      });\n      toast({\n        title: \"Product toegevoegd\",\n        description: \"Het nieuwe product is succesvol toegevoegd.\",\n      });\n    },\n  });\n\n  const deleteRamenOrderMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/ramen-orders/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ramen-orders\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/ramen-orders\"] });\n      toast({\n        title: \"Ramen order verwijderd\",\n        description: \"De ramen order is succesvol verwijderd.\",\n      });\n    },\n  });\n\n  const confirmRamenOrderMutation = useMutation({\n    mutationFn: async (date: Date) => {\n      const response = await apiRequest(\"POST\", `/api/ramen-orders/confirm`, { \n        date: date.toISOString() \n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ramen-orders\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/ramen-orders\"] });\n      toast({\n        title: \"Ramen orders bevestigd\",\n        description: \"Alle ramen orders voor de geselecteerde datum zijn bevestigd en uitnodigingen zijn verzonden.\",\n      });\n    },\n  });\n\n  const updateRamenOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/ramen-orders/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ramen-orders\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/ramen-orders\"] });\n      toast({\n        title: \"Status bijgewerkt\",\n        description: \"De order status is succesvol aangepast.\",\n      });\n    },\n  });\n\n  const sendIndividualConfirmationMutation = useMutation({\n    mutationFn: async (order: RamenOrder) => {\n      const response = await apiRequest(\"POST\", `/api/ramen-orders/${order.id}/send-confirmation`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bevestigingsmail verzonden\",\n        description: \"De bevestigingsmail is succesvol verzonden naar de klant.\",\n      });\n    },\n  });\n\n  const sendSyrupOrderConfirmationMutation = useMutation({\n    mutationFn: async (order: any) => {\n      const response = await apiRequest(\"POST\", `/api/orders/${order.id}/send-confirmation`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bevestigingsmail verzonden\",\n        description: \"De bevestigingsmail is succesvol verzonden naar de klant.\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: number; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/products/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setEditingProduct(null);\n      setEditProductData(null);\n      toast({\n        title: \"Product bijgewerkt\",\n        description: \"Het product is succesvol aangepast.\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/products/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product verwijderd\",\n        description: \"Het product is succesvol verwijderd.\",\n      });\n    },\n  });\n\n  const testEmailMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/test-email\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test email verzonden\",\n        description: \"Controleer je inbox op dckessler95@gmail.com\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Test email mislukt\",\n        description: error.message || \"Er ging iets mis bij het verzenden van de test email.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSyrupOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/orders/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Status bijgewerkt\",\n        description: \"De bestelling status is succesvol aangepast.\",\n      });\n    },\n  });\n\n  const deleteSyrupOrderMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/orders/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Bestelling verwijderd\",\n        description: \"De bestelling is succesvol verwijderd.\",\n      });\n    },\n  });\n\n\n\n\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!adminLoading && adminStatus && !adminStatus.isAdmin) {\n      setLocation('/admin/login');\n    }\n  }, [adminStatus, adminLoading, setLocation]);\n\n  // Show loading while checking authentication\n  if (adminLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Don't render if not authenticated\n  if (adminStatus && !adminStatus.isAdmin) {\n    return null;\n  }\n\n  const handleStockUpdate = (id: number, newStock: number) => {\n    updateStockMutation.mutate({ id, stock: newStock });\n  };\n\n  const handleCreateProduct = () => {\n    const cleanData = {\n      name: newProduct.name,\n      description: newProduct.description,\n      price: newProduct.price,\n      stock: parseInt(newProduct.stock) || 0,\n      maxStock: parseInt(newProduct.maxStock) || 0,\n      category: newProduct.category,\n      imageUrl: newProduct.imageUrl || null,\n      featured: newProduct.featured || false\n    };\n    createProductMutation.mutate(cleanData);\n  };\n\n\n\n  const handleDeleteRamenOrder = (id: number) => {\n    deleteRamenOrderMutation.mutate(id);\n  };\n\n  const handleTestEmail = () => {\n    testEmailMutation.mutate();\n  };\n\n  const handleConfirmRamenOrders = (date: Date) => {\n    confirmRamenOrderMutation.mutate(date);\n  };\n\n  const handleUpdateOrderStatus = (id: number, status: string) => {\n    updateSyrupOrderStatusMutation.mutate({ id, status });\n  };\n\n  const handleDeleteOrder = (id: number) => {\n    deleteSyrupOrderMutation.mutate(id);\n  };\n\n  const handleSendOrderConfirmation = (order: any) => {\n    sendSyrupOrderConfirmationMutation.mutate(order);\n  };\n\n  const handleUpdateRamenOrderStatus = (id: number, status: string) => {\n    updateRamenOrderStatusMutation.mutate({ id, status });\n  };\n\n  const handleSendIndividualConfirmation = (order: RamenOrder) => {\n    sendIndividualConfirmationMutation.mutate(order);\n  };\n\n\n\n  const handleEditProduct = (product: Product) => {\n    setEditingProduct(product.id);\n    setEditProductData({ ...product });\n  };\n\n  const handleUpdateProduct = () => {\n    if (editingProduct && editProductData) {\n      updateProductMutation.mutate({ \n        id: editingProduct, \n        updates: {\n          ...editProductData,\n          stock: parseInt(editProductData.stock) || 0,\n          maxStock: parseInt(editProductData.maxStock) || 0,\n        }\n      });\n    }\n  };\n\n  const handleDeleteProduct = (id: number) => {\n    deleteProductMutation.mutate(id);\n  };\n\n  const addBadge = () => {\n    if (newBadge && !availableBadges.includes(newBadge)) {\n      setAvailableBadges([...availableBadges, newBadge]);\n      setNewBadge(\"\");\n    }\n  };\n\n  const toggleBadgeForProduct = (badge: string) => {\n    const currentBadges = newProduct.badges || [];\n    if (currentBadges.includes(badge)) {\n      setNewProduct({\n        ...newProduct,\n        badges: currentBadges.filter(b => b !== badge)\n      });\n    } else {\n      setNewProduct({\n        ...newProduct,\n        badges: [...currentBadges, badge]\n      });\n    }\n  };\n\n  // Group ramen orders by date\n  const ramenOrdersByDate = (ramenOrders as RamenOrder[]).reduce((acc, order) => {\n    const dateKey = new Date(order.preferredDate).toISOString().split('T')[0];\n    if (!acc[dateKey]) acc[dateKey] = [];\n    acc[dateKey].push(order);\n    return acc;\n  }, {} as Record<string, RamenOrder[]>);\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/admin/logout\");\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/status'] });\n      setLocation('/admin/login');\n      toast({\n        title: \"Uitgelogd\",\n        description: \"Je bent succesvol uitgelogd.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Fout\",\n        description: \"Er ging iets mis bij het uitloggen.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Admin Dashboard</h1>\n          <Button onClick={handleLogout} variant=\"outline\" className=\"flex items-center gap-2\">\n            <LogOut className=\"h-4 w-4\" />\n            Uitloggen\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"products\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"products\">Producten</TabsTrigger>\n            <TabsTrigger value=\"orders\">Siroop Bestellingen</TabsTrigger>\n            <TabsTrigger value=\"ramen-orders\">Ramen Orders</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"products\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Nieuw Product Toevoegen</CardTitle>\n                <CardDescription>Voeg een nieuw product toe aan de catalogus</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Naam</Label>\n                    <Input\n                      id=\"name\"\n                      value={newProduct.name}\n                      onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}\n                      placeholder=\"Product naam\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"price\">Prijs</Label>\n                    <Input\n                      id=\"price\"\n                      value={newProduct.price}\n                      onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })}\n                      placeholder=\"€10.99\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Beschrijving</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newProduct.description}\n                    onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}\n                    placeholder=\"Product beschrijving\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"stock\">Voorraad</Label>\n                    <Input\n                      id=\"stock\"\n                      type=\"number\"\n                      value={newProduct.stock}\n                      onChange={(e) => setNewProduct({ ...newProduct, stock: e.target.value })}\n                      placeholder=\"50\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"maxStock\">Max Voorraad</Label>\n                    <Input\n                      id=\"maxStock\"\n                      type=\"number\"\n                      value={newProduct.maxStock}\n                      onChange={(e) => setNewProduct({ ...newProduct, maxStock: e.target.value })}\n                      placeholder=\"100\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"category\">Categorie</Label>\n                    <Select\n                      value={newProduct.category}\n                      onValueChange={(value) => setNewProduct({ ...newProduct, category: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"syrup\">Siroop</SelectItem>\n                        <SelectItem value=\"ramen\">Ramen</SelectItem>\n                        <SelectItem value=\"accessoires\">Accessoires</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"imageUrl\">Afbeelding URL</Label>\n                  <Input\n                    id=\"imageUrl\"\n                    value={newProduct.imageUrl}\n                    onChange={(e) => setNewProduct({ ...newProduct, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/image.jpg\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"featured\"\n                    checked={newProduct.featured}\n                    onCheckedChange={(checked) => setNewProduct({ ...newProduct, featured: checked })}\n                  />\n                  <Label htmlFor=\"featured\">Uitgelicht product</Label>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Badges</Label>\n                  <div className=\"flex flex-wrap gap-2 mb-2\">\n                    {availableBadges.map((badge) => (\n                      <Badge\n                        key={badge}\n                        variant={newProduct.badges.includes(badge) ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer\"\n                        onClick={() => toggleBadgeForProduct(badge)}\n                      >\n                        {badge}\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      value={newBadge}\n                      onChange={(e) => setNewBadge(e.target.value)}\n                      placeholder=\"Nieuwe badge\"\n                    />\n                    <Button onClick={addBadge} variant=\"outline\" size=\"sm\">\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleCreateProduct} \n                  className=\"w-full\"\n                  disabled={createProductMutation.isPending}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  {createProductMutation.isPending ? \"Toevoegen...\" : \"Product Toevoegen\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Producten Beheer</CardTitle>\n                <CardDescription>Bekijk en beheer bestaande producten</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(products as Product[]).map((product: Product) => (\n                    <div key={product.id} className=\"border rounded-lg p-4 space-y-2\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h3 className=\"font-semibold\">{product.name}</h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">{product.description}</p>\n                          <p className=\"text-lg font-bold text-green-600\">{product.price}</p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={product.featured ? \"default\" : \"secondary\"}>\n                            {product.featured ? \"Uitgelicht\" : \"Normaal\"}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"text-sm\">Voorraad: {product.stock}/{product.maxStock}</span>\n                          <Input\n                            type=\"number\"\n                            value={product.stock}\n                            onChange={(e) => handleStockUpdate(product.id, parseInt(e.target.value) || 0)}\n                            className=\"w-20\"\n                            min=\"0\"\n                            max={product.maxStock}\n                          />\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleEditProduct(product)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\" \n                            onClick={() => handleDeleteProduct(product.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      {product.badges && product.badges.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {product.badges.map((badge, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {badge}\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Siroop Bestellingen</CardTitle>\n                <CardDescription>Beheer alle siroop bestellingen en hun status</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(orders as any[]).length === 0 ? (\n                    <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                      Geen siroop bestellingen gevonden\n                    </div>\n                  ) : (\n                    (orders as any[]).map((order: any) => {\n                      const product = (products as any[]).find((p: any) => p.id === order.productId);\n                      return (\n                        <div key={order.id} className=\"border rounded-lg p-4 space-y-3\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium\">{order.customerName}</h4>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">{order.customerEmail}</p>\n                              {order.customerPhone && (\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{order.customerPhone}</p>\n                              )}\n                              <div className=\"mt-2 space-y-1\">\n                                <p className=\"text-sm\"><strong>Product:</strong> {product?.name || 'Onbekend product'}</p>\n                                <p className=\"text-sm\"><strong>Aantal:</strong> {order.quantity}</p>\n                                <p className=\"text-sm\"><strong>Totaal:</strong> €{order.totalAmount}</p>\n                                <p className=\"text-sm\"><strong>Bezorging:</strong> {order.deliveryMethod === 'delivery' ? 'Bezorgen' : 'Ophalen'}</p>\n                                {order.deliveryMethod === 'delivery' && order.streetAddress && (\n                                  <div className=\"text-sm\">\n                                    <strong>Adres:</strong> {order.streetAddress}, {order.postalCode} {order.city}, {order.country}\n                                  </div>\n                                )}\n                                {order.notes && (\n                                  <p className=\"text-sm text-gray-500 mt-1\">Notities: {order.notes}</p>\n                                )}\n                                <p className=\"text-xs text-gray-400\">Besteld op: {new Date(order.createdAt).toLocaleString('nl-NL')}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2 ml-4\">\n                              <Select\n                                value={order.status}\n                                onValueChange={(status) => updateSyrupOrderStatusMutation.mutate({ id: order.id, status })}\n                              >\n                                <SelectTrigger className=\"w-32\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"pending\">Pending</SelectItem>\n                                  <SelectItem value=\"bevestigd\">Bevestigd</SelectItem>\n                                  <SelectItem value=\"klaar\">Klaar</SelectItem>\n                                  <SelectItem value=\"voltooid\">Voltooid</SelectItem>\n                                  <SelectItem value=\"geannuleerd\">Geannuleerd</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  e.stopPropagation();\n                                  sendSyrupOrderConfirmationMutation.mutate(order);\n                                }}\n                                disabled={sendSyrupOrderConfirmationMutation.isPending}\n                              >\n                                <Mail className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  e.stopPropagation();\n                                  deleteSyrupOrderMutation.mutate(order.id);\n                                }}\n                                disabled={deleteSyrupOrderMutation.isPending}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"ramen-orders\" className=\"space-y-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <div>\n                  <CardTitle>Ramen Orders per Datum</CardTitle>\n                  <CardDescription>Bekijk en beheer ramen pre-orders gegroepeerd per datum</CardDescription>\n                </div>\n                <Button\n                  onClick={handleTestEmail}\n                  disabled={testEmailMutation.isPending}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <Mail className=\"h-4 w-4\" />\n                  {testEmailMutation.isPending ? \"Bezig...\" : \"Test Email\"}\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {Object.entries(ramenOrdersByDate).map(([date, orders]) => (\n                    <div key={date} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-center mb-4\">\n                        <div>\n                          <h3 className=\"text-lg font-semibold\">\n                            {new Date(date + 'T12:00:00').toLocaleDateString('nl-NL', { \n                              weekday: 'long', \n                              year: 'numeric', \n                              month: 'long', \n                              day: 'numeric' \n                            })}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {orders.length} orders • {orders.reduce((sum, order) => sum + order.servings, 0)} porties totaal\n                          </p>\n                          <div className=\"flex items-center mt-1\">\n                            <Badge variant={orders.reduce((sum, order) => sum + order.servings, 0) >= 6 ? 'destructive' : 'default'}>\n                              {orders.reduce((sum, order) => sum + order.servings, 0) >= 6 ? 'VOL' : `${6 - orders.reduce((sum, order) => sum + order.servings, 0)} plekken beschikbaar`}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            onClick={() => handleConfirmRamenOrders(new Date(date + 'T12:00:00'))}\n                            disabled={confirmRamenOrderMutation.isPending || orders.every(order => order.status === 'confirmed')}\n                            variant={orders.some(order => order.status === 'pending') ? 'default' : 'outline'}\n                          >\n                            <Check className=\"h-4 w-4 mr-2\" />\n                            {orders.every(order => order.status === 'confirmed') ? 'Bevestigd' : 'Bevestig Alle'}\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        {orders.map((order: RamenOrder) => (\n                          <div key={order.id} className=\"bg-gray-50 dark:bg-gray-800 rounded p-3\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <h4 className=\"font-medium\">{order.customerName}</h4>\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{order.customerEmail}</p>\n                                {order.customerPhone && (\n                                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{order.customerPhone}</p>\n                                )}\n                                <div className=\"flex items-center mt-1 space-x-3\">\n                                  <span className=\"text-sm\">Porties: {order.servings}</span>\n                                </div>\n                                {order.notes && (\n                                  <p className=\"text-sm text-gray-500 mt-1\">Notities: {order.notes}</p>\n                                )}\n                              </div>\n                              <div className=\"flex items-center space-x-2 ml-4\">\n                                <Select\n                                  value={order.status}\n                                  onValueChange={(status) => handleUpdateRamenOrderStatus(order.id, status)}\n                                  disabled={updateRamenOrderStatusMutation.isPending}\n                                >\n                                  <SelectTrigger className=\"w-32\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"pending\">Pending</SelectItem>\n                                    <SelectItem value=\"confirmed\">Bevestigd</SelectItem>\n                                    <SelectItem value=\"cancelled\">Geannuleerd</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.preventDefault();\n                                    e.stopPropagation();\n                                    handleSendIndividualConfirmation(order);\n                                  }}\n                                  disabled={sendIndividualConfirmationMutation.isPending}\n                                  title=\"Verstuur bevestigingsmail\"\n                                >\n                                  <Mail className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.preventDefault();\n                                    e.stopPropagation();\n                                    handleDeleteRamenOrder(order.id);\n                                  }}\n                                  disabled={deleteRamenOrderMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {Object.keys(ramenOrdersByDate).length === 0 && (\n                    <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                      Geen ramen orders gevonden\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Edit Product Dialog */}\n        {editingProduct && editProductData && (\n          <Dialog open={!!editingProduct} onOpenChange={() => setEditingProduct(null)}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Product Bewerken</DialogTitle>\n                <DialogDescription>\n                  Pas de productinformatie aan\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-name\">Naam</Label>\n                    <Input\n                      id=\"edit-name\"\n                      value={editProductData.name || \"\"}\n                      onChange={(e) => setEditProductData({ ...editProductData, name: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-price\">Prijs</Label>\n                    <Input\n                      id=\"edit-price\"\n                      value={editProductData.price || \"\"}\n                      onChange={(e) => setEditProductData({ ...editProductData, price: e.target.value })}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-description\">Beschrijving</Label>\n                  <Textarea\n                    id=\"edit-description\"\n                    value={editProductData.description || \"\"}\n                    onChange={(e) => setEditProductData({ ...editProductData, description: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-stock\">Voorraad</Label>\n                    <Input\n                      id=\"edit-stock\"\n                      type=\"number\"\n                      value={editProductData.stock || \"\"}\n                      onChange={(e) => setEditProductData({ ...editProductData, stock: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-maxStock\">Max Voorraad</Label>\n                    <Input\n                      id=\"edit-maxStock\"\n                      type=\"number\"\n                      value={editProductData.maxStock || \"\"}\n                      onChange={(e) => setEditProductData({ ...editProductData, maxStock: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-category\">Categorie</Label>\n                    <Select\n                      value={editProductData.category || \"syrup\"}\n                      onValueChange={(value) => setEditProductData({ ...editProductData, category: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"syrup\">Siroop</SelectItem>\n                        <SelectItem value=\"ramen\">Ramen</SelectItem>\n                        <SelectItem value=\"accessoires\">Accessoires</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-imageUrl\">Afbeelding URL</Label>\n                  <Input\n                    id=\"edit-imageUrl\"\n                    value={editProductData.imageUrl || \"\"}\n                    onChange={(e) => setEditProductData({ ...editProductData, imageUrl: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"edit-featured\"\n                    checked={editProductData.featured || false}\n                    onCheckedChange={(checked) => setEditProductData({ ...editProductData, featured: checked })}\n                  />\n                  <Label htmlFor=\"edit-featured\">Uitgelicht product</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setEditingProduct(null)}>\n                    Annuleren\n                  </Button>\n                  <Button onClick={handleUpdateProduct} disabled={updateProductMutation.isPending}>\n                    {updateProductMutation.isPending ? \"Opslaan...\" : \"Opslaan\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":39331},"backup/syrup-website/client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Lock, User } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\",\n        },\n        body: JSON.stringify(credentials),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`Login failed: ${text}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ingelogd\",\n        description: \"Welkom in het admin dashboard!\",\n      });\n      // Force a hard redirect to ensure the page refreshes with new auth state\n      window.location.href = \"/admin/dashboard\";\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Inloggen mislukt\",\n        description: error.message || \"Controleer je gebruikersnaam en wachtwoord.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !password) {\n      toast({\n        title: \"Velden vereist\",\n        description: \"Vul beide velden in.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-100 to-blue-100 dark:from-purple-900 dark:to-blue-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Lock className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-display\">Admin Login</CardTitle>\n          <p className=\"text-gray-600 dark:text-gray-400\">Pluk & Poot CMS</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Gebruikersnaam</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"admin\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Wachtwoord</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"••••••••\"\n                  required\n                />\n              </div>\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Inloggen...\" : \"Inloggen\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4412},"backup/syrup-website/client/src/pages/chicken-shoyu-ramen.tsx":{"content":"import { ArrowLeft, Clock, Users, Star, Utensils, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function ChickenShoyuRamen() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-100 dark:from-gray-900 dark:to-gray-800\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-900 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"mr-2 w-4 h-4\" />\n              Terug naar Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-start\">\n          {/* Product Image */}\n          <div className=\"space-y-6\">\n            <div className=\"relative bg-gradient-to-br from-amber-100 to-orange-200 dark:from-gray-700 dark:to-gray-600 rounded-2xl overflow-hidden aspect-square flex items-center justify-center\">\n              <div className=\"text-center p-8\">\n                <Utensils className=\"w-24 h-24 text-amber-600 dark:text-amber-400 mx-auto mb-4\" />\n                <h3 className=\"text-2xl font-bold text-gray-800 dark:text-white\">\n                  Chicken Shoyu Ramen\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\n                  Authentieke Japanse ramen ervaring\n                </p>\n              </div>\n            </div>\n            \n            {/* Product Highlights */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <Clock className=\"w-8 h-8 text-amber-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium\">2+ uur koken</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Verse bouillon</p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <Users className=\"w-8 h-8 text-amber-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium\">Max 12 personen</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Intieme ervaring</p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Product Details */}\n          <div className=\"space-y-8\">\n            <div>\n              <div className=\"flex items-center gap-3 mb-4\">\n                <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-800\">\n                  Ramen Ervaring\n                </Badge>\n                <div className=\"flex items-center\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 fill-amber-400 text-amber-400\" />\n                  ))}\n                  <span className=\"ml-2 text-sm text-gray-600\">(Authentiek Japans)</span>\n                </div>\n              </div>\n              \n              <h1 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n                Chicken Shoyu Ramen Ervaring\n              </h1>\n              \n              <p className=\"text-xl text-gray-600 dark:text-gray-400 leading-relaxed\">\n                Beleef een authentieke Japanse ramen ervaring in het hart van Groningen. \n                Onze Chicken Shoyu Ramen wordt met liefde bereid volgens traditionele recepten, \n                met verse ingrediënten en een bouillon die uren heeft getrokken.\n              </p>\n            </div>\n\n            {/* What's Included */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-lg mb-4\">Wat is inbegrepen:</h3>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Verse Chicken Shoyu bouillon (2+ uur gekookt)</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Handgemaakte ramen noedels</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Malse kip, ajitsuke ei en verse groenten</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Traditionele toppings en bijgerechten</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                    <span>Culturele uitleg over ramen traditie</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Pricing & Booking */}\n            <Card className=\"bg-gradient-to-r from-amber-500 to-orange-600 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">€25,00 per persoon</p>\n                    <p className=\"text-amber-100\">Inclusief alle ingrediënten</p>\n                  </div>\n                  <Calendar className=\"w-8 h-8 text-amber-100\" />\n                </div>\n                \n                <div className=\"space-y-3 mb-6\">\n                  <p className=\"text-sm text-amber-100\">\n                    <strong>Wanneer:</strong> Alleen op vrijdagavonden\n                  </p>\n                  <p className=\"text-sm text-amber-100\">\n                    <strong>Tijd:</strong> 18:00 - 21:00 (inclusief voorbereiding)\n                  </p>\n                  <p className=\"text-sm text-amber-100\">\n                    <strong>Locatie:</strong> Star Numanstraat, Groningen\n                  </p>\n                </div>\n\n                <Link href=\"/#ramen\">\n                  <Button \n                    className=\"w-full bg-white text-amber-600 hover:bg-amber-50 font-semibold py-3\"\n                    size=\"lg\"\n                  >\n                    Reserveer Nu\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Additional Info */}\n            <div className=\"bg-amber-50 dark:bg-gray-800 rounded-xl p-6\">\n              <h3 className=\"font-semibold text-lg mb-3 text-gray-900 dark:text-white\">\n                Belangrijk om te weten:\n              </h3>\n              <ul className=\"space-y-2 text-sm text-gray-700 dark:text-gray-300\">\n                <li>• Minimum 6 personen, maximum 12 personen per sessie</li>\n                <li>• Reservering wordt automatisch bevestigd bij 6+ deelnemers</li>\n                <li>• Geschikt voor alle leeftijden en diëten (vegetarische optie beschikbaar)</li>\n                <li>• Annulering tot 48 uur van tevoren mogelijk</li>\n                <li>• Alle benodigde materialen worden verzorgd</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7681},"backup/syrup-website/client/src/pages/home.tsx":{"content":"import { Header } from \"@/components/header\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { ProductShowcase } from \"@/components/product-showcase\";\nimport { RamenPreorderFixed } from \"@/components/ramen-preorder-fixed\";\nimport { StorySection } from \"@/components/story-section\";\nimport { ContactSection } from \"@/components/contact-section\";\nimport { Footer } from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 font-sans text-gray-900 dark:text-gray-100 transition-colors duration-300\">\n      <Header />\n      <StorySection />\n      <ProductShowcase />\n      <RamenPreorderFixed />\n      <ContactSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":745},"backup/syrup-website/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"backup/syrup-website/client/src/pages/product-detail.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Star, Leaf, Heart, Package, Shield, Edit, Save, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { StockIndicator } from \"@/components/stock-indicator\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { AddToCartButton } from \"@/components/shopping-cart\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatPrice } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductDetail() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editData, setEditData] = useState<Partial<Product>>({});\n  const [isAdmin, setIsAdmin] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check admin status from server\n  const { data: adminStatus } = useQuery({\n    queryKey: ['/api/admin/status'],\n    retry: false,\n  });\n\n  useEffect(() => {\n    setIsAdmin(adminStatus?.isAdmin || false);\n  }, [adminStatus]);\n\n  console.log('ProductDetail admin status:', { adminStatus, isAdmin });\n  \n  // Convert slug to product ID\n  const productSlugMap: Record<string, number> = {\n    \"vlierbloesem-siroop\": 1,\n    \"rozen-siroop\": 2,\n    \"chicken-shoyu-ramen\": 3\n  };\n  \n  const productId = productSlugMap[params.slug as string] || parseInt(params.id || \"0\");\n\n  // Get single product\n  const { data: product, isLoading } = useQuery({\n    queryKey: [\"/api/products\", productId],\n    queryFn: () => apiRequest(\"GET\", `/api/products/${productId}`).then(res => res.json()),\n    enabled: productId > 0\n  });\n\n  // Get all products for carousel\n  const { data: allProducts } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async (updatedProduct: Partial<Product>) => {\n      return apiRequest(\"PATCH\", `/api/products/${productId}`, updatedProduct);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", productId] });\n      setIsEditing(false);\n      setEditData({});\n      toast({\n        title: \"Product bijgewerkt!\",\n        description: \"De productinformatie is succesvol opgeslagen.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fout bij opslaan\",\n        description: error.message || \"Er ging iets mis bij het opslaan.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = () => {\n    if (!product) return;\n    setIsEditing(true);\n    setEditData({\n      name: product.name,\n      description: product.description,\n      price: product.price,\n      imageUrl: product.imageUrl,\n      // Extended content fields\n      story: product.story || getDefaultStory(product.name),\n      ingredients: product.ingredients || getDefaultIngredients(product.name),\n      nutrition: product.nutrition || getDefaultNutrition(),\n      usage: product.usage || getDefaultUsage(product.name),\n      // Detailed page content\n      ingredientsTitle: product.ingredientsTitle || \"Ingrediënten & Voedingswaarden\",\n      ingredientsContent: product.ingredientsContent || getDefaultIngredientsContent(product.name),\n      nutritionContent: product.nutritionContent || getDefaultNutritionContent(),\n      storyTitle: product.storyTitle || \"Verhaal: De Hamburgervijver en de Ziel van de Siroop\",\n      storyContent: product.storyContent || getDefaultStoryContent(product.name),\n    });\n  };\n\n  // Helper functions for default content\n  const getDefaultStory = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return \"Onze vlierbloesemstroop wordt met liefde gemaakt van verse vlierbloesems uit onze eigen tuin. De bloesems worden vroeg in de ochtend geplukt wanneer de dauw nog op de bloemblaadjes ligt, voor de meest intense smaak.\";\n    } else if (name.includes(\"Rozen\")) {\n      return \"Deze rozensiroop wordt gemaakt van delicate rozenblaadjes uit onze eigen tuin aan de Star Numanstraat. Een subtiele bloemensmaak die perfect past bij thee of prosecco.\";\n    }\n    return \"Een verhaal over dit bijzondere product...\";\n  };\n\n  const getDefaultIngredients = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return \"Verse vlierbloesems, rietsuiker, water, citroenzuur\";\n    } else if (name.includes(\"Rozen\")) {\n      return \"Biologische rozenblaadjes, rietsuiker, water, citroenzuur\";\n    }\n    return \"Natuurlijke ingrediënten van hoge kwaliteit\";\n  };\n\n  const getDefaultNutrition = () => {\n    return \"Per 100ml: Energie 280kcal, Koolhydraten 70g, waarvan suikers 68g, Vet 0g, Eiwit 0g, Zout 0g\";\n  };\n\n  const getDefaultUsage = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return \"Perfect voor in thee, over ijs, in cocktails of als topping op desserts. Verdun met bruiswater voor een verfrissende limonade.\";\n    } else if (name.includes(\"Rozen\")) {\n      return \"Heerlijk in thee, over yoghurt, in cocktails of als basis voor rozenlimonade. Ook perfect als topping voor taarten.\";\n    }\n    return \"Veelzijdig te gebruiken in dranken en desserts\";\n  };\n\n  const getDefaultIngredientsContent = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return `Ingrediënten per 100 ml verdunde siroop (1:7 verhouding):\n• Vlierbloeseminfusie (water, verse vlierbloesemschermen)\n• Suiker (33 g per 100 ml siroop)\n• Citroensap (vers geperst)\n• Citroenzuur (natuurlijk conserveermiddel)`;\n    } else if (name.includes(\"Rozen\")) {\n      return `Ingrediënten per 100 ml verdunde siroop (1:7 verhouding):\n• Rozenextract (water, verse rozenblaadjes)\n• Biologische rietsuiker (35 g per 100 ml siroop)\n• Citroensap (vers geperst)\n• Citroenzuur (natuurlijk conserveermiddel)`;\n    }\n    return \"Natuurlijke ingrediënten van hoge kwaliteit\";\n  };\n\n  const getDefaultNutritionContent = () => {\n    return `Voedingswaarden per 100 ml verdund met water:\n\nEnergie: 138 kJ\nKoolhydraten: 8,3 g\nWaarvan suikers: 8,3 g\n\nBevat geen kunstmatige kleur-, geur- of smaakstoffen. Gegarandeerd glutenvrij en veganistisch.`;\n  };\n\n  const getDefaultStoryContent = (name: string) => {\n    if (name.includes(\"Vlierbloesem\")) {\n      return `Midden in de levendige Groningse wijk Korreweg, verscholen tussen karakteristieke jaren-30-woningen en moderne flatgebouwen, ligt de Hamburgervijver – een oase van rust waar jouw vlierbloesemsiroop zijn roots vindt. Deze iconische vijver, onderdeel van het Molukkenplantsoen, werd in de jaren 30 aangelegd als onderdeel van Berlage's visie voor een groene gordel rond de stad.\n\nHistorische Verbinding\n\nDe naam \"Hamburgervijver\" verwijst naar de Hamburgerstraat, die al in 1503 werd vermeld als Curreweg. In de jaren 50 fietsten arbeiders hier dagelijks langs naar de nabijgelegen fabrieken aan het Boterdiep. Vandaag vangen karpervissers er nog steeds karpers tot 5 pond, omringd door treurwilgen en het gelach van kinderen die over het slingerpad rennen.\n\nNatuur in de Stad\n\nHet water reflecteert de seizoenen: in de lente bloeien dotterbloemen langs de oevers, in de zomer weerspiegelen de vlierbloesemschermen zich in het oppervlak. Juist deze bloesems, geplukt in de straten rondom Star Numanstraat, vormen het hart van je siroop. De combinatie van stadse dynamiek en wildpluktraditionele geeft elk flesje een uniek karakter – een eerbetoon aan Groningens vermogen om natuur en stadsleven te verweven.`;\n    } else if (name.includes(\"Rozen\")) {\n      return `Deze rozensiroop wordt gemaakt van delicate rozenblaadjes uit onze eigen tuin aan de Star Numanstraat. Een subtiele bloemensmaak die perfect past bij thee of prosecco.\n\nDe Tuin\n\nOnze rozentuin ligt verscholen in het hart van Groningen, waar elke ochtend de rozen worden geplukt wanneer de dauw nog op de blaadjes ligt. Dit zorgt voor de meest intense smaak en geur.\n\nAmbachtelijk Proces\n\nElke fles bevat de essentie van tientallen rozen, zorgvuldig geoogst op het perfecte moment voor optimale smaak en geur. Het traditionele recept wordt al generaties doorgegeven.`;\n    }\n    return \"Een verhaal over dit bijzondere product...\";\n  };\n\n  const handleSave = () => {\n    if (!product || !editData) return;\n    updateProductMutation.mutate(editData);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEditData({});\n  };\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-8\" />\n            <div className=\"grid lg:grid-cols-2 gap-12\">\n              <div className=\"h-96 bg-gray-200 dark:bg-gray-700 rounded-xl\" />\n              <div className=\"space-y-4\">\n                <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-3/4\" />\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-full\" />\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-2/3\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  // Product not found\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n            Product niet gevonden\n          </h1>\n          <Button onClick={() => setLocation(\"/\")} variant=\"outline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Terug naar home\n          </Button>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  // Product data is available, continue with rendering\n  const isElderflower = product?.name?.includes(\"Vlierbloesem\") ?? false;\n  const isRose = product?.name?.includes(\"Rozen\") ?? false;\n  const otherProducts = allProducts?.filter(p => p.id !== product?.id && p.category === product?.category) || [];\n\n  const getProductTheme = () => {\n    if (isElderflower) {\n      return {\n        gradient: \"from-yellow-100 via-green-50 to-blue-50 dark:from-yellow-900/20 dark:via-green-900/20 dark:to-blue-900/20\",\n        accent: \"text-yellow-600 dark:text-yellow-400\",\n        button: \"bg-gradient-to-r from-yellow-500 to-green-500 hover:from-yellow-600 hover:to-green-600\",\n        badge: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\",\n      };\n    } else if (isRose) {\n      return {\n        gradient: \"from-pink-100 via-rose-50 to-red-50 dark:from-pink-900/20 dark:via-rose-900/20 dark:to-red-900/20\",\n        accent: \"text-rose-600 dark:text-rose-400\",\n        button: \"bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600\",\n        badge: \"bg-rose-100 text-rose-800 dark:bg-rose-900/20 dark:text-rose-400\",\n      };\n    }\n    return {\n      gradient: \"from-blue-100 via-purple-50 to-pink-50 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20\",\n      accent: \"text-purple-600 dark:text-purple-400\",\n      button: \"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\",\n      badge: \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\",\n    };\n  };\n\n  const theme = getProductTheme();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex flex-col\">\n      <Header />\n      \n      {/* Breadcrumb */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/\")}\n          className=\"text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Terug naar collectie\n        </Button>\n      </div>\n\n      {/* Product Hero */}\n      <div className={`bg-gradient-to-br ${theme.gradient} py-16`}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Product Images */}\n            <div className=\"order-1 lg:order-1\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"relative\">\n                  <img\n                    src={isElderflower ? \"/images/normaal_voorkant.png\" : isRose ? \"/images/rozen_voorkant.png\" : \"/images/voorkant-siroop.png\"}\n                    alt={`${product.name} voorkant`}\n                    className=\"w-full h-auto drop-shadow-2xl\"\n                  />\n                </div>\n                <div className=\"relative\">\n                  <img\n                    src={isElderflower ? \"/images/normaal_achterkant.png\" : isRose ? \"/images/rozen_achterkant.png\" : \"/images/achterkant-siroop.png\"}\n                    alt={`${product.name} achterkant`}\n                    className=\"w-full h-auto drop-shadow-2xl\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Product Info */}\n            <div className=\"order-2 lg:order-2 space-y-8\">\n              {/* Edit Button - Only for admins */}\n              {isAdmin && (\n                <div className=\"flex justify-end\">\n                  {!isEditing ? (\n                    <Button onClick={handleEdit} variant=\"outline\" size=\"sm\">\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Bewerk Pagina\n                    </Button>\n                  ) : (\n                    <div className=\"flex gap-2\">\n                      <Button onClick={handleSave} disabled={updateProductMutation.isPending} size=\"sm\">\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Opslaan\n                      </Button>\n                      <Button onClick={handleCancel} variant=\"outline\" size=\"sm\">\n                        <X className=\"w-4 h-4 mr-2\" />\n                        Annuleren\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              <div>\n                {isEditing ? (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Product Naam</label>\n                      <Input\n                        value={editData.name || ''}\n                        onChange={(e) => setEditData({ ...editData, name: e.target.value })}\n                        className=\"text-2xl font-bold\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Beschrijving</label>\n                      <Textarea\n                        value={editData.description || ''}\n                        onChange={(e) => setEditData({ ...editData, description: e.target.value })}\n                        rows={4}\n                        className=\"text-lg\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Prijs</label>\n                      <Input\n                        value={editData.price || ''}\n                        onChange={(e) => setEditData({ ...editData, price: e.target.value })}\n                        placeholder=\"6.99\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Afbeelding URL</label>\n                      <Input\n                        value={editData.imageUrl || ''}\n                        onChange={(e) => setEditData({ ...editData, imageUrl: e.target.value })}\n                        placeholder=\"/images/product.jpg\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Verhaal</label>\n                      <Textarea\n                        value={editData.story || ''}\n                        onChange={(e) => setEditData({ ...editData, story: e.target.value })}\n                        rows={3}\n                        placeholder=\"Het verhaal achter dit product...\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Ingrediënten</label>\n                      <Input\n                        value={editData.ingredients || ''}\n                        onChange={(e) => setEditData({ ...editData, ingredients: e.target.value })}\n                        placeholder=\"Ingrediëntenlijst\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Voedingswaarde</label>\n                      <Input\n                        value={editData.nutrition || ''}\n                        onChange={(e) => setEditData({ ...editData, nutrition: e.target.value })}\n                        placeholder=\"Voedingswaarde per 100ml\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Gebruik</label>\n                      <Textarea\n                        value={editData.usage || ''}\n                        onChange={(e) => setEditData({ ...editData, usage: e.target.value })}\n                        rows={2}\n                        placeholder=\"Hoe gebruik je dit product...\"\n                      />\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    <Badge className={theme.badge}>\n                      {product.category}\n                    </Badge>\n                    <h1 className=\"text-4xl lg:text-5xl font-display font-bold text-gray-900 dark:text-white mt-4\">\n                      {product.name}\n                    </h1>\n                    <p className=\"text-xl text-gray-600 dark:text-gray-300 mt-4 leading-relaxed\">\n                      {product.description}\n                    </p>\n                  </>\n                )}\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-4xl font-display font-bold ${theme.accent}`}>\n                    {formatPrice(product.price)}\n                  </span>\n                  <div className=\"text-right\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Voorraad</span>\n                    <div className={`text-lg font-semibold ${theme.accent}`}>\n                      {product.stock}/{product.maxStock} beschikbaar\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Features */}\n              {isElderflower && (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Card className=\"border-yellow-200 dark:border-yellow-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Leaf className=\"w-6 h-6 text-yellow-600 dark:text-yellow-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Handgeplukt</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Bij Hamburgervijver</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"border-green-200 dark:border-green-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Star className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Puur Natuurlijk</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Geen kunstmatige toevoegingen</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {isRose && (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Card className=\"border-rose-200 dark:border-rose-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Heart className=\"w-6 h-6 text-rose-600 dark:text-rose-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Eigen Tuin</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Verse rozen uit onze tuin</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"border-pink-200 dark:border-pink-800\">\n                    <CardContent className=\"p-4 flex items-center gap-3\">\n                      <Shield className=\"w-6 h-6 text-pink-600 dark:text-pink-400\" />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">Biologisch</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">Zonder pesticiden</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {/* Add to Cart Button */}\n              <div className=\"pt-4\">\n                <AddToCartButton product={product} />\n              </div>\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1\">\n      \n      {/* Detailed Product Information - Always show */}\n      {product && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          {isEditing && isAdmin && (\n            <div className=\"mb-8 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <h3 className=\"text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n                Bewerk Mode Actief\n              </h3>\n              <p className=\"text-blue-700 dark:text-blue-300\">\n                Je kunt nu alle content op deze pagina aanpassen. Scroll naar boven om de basis productinfo te bewerken.\n              </p>\n            </div>\n          )}\n          \n          <div className=\"grid lg:grid-cols-2 gap-16\">\n            {/* Ingredients & Nutrition */}\n            <div>\n              {isEditing && isAdmin ? (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Sectie Titel - Ingrediënten</label>\n                    <Input\n                      value={editData.ingredientsTitle || \"Ingrediënten & Voedingswaarden\"}\n                      onChange={(e) => setEditData({ ...editData, ingredientsTitle: e.target.value })}\n                      placeholder=\"Ingrediënten & Voedingswaarden\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Ingrediënten Content</label>\n                    <Textarea\n                      value={editData.ingredientsContent || getDefaultIngredientsContent(product.name)}\n                      onChange={(e) => setEditData({ ...editData, ingredientsContent: e.target.value })}\n                      rows={8}\n                      placeholder=\"Volledige ingrediënten tekst...\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Voedingswaarden Content</label>\n                    <Textarea\n                      value={editData.nutritionContent || getDefaultNutritionContent()}\n                      onChange={(e) => setEditData({ ...editData, nutritionContent: e.target.value })}\n                      rows={6}\n                      placeholder=\"Volledige voedingswaarden tekst...\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <h2 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-8\">\n                    {product.ingredientsTitle || \"Ingrediënten & Voedingswaarden\"}\n                  </h2>\n                  \n                  <div className=\"space-y-6\">\n                    <div className=\"text-gray-600 dark:text-gray-300 whitespace-pre-line\">\n                      {product.ingredientsContent || getDefaultIngredientsContent(product.name)}\n                    </div>\n                    <div className=\"text-gray-600 dark:text-gray-300 whitespace-pre-line\">\n                      {product.nutritionContent || getDefaultNutritionContent()}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n\n            {/* Story */}\n            <div>\n              {isEditing && isAdmin ? (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Verhaal Titel</label>\n                    <Input\n                      value={editData.storyTitle || \"Verhaal: De Hamburgervijver en de Ziel van de Siroop\"}\n                      onChange={(e) => setEditData({ ...editData, storyTitle: e.target.value })}\n                      placeholder=\"Verhaal titel...\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Verhaal Content</label>\n                    <Textarea\n                      value={editData.storyContent || getDefaultStoryContent(product.name)}\n                      onChange={(e) => setEditData({ ...editData, storyContent: e.target.value })}\n                      rows={12}\n                      placeholder=\"Het volledige verhaal...\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <h2 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-8\">\n                    {product.storyTitle || \"Verhaal: De Hamburgervijver en de Ziel van de Siroop\"}\n                  </h2>\n                  \n                  <div className=\"space-y-6 text-gray-600 dark:text-gray-300 leading-relaxed whitespace-pre-line\">\n                    {product.storyContent || getDefaultStoryContent(product.name)}\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Related Products */}\n      {otherProducts.length > 0 && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <h2 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white mb-8 text-center\">\n            Andere Producten\n          </h2>\n          <div className=\"grid grid-cols-1 gap-12\">\n            {otherProducts.slice(0, 3).map((otherProduct) => (\n              <div key={otherProduct.id} className=\"w-full max-w-none\">\n                <ProductCard product={otherProduct} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":27800},"backup/syrup-website/client/src/pages/products.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Edit3, Eye, Package } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { formatPrice } from \"@/lib/utils\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductsPage() {\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-amber-50 dark:from-gray-900 dark:to-gray-800 py-12\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"h-64 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-amber-50 dark:from-gray-900 dark:to-gray-800 py-12\">\n      <div className=\"max-w-6xl mx-auto px-4\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Terug naar Home\n              </Link>\n            </Button>\n            <h1 className=\"text-3xl font-display font-bold text-gray-900 dark:text-white\">\n              Product Pagina's\n            </h1>\n          </div>\n          <Button variant=\"outline\" asChild>\n            <Link href=\"/admin/dashboard\">\n              <Edit3 className=\"w-4 h-4 mr-2\" />\n              Admin Panel\n            </Link>\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {products?.map((product) => (\n            <Card key={product.id} className=\"group hover:shadow-xl transition-all duration-300\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-start justify-between\">\n                  <CardTitle className=\"text-lg font-display\">\n                    {product.name}\n                  </CardTitle>\n                  <Badge variant=\"secondary\">\n                    ID: {product.id}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"aspect-video bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                  {product.imageUrl ? (\n                    <img\n                      src={product.imageUrl}\n                      alt={product.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full flex items-center justify-center text-gray-400\">\n                      Geen afbeelding\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-3\">\n                    {product.description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(product.price)}\n                    </span>\n                    <Badge variant={product.stock > 0 ? \"default\" : \"destructive\"}>\n                      {product.stock > 0 ? `${product.stock} op voorraad` : \"Uitverkocht\"}\n                    </Badge>\n                  </div>\n                  \n                  {product.badges && product.badges.length > 0 && (\n                    <div className=\"flex flex-wrap gap-1\">\n                      {product.badges.map((badge) => (\n                        <Badge key={badge} variant=\"outline\" className=\"text-xs\">\n                          {badge}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button asChild className=\"flex-1\" variant=\"outline\">\n                    <Link href={`/producten/${product.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '')}`}>\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Bekijk\n                    </Link>\n                  </Button>\n                  <Button asChild className=\"flex-1\">\n                    <Link href={`/producten/${product.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '')}`}>\n                      <Edit3 className=\"w-4 h-4 mr-2\" />\n                      Bewerken\n                    </Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {(!products || products.length === 0) && (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-400 mb-4\">\n              <Package className=\"w-16 h-16 mx-auto\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n              Geen producten gevonden\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              Voeg je eerste product toe via het admin panel\n            </p>\n            <Button asChild>\n              <Link href=\"/admin\">\n                Naar Admin Panel\n              </Link>\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5935},"backup/syrup-website/client/src/pages/ramen-details.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Clock, ChefHat, Calendar, Mail, MapPin, Truck, Users } from \"lucide-react\";\n\n\nexport default function RamenDetails() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <div className=\"max-w-4xl mx-auto px-4 py-12\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Terug naar home\n            </Button>\n          </Link>\n          \n          <h1 className=\"font-display text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n            Chicken Shoyu Ramen\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n            Alles wat je wilt weten over ons ramen proces, bereiding en ophalen\n          </p>\n        </div>\n\n        {/* Bereidingsproces Foto's */}\n        <Card className=\"mb-8 overflow-hidden\">\n          <div className=\"grid md:grid-cols-2 gap-0\">\n            <div className=\"relative h-64\">\n              <img \n                src=\"/images/IMG20250123160935.jpg\" \n                alt=\"Voorbereiding van verse kip voor de ramen bouillon\" \n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-end\">\n                <div className=\"p-4 text-white\">\n                  <h3 className=\"font-semibold text-lg\">Verse ingrediënten</h3>\n                  <p className=\"text-sm opacity-90\">Voorbereiding van verse kip</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"relative h-64\">\n              <img \n                src=\"/images/IMG20250123170544.jpg\" \n                alt=\"Het kookproces van de ramen bouillon in de keuken\" \n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-end\">\n                <div className=\"p-4 text-white\">\n                  <h3 className=\"font-semibold text-lg\">Traditionele bereiding</h3>\n                  <p className=\"text-sm opacity-90\">Uren lang sudderen voor rijke smaak</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Process Section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-3xl font-semibold text-gray-900 dark:text-white mb-6\">\n              Het bereidingsproces\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-3 flex items-center\">\n                  <Clock className=\"w-5 h-5 mr-2\" />\n                  Dag 1: Bouillon maken\n                </h3>\n                <p className=\"text-blue-800 dark:text-blue-200 text-sm\">\n                  We beginnen de avond van te voren met het maken van de bouillon. Kippenbotten, vlees, vel, poten, \n                  ui, gember en knoflook worden 24+ uur zachtjes gekookt voor die diepe, \n                  en collageen rijke smaak die onze ramen zo bijzonder maakt.\n                </p>\n              </div>\n              \n              <div className=\"bg-green-50 dark:bg-green-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-green-900 dark:text-green-100 mb-3 flex items-center\">\n                  <ChefHat className=\"w-5 h-5 mr-2\" />\n                  Dag 2: Verse bereiding\n                </h3>\n                <p className=\"text-green-800 dark:text-green-200 text-sm\">\n                  Op de dag van levering bereiden we alle toppings vers: gemarineerde eieren \n                  die 24 uur in onze speciale marinade hebben gelegen, gepaneerde kip, \n                  verse noedels en alle garnituren. Elke kom wordt op bestelling samengesteld.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-semibold text-purple-900 dark:text-purple-100 mb-4\">\n                Wat maakt onze ramen speciaal?\n              </h3>\n              <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                <ul className=\"space-y-2 text-purple-800 dark:text-purple-200\">\n                  <li>• <strong>24+ uur gekookte bouillon</strong> voor diepe en stevige smaak</li>\n                  <li>• <strong>Authentieke ingrediënten</strong> direct uit Japan</li>\n                  <li>• <strong>Verse noedels</strong> - niet uit een pakje</li>\n                  <li>• <strong>24h gemarineerde eieren</strong> - perfecte textuur</li>\n                </ul>\n                <ul className=\"space-y-2 text-purple-800 dark:text-purple-200\">\n                  <li>• <strong>Handgesneden groenten</strong> - altijd vers</li>\n                  <li>• <strong>Geheime tare saus</strong> - ons eigen recept</li>\n                  <li>• <strong>Traditionele methoden</strong> - zoals in Japan</li>\n                  <li>• <strong>Kleine batches</strong> - kwaliteit boven kwantiteit</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* What you get section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-3xl font-semibold text-gray-900 dark:text-white mb-6\">\n              Wat krijg je precies?\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  In elke kom ramen:\n                </h3>\n                <ul className=\"space-y-3 text-gray-600 dark:text-gray-300\">\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Verse ramen noedels</strong> - Gemaakt door Damian bij hand.\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Rijke chicken shoyu bouillon</strong> - 24+ uur getrokken, vol van smaak\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Ajitsuke tamago</strong> - Perfect gemarineerde eieren met romige dooier\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Gepaneerde kip</strong> - Mals, sappig en vol van smaak\n                    </div>\n                  </li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  Plus alle garnituren:\n                </h3>\n                <ul className=\"space-y-3 text-gray-600 dark:text-gray-300\">\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Verse lente-uitjes</strong> - Voor die perfecte bite en frisheid\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Nori zeewier</strong> - Authentieke Japanse oceaansmaak\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Menma bamboe & andere groenten</strong> - Traditionele knapperige toppings\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-pink-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <strong>Speciale tare saus</strong> - Ons geheime recept voor de perfecte smaak\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Pickup process */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-3xl font-semibold text-gray-900 dark:text-white mb-6\">\n              Hoe werkt het ophalen?\n            </h2>\n            \n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Calendar className=\"w-8 h-8 text-purple-600 dark:text-purple-300\" />\n                </div>\n                <h3 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-3\">1. Reserveren</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Kies een vrijdag en bestel minimaal 4 dagen van tevoren via onze website. (mits nog beschikbaar) \n                  We hebben beperkte plekken per sessie.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Mail className=\"w-8 h-8 text-purple-600 dark:text-purple-300\" />\n                </div>\n                <h3 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-3\">2. Bevestiging</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Je ontvangt een bevestiging met het exacte ophaaltijdstip, locatie en \n                  eventuele bijzondere instructies.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <MapPin className=\"w-8 h-8 text-purple-600 dark:text-purple-300\" />\n                </div>\n                <h3 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-3\">3. Ophalen</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Haal je bestelling af op de afgesproken tijd. Alles is warm verpakt \n                  en klaar om mee te nemen en direct te eten.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-yellow-900 dark:text-yellow-100 mb-3 flex items-center\">\n                  <Truck className=\"w-5 h-5 mr-2\" />\n                  Bezorging helaas nog niet mogelijk\n                </h3>\n                <p className=\"text-yellow-800 dark:text-yellow-200 text-sm\">\n                  Wij bezorgen helaas niet, wij willen ervoor zorgen dat je ramen ervaring authentiek blijft. En het mensenlijk contact behouden.\n                </p>\n              </div>\n              \n              <div className=\"bg-orange-50 dark:bg-orange-900/20 p-6 rounded-lg\">\n                <h3 className=\"font-semibold text-orange-900 dark:text-orange-100 mb-3 flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Groepsbestellingen\n                </h3>\n                <p className=\"text-orange-800 dark:text-orange-200 text-sm\">\n                  Bij 6+ personen wordt je bestelling automatisch bevestigd. \n                  Perfect voor familie-avonden of vriendendiner! Maximaal 12 personen per sessie.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Important info */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"bg-red-50 dark:bg-red-900/20 p-6 rounded-lg\">\n              <h3 className=\"font-semibold text-red-900 dark:text-red-100 mb-4 flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Belangrijk om te weten:\n              </h3>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <ul className=\"text-red-800 dark:text-red-200 text-sm space-y-2\">\n                  <li>• Alleen beschikbaar op vrijdagen</li>\n                  <li>• Maximaal 12 personen per sessie</li>\n                  <li>• Minimaal 2 dagen van tevoren bestellen</li>\n                </ul>\n                <ul className=\"text-red-800 dark:text-red-200 text-sm space-y-2\">\n                  <li>• Bij annulering binnen 24 uur geen terugbetaling</li>\n                  <li>• Elke kom wordt vers bereid volgens Japanse traditie</li>\n                  <li>• Prijs: €12,50 per persoon (bezorging +€1)</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* CTA Section */}\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n              Klaar om te bestellen?\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n              Ga terug naar de homepage en reserveer je plek voor onze next ramen sessie!\n            </p>\n            <Link href=\"/\">\n              <Button size=\"lg\" className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\">\n                Naar bestelpagina\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14784},"backup/syrup-website/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"backup/syrup-website/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"backup/syrup-website/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"backup/syrup-website/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"backup/syrup-website/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"backup/syrup-website/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"backup/syrup-website/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"backup/syrup-website/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"backup/syrup-website/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"backup/syrup-website/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"backup/syrup-website/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"backup/syrup-website/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"backup/syrup-website/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"backup/syrup-website/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"backup/syrup-website/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"backup/syrup-website/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"backup/syrup-website/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"backup/syrup-website/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"backup/syrup-website/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"backup/syrup-website/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"backup/syrup-website/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"backup/syrup-website/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"backup/syrup-website/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"backup/syrup-website/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"backup/syrup-website/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"backup/syrup-website/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"backup/syrup-website/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"backup/syrup-website/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"backup/syrup-website/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"backup/syrup-website/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"backup/syrup-website/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"backup/syrup-website/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"backup/syrup-website/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"backup/syrup-website/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"backup/syrup-website/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"backup/syrup-website/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"backup/syrup-website/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"backup/syrup-website/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"backup/syrup-website/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"backup/syrup-website/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"backup/syrup-website/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"backup/syrup-website/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"backup/syrup-website/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"backup/syrup-website/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"backup/syrup-website/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"backup/syrup-website/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"backup/syrup-website/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ramen-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, MapPin, ChefHat, Users, Phone, Mail, User, Star } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WorkshopOrder } from \"@shared/schema\";\n\n// Friday Calendar Component\nfunction FridayCalendar({ selectedDate, onDateSelect }: { selectedDate: string, onDateSelect: (date: string) => void }) {\n  const [currentOffset, setCurrentOffset] = useState(0);\n  const { data: workshopOrders = [] } = useQuery<WorkshopOrder[]>({\n    queryKey: [\"/api/workshop-orders\"],\n    retry: false,\n  });\n\n  // Generate next 8 Fridays starting from an offset\n  const getNextFridays = (count: number = 8, offsetWeeks: number = 0): Date[] => {\n    const fridays: Date[] = [];\n    const today = new Date();\n    let currentDate = new Date(today);\n    \n    // Find next Friday\n    while (currentDate.getDay() !== 5) {\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    // Apply offset\n    currentDate.setDate(currentDate.getDate() + (offsetWeeks * 7));\n    \n    // Generate fridays\n    for (let i = 0; i < count; i++) {\n      fridays.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + 7);\n    }\n    \n    return fridays;\n  };\n\n  const getRegistrationCount = (date: Date): number => {\n    const dateStr = date.toISOString().split('T')[0];\n    return workshopOrders.filter(order => {\n      const orderDate = new Date(order.preferredDate).toISOString().split('T')[0];\n      return orderDate === dateStr;\n    }).length;\n  };\n\n  const fridays = getNextFridays(8, currentOffset);\n  const maxOffset = 8; // Limit to 16 weeks ahead (8 * 2 weeks)\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Navigation Controls */}\n      <div className=\"flex justify-between items-center\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setCurrentOffset(Math.max(0, currentOffset - 4))}\n          disabled={currentOffset === 0}\n          className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n        >\n          ← Vorige\n        </Button>\n        <span className=\"text-sm text-gray-500 font-medium\">\n          {currentOffset === 0 ? 'Komende weken' : `${currentOffset + 1}-${currentOffset + 8} weken vooruit`}\n        </span>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setCurrentOffset(Math.min(maxOffset, currentOffset + 4))}\n          disabled={currentOffset >= maxOffset}\n          className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n        >\n          Volgende →\n        </Button>\n      </div>\n\n      {/* Calendar Grid */}\n      <div className=\"grid grid-cols-4 gap-2\">\n        {fridays.map((friday, index) => {\n          const dateStr = friday.toISOString().split('T')[0];\n          const registrationCount = getRegistrationCount(friday);\n          const minCapacity = 6;\n          const maxCapacity = 12;\n          const isSelected = selectedDate === dateStr;\n          const isConfirmed = registrationCount >= minCapacity;\n          const isFull = registrationCount >= maxCapacity;\n          \n          let dotColor = 'bg-gray-400'; // Default\n          if (isFull) dotColor = 'bg-red-500'; // Full\n          else if (isConfirmed) dotColor = 'bg-blue-500'; // Confirmed\n          else if (registrationCount > 0) dotColor = 'bg-green-500'; // Some registrations\n\n          return (\n            <button\n              key={index}\n              type=\"button\"\n              disabled={isFull}\n              onClick={() => !isFull && onDateSelect(dateStr)}\n              className={`p-3 rounded-lg border-2 transition-all duration-200 ${\n                isSelected \n                  ? 'border-orange-500 bg-orange-50' \n                  : 'border-gray-200 hover:border-orange-300'\n              } ${isFull ? 'opacity-50 cursor-not-allowed' : 'hover:bg-orange-50'}`}\n            >\n              <div className=\"text-center\">\n                <div className=\"text-sm font-semibold\">\n                  {friday.toLocaleDateString('nl-NL', { day: 'numeric', month: 'short' })}\n                </div>\n                <div className=\"text-xs text-gray-500 mb-2\">17:00-19:00</div>\n                <div className={`w-3 h-3 rounded-full mx-auto ${dotColor}`} />\n                <div className=\"text-xs mt-1\">\n                  {isFull ? 'Vol' : isConfirmed ? 'Gaat door' : `${registrationCount}/${minCapacity}`}\n                </div>\n              </div>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function RamenSection() {\n  const [formData, setFormData] = useState({\n    customerName: \"\",\n    customerEmail: \"\",\n    customerPhone: \"\",\n    preferredDate: \"\",\n    servings: 1,\n    notes: \"\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(\"POST\", \"/api/orders/ramen\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ramen Avond Aanmelding\",\n        description: \"Je aanmelding is succesvol verstuurd! We nemen binnen 24 uur contact met je op.\",\n      });\n      setFormData({\n        customerName: \"\",\n        customerEmail: \"\",\n        customerPhone: \"\",\n        preferredDate: \"\",\n        servings: 1,\n        notes: \"\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/workshop-orders\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fout bij aanmelden\",\n        description: \"Er is iets misgegaan. Probeer het opnieuw of neem contact met ons op.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.customerName || !formData.customerEmail || !formData.preferredDate) {\n      toast({\n        title: \"Velden niet ingevuld\",\n        description: \"Vul alle verplichte velden in.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    mutation.mutate(formData);\n  };\n\n  return (\n    <section className=\"py-20 bg-gradient-to-r from-amber-50/50 to-orange-100/30 dark:from-amber-950/20 dark:to-orange-950/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          {/* Left Content */}\n          <div className=\"space-y-8\">\n            <div>\n              <h2 className=\"font-display text-4xl font-bold mb-6\">\n                <span className=\"brewery-text-gradient\">Ramen Avonden</span>\n              </h2>\n              <p className=\"text-xl text-muted-foreground mb-6\">\n                Verse ramen elke vrijdag tussen 17:00-19:00. Minimaal 4 dagen van tevoren boeken.\n              </p>\n            </div>\n\n            {/* Workshop Info Cards */}\n            <div className=\"grid sm:grid-cols-2 gap-4\">\n              <Card className=\"border-orange-200\">\n                <CardContent className=\"p-4 flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 brewery-gradient rounded-full flex items-center justify-center\">\n                    <Calendar className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">Alleen Vrijdagen</h4>\n                    <p className=\"text-sm text-muted-foreground\">17:00 - 19:00</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-orange-200\">\n                <CardContent className=\"p-4 flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 brewery-gradient rounded-full flex items-center justify-center\">\n                    <Users className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">Minimaal 6 Personen</h4>\n                    <p className=\"text-sm text-muted-foreground\">Intieme setting voor beste kwaliteit</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-orange-200\">\n                <CardContent className=\"p-4 flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 brewery-gradient rounded-full flex items-center justify-center\">\n                    <ChefHat className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">Lokale Ingrediënten</h4>\n                    <p className=\"text-sm text-muted-foreground\">Verse ingrediënten uit Groningen</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-orange-200\">\n                <CardContent className=\"p-4 flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 brewery-gradient rounded-full flex items-center justify-center\">\n                    <MapPin className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">Authentieke Technieken</h4>\n                    <p className=\"text-sm text-muted-foreground\">Japanse methoden</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Ramen Type Selection */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-xl font-bold mb-4 text-center\">Kies je Ramen Type:</h3>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card className=\"border-2 border-orange-300 bg-gradient-to-br from-orange-50 to-amber-50\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex gap-4 items-start mb-4\">\n                    <div className=\"w-24 h-24 rounded-lg overflow-hidden flex-shrink-0\">\n                      <img\n                        src=\"/images/chicken-shoyu-ramen.jpg\"\n                        alt=\"Chicken Shoyu Ramen\"\n                        className=\"w-full h-full object-cover\"\n                        onError={(e) => {\n                          const target = e.target as HTMLImageElement;\n                          target.style.display = 'none';\n                          target.nextElementSibling?.classList.remove('hidden');\n                        }}\n                      />\n                      <div className=\"hidden w-full h-full bg-gradient-to-br from-orange-200 to-amber-200 flex items-center justify-center\">\n                        <ChefHat className=\"w-8 h-8 text-orange-600\" />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h3 className=\"font-display text-xl font-bold text-orange-800\">\n                          Chicken Shoyu Ramen\n                        </h3>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold text-orange-600\">€12,50</div>\n                          <div className=\"text-xs text-muted-foreground\">per persoon</div>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        Traditionele ramen met kip en shoyu bouillon\n                      </p>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n                        onClick={() => window.open('/ramen/chicken-shoyu', '_blank')}\n                      >\n                        Meer info\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 border-red-300 bg-gradient-to-br from-red-50 to-pink-50\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex gap-4 items-start mb-4\">\n                    <div className=\"w-24 h-24 rounded-lg overflow-hidden flex-shrink-0 bg-gradient-to-br from-red-200 to-pink-200 flex items-center justify-center\">\n                      <ChefHat className=\"w-8 h-8 text-red-600\" />\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h3 className=\"font-display text-xl font-bold text-red-800\">\n                          Tonkotsu Shoyu Ramen\n                        </h3>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold text-red-600\">€15,00</div>\n                          <div className=\"text-xs text-muted-foreground\">per persoon</div>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        Rijke ramen met varkensbouillon en shoyu\n                      </p>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                        onClick={() => window.open('/ramen/tonkotsu-shoyu', '_blank')}\n                      >\n                        Meer info\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n                \n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"flex items-center text-sm\">\n                    <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                    Verse zelfgemaakte noedels\n                  </div>\n                  <div className=\"flex items-center text-sm\">\n                    <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                    Krokante kip met perfecte textuur\n                  </div>\n                  <div className=\"flex items-center text-sm\">\n                    <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                    Rijke shoyu bouillon (24+ uur getrokken)\n                  </div>\n                  <div className=\"flex items-center text-sm\">\n                    <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                    Verse toppings: ajitsuke tamago, nori, lente-ui en meer\n                  </div>\n                  <div className=\"flex items-center text-sm\">\n                    <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                    Lokale ingrediënten uit Groningen\n                  </div>\n                </div>\n\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full border-orange-300 text-orange-600 hover:bg-orange-50\"\n                  onClick={() => window.location.href = \"/workshop-details\"}\n                >\n                  <ChefHat className=\"w-4 h-4 mr-2\" />\n                  Bekijk Bereidingsproces\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right - Booking Form */}\n          <Card className=\"shadow-2xl border-2 border-orange-200\">\n            <CardHeader className=\"text-center pb-4\">\n              <CardTitle className=\"text-2xl font-display brewery-text-gradient\">\n                Meld je aan voor Ramen Avond\n              </CardTitle>\n              <p className=\"text-muted-foreground\">\n                Reserveer je plek voor de volgende ramen avond\n              </p>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid sm:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\" className=\"flex items-center\">\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Naam *\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.customerName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}\n                      placeholder=\"Je volledige naam\"\n                      className=\"border-orange-200 focus:border-orange-400\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"flex items-center\">\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Email *\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.customerEmail}\n                      onChange={(e) => setFormData(prev => ({ ...prev, customerEmail: e.target.value }))}\n                      placeholder=\"je.email@example.com\"\n                      className=\"border-orange-200 focus:border-orange-400\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\" className=\"flex items-center\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    Telefoon\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData.customerPhone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, customerPhone: e.target.value }))}\n                    placeholder=\"06 12 34 56 78\"\n                    className=\"border-orange-200 focus:border-orange-400\"\n                  />\n                </div>\n\n                {/* Friday Calendar */}\n                <div className=\"space-y-4\">\n                  <Label className=\"flex items-center\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    Kies een vrijdag *\n                  </Label>\n                  <FridayCalendar \n                    selectedDate={formData.preferredDate}\n                    onDateSelect={(date) => setFormData(prev => ({ ...prev, preferredDate: date }))}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"servings\" className=\"flex items-center\">\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    Aantal Personen\n                  </Label>\n                  <Input\n                    id=\"servings\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"4\"\n                    value={formData.servings}\n                    onChange={(e) => setFormData(prev => ({ ...prev, servings: parseInt(e.target.value) }))}\n                    className=\"border-orange-200 focus:border-orange-400\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Opmerkingen</Label>\n                  <textarea\n                    id=\"notes\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                    placeholder=\"Allergieën, dieetwensen of andere opmerkingen...\"\n                    className=\"w-full min-h-[80px] px-3 py-2 border border-orange-200 rounded-md focus:outline-none focus:border-orange-400 resize-none\"\n                    rows={3}\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full brewery-gradient text-white text-lg py-3 hover:scale-105 transition-all duration-300\"\n                  disabled={mutation.isPending}\n                >\n                  {mutation.isPending ? \"Aanmelden...\" : \"Aanmelden voor Ramen Avond\"}\n                </Button>\n\n                <p className=\"text-xs text-muted-foreground text-center\">\n                  * Verplichte velden. We nemen binnen 24 uur contact met je op voor bevestiging.\n                </p>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":20619},"client/src/components/additional-sections.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Leaf, Award } from \"lucide-react\";\nimport FeaturedProductsSection from \"./FeaturedProductsSection\";\n\nexport function AdditionalSections() {\n  return (\n    <>\n      {/* Sustainability Section - Left Aligned */}\n      <section className=\"py-20 bg-gradient-to-r from-green-50/40 to-transparent dark:from-green-950/20 dark:to-transparent\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n            {/* Left - Content */}\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"font-display text-4xl font-bold mb-6\">\n                  <span className=\"brewery-text-gradient\">Duurzaamheid</span>\n                </h2>\n                <p className=\"text-xl text-muted-foreground mb-8\">\n                  Onze kombucha wordt gebrouwen met respect voor de natuur en lokale gemeenschap. \n                  Van biologische ingrediënten tot herbruikbare verpakkingen.\n                </p>\n              </div>\n\n              <div className=\"space-y-6\">\n                <Card className=\"border-2 border-green-100 hover:border-green-300 transition-colors\">\n                  <CardContent className=\"p-6 flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Leaf className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-display text-xl font-bold mb-2\">Biologische Ingrediënten</h3>\n                      <p className=\"text-muted-foreground\">\n                        Alleen gecertificeerde biologische thee en kruiden uit lokale bronnen\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-2 border-green-100 hover:border-green-300 transition-colors ml-8\">\n                  <CardContent className=\"p-6 flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Award className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-display text-xl font-bold mb-2\">Zero Waste</h3>\n                      <p className=\"text-muted-foreground\">\n                        Herbruikbare flessen en compostering van alle organische resten\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Right - Decorative Space */}\n            <div className=\"hidden lg:block\">\n              <div className=\"w-full h-96 bg-gradient-to-bl from-green-100/40 to-emerald-200/30 rounded-3xl flex items-center justify-center\">\n                <div className=\"text-center text-green-300\">\n                  <div className=\"w-32 h-32 bg-gradient-to-br from-green-500/20 to-emerald-600/20 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                    <Leaf className=\"w-16 h-16 text-green-500/40\" />\n                  </div>\n                  <p className=\"text-lg font-display\">Duurzame Brouwerij</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products Section - Right Aligned */}\n      <FeaturedProductsSection />\n    </>\n  );\n}","size_bytes":3638},"client/src/components/workshops-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowRight, Users, Clock, Award } from \"lucide-react\";\n\nexport function WorkshopsSection() {\n  return (\n    <section className=\"py-20 bg-gradient-to-l from-orange-50/30 to-transparent dark:from-orange-950/10 dark:to-transparent\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n          {/* Left - Empty space for balance */}\n          <div className=\"hidden lg:block\">\n            <div className=\"w-full h-96 bg-gradient-to-br from-orange-100/40 to-amber-200/30 rounded-3xl flex items-center justify-center\">\n              <div className=\"text-center text-orange-300\">\n                <div className=\"w-32 h-32 brewery-gradient rounded-full opacity-20 mx-auto mb-4\"></div>\n                <p className=\"text-lg font-display\">Kombucha Brouwerij</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Right - Content */}\n          <div className=\"space-y-8\">\n            <div>\n              <h2 className=\"font-display text-4xl font-bold mb-6\">\n                <span className=\"brewery-text-gradient\">Workshops & Starterspakketen</span>\n              </h2>\n              <p className=\"text-xl text-muted-foreground mb-8\">\n                Doe mee met onze interactieve workshops. Leer de kunst van fermenteren en andere brouwtechnieken.\n                Van beginner tot expert - ontdek de geheimen van fermentatie.\n              </p>\n            </div>\n\n            {/* Workshop Features - Asymmetric Layout */}\n            <div className=\"space-y-6\">\n              <Card className=\"border-2 border-orange-100 hover:border-orange-300 transition-colors\">\n                <CardContent className=\"p-6 flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 brewery-gradient rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Users className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-display text-xl font-bold mb-2\">Kleine Groepen</h3>\n                    <p className=\"text-muted-foreground\">\n                      Maximaal 12 deelnemers per workshop voor persoonlijke begeleiding\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 border-orange-100 hover:border-orange-300 transition-colors ml-8\">\n                <CardContent className=\"p-6 flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 brewery-gradient rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Clock className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-display text-xl font-bold mb-2\">Leer alles over brouwen & fermenteren</h3>\n                    <p className=\"text-muted-foreground\">\n                       Het gehele proces van start tot finish.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 border-orange-100 hover:border-orange-300 transition-colors\">\n                <CardContent className=\"p-6 flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 brewery-gradient rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Award className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-display text-xl font-bold mb-2\">Uitgebreide workshop</h3>\n                    <p className=\"text-muted-foreground\">\n                      Theorie, benodigheden, praktijk en een proeverij als afsluiting. Na de workshop ga je naar huis met je eigen brouwsel om te laten fermenteren.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* CTA */}\n            <div className=\"pt-4\">\n              <Button \n                size=\"lg\"\n                className=\"brewery-gradient text-white px-12 py-4 text-xl rounded-full hover:scale-105 transition-all duration-300\"\n                onClick={() => window.location.href = \"/workshops\"}\n              >\n                Ontdek nu onze workshops\n                <ArrowRight className=\"w-5 h-5 ml-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4557},"client/src/pages/webshop.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ShoppingCart, Search, Filter, Star } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function Webshop() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Filter and sort products\n  const filteredProducts = (products as Product[])\n    .filter((product: Product) => {\n      const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           product.description.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesCategory = selectedCategory === \"all\" || product.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    })\n    .sort((a: Product, b: Product) => {\n      switch (sortBy) {\n        case \"price-low\":\n          return parseFloat(a.price.toString()) - parseFloat(b.price.toString());\n        case \"price-high\":\n          return parseFloat(b.price.toString()) - parseFloat(a.price.toString());\n        case \"stock\":\n          return b.stock - a.stock;\n        default:\n          return a.name.localeCompare(b.name);\n      }\n    });\n\n  const categories = Array.from(new Set((products as Product[]).map((p: Product) => p.category)));\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[50vh]\">\n          <div className=\"brewery-gradient w-16 h-16 rounded-full animate-pulse\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50/50 to-orange-50/50 dark:from-amber-950/10 dark:to-orange-950/10\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8 mt-20\">\n        {/* Page Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"font-display text-6xl font-bold mb-4\">\n            <span className=\"brewery-text-gradient\">Webshop</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Ontdek onze volledige collectie handgemaakte kombucha, workshops en accessoires\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-card rounded-2xl p-6 mb-8 shadow-lg border-2 border-orange-100\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n              <Input\n                placeholder=\"Zoek producten...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 border-orange-200 focus:border-orange-400\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full md:w-48 border-orange-200 focus:border-orange-400\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                <SelectValue placeholder=\"Categorie\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Alle Categorieën</SelectItem>\n                {categories.map((category) => (\n                  <SelectItem key={category} value={category}>\n                    {category === 'andere' ? 'Andere Producten' : category.charAt(0).toUpperCase() + category.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-full md:w-48 border-orange-200 focus:border-orange-400\">\n                <SelectValue placeholder=\"Sorteer op\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"name\">Naam A-Z</SelectItem>\n                <SelectItem value=\"price-low\">Prijs Laag-Hoog</SelectItem>\n                <SelectItem value=\"price-high\">Prijs Hoog-Laag</SelectItem>\n                <SelectItem value=\"stock\">Voorraad</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n          {filteredProducts.map((product: Product) => (\n            <Card key={product.id} className=\"group hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 border-2 border-orange-100 hover:border-orange-300 overflow-hidden\">\n              <div className=\"relative\">\n                {/* Product Image */}\n                <div className=\"aspect-square bg-gradient-to-br from-orange-100 to-amber-200 relative overflow-hidden\">\n                  {(product.imagePath || product.imageUrl) ? (\n                    <img \n                      src={product.imagePath || product.imageUrl} \n                      alt={product.name}\n                      className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n                      onError={(e) => {\n                        // Fallback to imageUrl if imagePath fails\n                        const target = e.target as HTMLImageElement;\n                        if (product.imagePath && product.imageUrl && target.src !== product.imageUrl) {\n                          target.src = product.imageUrl;\n                        } else {\n                          target.style.display = 'none';\n                          target.nextElementSibling?.classList.remove('hidden');\n                        }\n                      }}\n                    />\n                  ) : null}\n                  <div className={`w-full h-full flex items-center justify-center ${(product.imagePath || product.imageUrl) ? 'hidden' : ''}`}>\n                    <div className=\"w-24 h-24 brewery-gradient rounded-full opacity-20\"></div>\n                  </div>\n                  \n                  {/* Badges */}\n                  <div className=\"absolute top-4 left-4 space-y-2\">\n                    {product.featured && (\n                      <Badge className=\"bg-orange-500 text-white\">Featured</Badge>\n                    )}\n                    {product.badges && product.badges.map((badge, index) => (\n                      <Badge key={index} variant=\"secondary\">{badge}</Badge>\n                    ))}\n                  </div>\n\n                  {/* Stock Status */}\n                  <div className=\"absolute top-4 right-4\">\n                    {product.stock === 0 ? (\n                      <Badge variant=\"destructive\">Uitverkocht</Badge>\n                    ) : product.stock <= 5 ? (\n                      <Badge variant=\"destructive\">Laatste {product.stock}!</Badge>\n                    ) : (\n                      <Badge className=\"bg-green-500 text-white\">{product.stock} op voorraad</Badge>\n                    )}\n                  </div>\n\n                  {/* Rating */}\n                  <div className=\"absolute bottom-4 right-4 flex\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                    ))}\n                  </div>\n                </div>\n\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Badge variant=\"outline\" className=\"mb-2 text-orange-600 border-orange-300\">\n                        {product.category === 'andere' ? 'Andere Producten' : product.category.charAt(0).toUpperCase() + product.category.slice(1)}\n                      </Badge>\n                      <h3 className=\"font-display text-xl font-bold text-foreground mb-2\">\n                        {product.name}\n                      </h3>\n                      <p className=\"text-muted-foreground text-sm line-clamp-2\">\n                        {product.description}\n                      </p>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-2xl font-bold text-orange-600\">\n                        €{parseFloat(product.price.toString()).toFixed(2)}\n                      </div>\n                      \n                      <Button \n                        className=\"brewery-gradient text-white hover:scale-105 transition-all duration-200 rounded-full\"\n                        disabled={product.stock === 0}\n                        onClick={() => {\n                          if (product.category === \"workshop\") {\n                            window.location.href = \"/workshops\";\n                          } else {\n                            // Handle product purchase\n                            window.location.href = `/product/${product.id}`;\n                          }\n                        }}\n                      >\n                        <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                        {product.category === \"workshop\" ? \"Boek Nu\" : \"Bestel\"}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        {/* No Results */}\n        {filteredProducts.length === 0 && (\n          <div className=\"text-center py-16\">\n            <div className=\"w-32 h-32 brewery-gradient rounded-full opacity-20 mx-auto mb-6\"></div>\n            <h3 className=\"text-2xl font-bold text-muted-foreground mb-2\">Geen producten gevonden</h3>\n            <p className=\"text-muted-foreground\">\n              Probeer andere zoektermen of pas je filters aan\n            </p>\n          </div>\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":10442},"client/src/components/FeaturedProductsSection.tsx":{"content":"import { Award, Star } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Product } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nfunction FeaturedProductsSection() {\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n  });\n\n  // Get featured products (from category \"andere\")\n  const featuredProducts = products.filter(product => product.category === 'andere' && !product.featured).slice(0, 4);\n\n  return (\n    <section className=\"py-12 bg-gradient-to-l from-purple-50/20 to-transparent dark:from-purple-950/5 dark:to-transparent\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-8\">\n          <h2 className=\"font-display text-4xl font-bold mb-6\">\n            <span className=\"brewery-text-gradient\">Andere Producten</span>\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Ontdek ook onze andere lokale specialiteiten\n          </p>\n        </div>\n\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n          {featuredProducts.map((product) => (\n            <Link key={product.id} href={`/product/${product.id}`} className=\"block\">\n              <Card className=\"border-2 border-purple-100 hover:border-purple-300 transition-colors cursor-pointer h-full\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"aspect-square w-12 h-12 mx-auto mb-3 rounded-lg overflow-hidden bg-gradient-to-br from-purple-500 to-pink-600 flex items-center justify-center\">\n                    {(product.imagePath || product.imageUrl) ? (\n                      <img \n                        src={(product.imagePath || product.imageUrl) as string} \n                        alt={product.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"text-lg text-white\">\n                        {product.name.includes('jam') ? '🍓' : \n                         product.name.includes('ebak') ? '🥐' :\n                         product.name.includes('imonade') ? '🍋' : '✨'}\n                      </div>\n                    )}\n                  </div>\n                  <h3 className=\"font-display text-base font-bold mb-1\">{product.name}</h3>\n                  <p className=\"text-muted-foreground text-xs mb-2 line-clamp-2\">\n                    {product.description}\n                  </p>\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <span className=\"font-bold text-purple-600 text-xs\">€{product.price}</span>\n                    {product.stock <= 5 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">Beperkt</Badge>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n\n        <div className=\"text-center\">\n          <Link href=\"/webshop\">\n            <button className=\"brewery-gradient text-white px-8 py-2 text-lg rounded-full hover:scale-105 transition-all duration-300 font-semibold\">\n              Alle Producten\n              <span className=\"ml-2\">→</span>\n            </button>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default FeaturedProductsSection;","size_bytes":3497},"client/src/components/ramen-section-fixed.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Calendar, Clock, Users, ChefHat, User, Mail, Phone, Star } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WorkshopOrder } from \"@shared/schema\";\n\n// Friday Calendar Component\nfunction FridayCalendar({ selectedDate, onDateSelect }: { selectedDate: string, onDateSelect: (date: string) => void }) {\n  const [currentOffset, setCurrentOffset] = useState(0);\n  const { data: workshopOrders = [] } = useQuery<WorkshopOrder[]>({\n    queryKey: [\"/api/workshop-orders\"],\n    retry: false,\n  });\n\n  // Generate next 8 Fridays starting from an offset\n  const getNextFridays = (count: number = 8, offsetWeeks: number = 0): Date[] => {\n    const fridays: Date[] = [];\n    const today = new Date();\n    let currentDate = new Date(today);\n    \n    // Find next Friday\n    while (currentDate.getDay() !== 5) {\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    // Apply offset\n    currentDate.setDate(currentDate.getDate() + (offsetWeeks * 7));\n    \n    // Generate fridays\n    for (let i = 0; i < count; i++) {\n      fridays.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + 7);\n    }\n    \n    return fridays;\n  };\n\n  const getRegistrationCount = (date: Date): number => {\n    const dateStr = date.toISOString().split('T')[0];\n    return workshopOrders.filter(order => {\n      const orderDate = new Date(order.preferredDate).toISOString().split('T')[0];\n      return orderDate === dateStr;\n    }).length;\n  };\n\n  const fridays = getNextFridays(8, currentOffset);\n  const maxOffset = 8; // Limit to 16 weeks ahead (8 * 2 weeks)\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Navigation Controls */}\n      <div className=\"flex justify-between items-center\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setCurrentOffset(Math.max(0, currentOffset - 4))}\n          disabled={currentOffset === 0}\n          className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n        >\n          ← Vorige\n        </Button>\n        <span className=\"text-sm text-gray-500 font-medium\">\n          {currentOffset === 0 ? 'Komende weken' : `${currentOffset + 1}-${currentOffset + 8} weken vooruit`}\n        </span>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setCurrentOffset(Math.min(maxOffset, currentOffset + 4))}\n          disabled={currentOffset >= maxOffset}\n          className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n        >\n          Volgende →\n        </Button>\n      </div>\n\n      {/* Calendar Grid */}\n      <div className=\"grid grid-cols-4 gap-2\">\n        {fridays.map((friday, index) => {\n          const dateStr = friday.toISOString().split('T')[0];\n          const registrationCount = getRegistrationCount(friday);\n          const minCapacity = 6;\n          const maxCapacity = 12;\n          const isSelected = selectedDate === dateStr;\n          const isConfirmed = registrationCount >= minCapacity;\n          const isFull = registrationCount >= maxCapacity;\n          \n          let dotColor = 'bg-gray-400'; // Default\n          if (isFull) dotColor = 'bg-red-500'; // Full\n          else if (isConfirmed) dotColor = 'bg-blue-500'; // Confirmed\n          else if (registrationCount > 0) dotColor = 'bg-green-500'; // Some registrations\n\n          return (\n            <button\n              key={index}\n              type=\"button\"\n              disabled={isFull}\n              onClick={() => !isFull && onDateSelect(dateStr)}\n              className={`p-3 rounded-lg border-2 transition-all duration-200 ${\n                isSelected \n                  ? 'border-orange-500 bg-orange-50' \n                  : 'border-gray-200 hover:border-orange-300'\n              } ${isFull ? 'opacity-50 cursor-not-allowed' : 'hover:bg-orange-50'}`}\n            >\n              <div className=\"text-center\">\n                <div className=\"text-sm font-semibold\">\n                  {friday.toLocaleDateString('nl-NL', { day: 'numeric', month: 'short' })}\n                </div>\n                <div className=\"text-xs text-gray-500 mb-2\">17:00-19:00</div>\n                <div className={`w-3 h-3 rounded-full mx-auto ${dotColor}`} />\n                <div className=\"text-xs mt-1\">\n                  {isFull ? 'Vol' : isConfirmed ? 'Gaat door' : `${registrationCount}/${minCapacity}`}\n                </div>\n              </div>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function RamenSection() {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [selectedRamenType, setSelectedRamenType] = useState<'chicken' | 'tonkotsu'>('chicken');\n  const [formData, setFormData] = useState({\n    customerName: \"\",\n    customerEmail: \"\",\n    customerPhone: \"\",\n    servings: 1,\n    notes: \"\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return await apiRequest(\"POST\", \"/api/workshop-orders\", orderData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Aanmelding succesvol!\",\n        description: \"Je bent aangemeld voor de ramen avond. We nemen binnen 24 uur contact met je op.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/workshop-orders\"] });\n      setFormData({\n        customerName: \"\",\n        customerEmail: \"\",\n        customerPhone: \"\",\n        servings: 1,\n        notes: \"\"\n      });\n      setSelectedDate(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Aanmelden mislukt\",\n        description: error.message || \"Er ging iets mis bij het aanmelden\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedDate) {\n      toast({\n        title: \"Selecteer een datum\",\n        description: \"Kies een vrijdagavond voor de ramen workshop\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const ramenPrice = selectedRamenType === 'chicken' ? 12.50 : 15.00;\n    const totalAmount = ramenPrice * formData.servings;\n\n    mutation.mutate({\n      ...formData,\n      preferredDate: selectedDate,\n      totalAmount: `€${totalAmount.toFixed(2)}`,\n      status: \"pending\",\n      notes: `${formData.notes}\\n\\nRamen type: ${selectedRamenType === 'chicken' ? 'Chicken Shoyu (€12,50)' : 'Tonkotsu Shoyu (€15,00)'}`\n    });\n  };\n\n  return (\n    <section id=\"ramen\" className=\"py-20 bg-gradient-to-r from-orange-50 via-amber-50 to-yellow-50 dark:from-orange-950/20 dark:via-amber-950/20 dark:to-yellow-950/20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <Badge className=\"mb-4 bg-orange-500 text-white text-lg px-4 py-2\">\n            Vrijdagavond Ramen\n          </Badge>\n          <h2 className=\"font-display text-5xl font-bold mb-6\">\n            <span className=\"brewery-text-gradient\">Authentieke Ramen Avonden</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\">\n            Elke vrijdagavond serveren we verse, handgemaakte ramen in een gezellige sfeer. \n            Kies tussen onze klassieke Chicken Shoyu of premium Tonkotsu Shoyu ramen.\n          </p>\n          \n          <div className=\"flex justify-center space-x-8 text-sm text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              17:00 - 19:00\n            </div>\n            <div className=\"flex items-center\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              6-12 personen\n            </div>\n            <div className=\"flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Alleen vrijdag\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Left - Ramen Types & Info */}\n          <div className=\"space-y-8\">\n            {/* Calendar Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"w-5 h-5 mr-2 text-orange-600\" />\n                  Kies je Ramen Avond\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <FridayCalendar selectedDate={selectedDate} onDateSelect={setSelectedDate} />\n              </CardContent>\n            </Card>\n\n            {/* Ramen Type Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Kies je Ramen Type</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Chicken Shoyu Option */}\n                  <div \n                    onClick={() => setSelectedRamenType('chicken')}\n                    className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                      selectedRamenType === 'chicken' \n                        ? 'border-orange-500 bg-orange-50' \n                        : 'border-gray-200 hover:border-orange-300'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 rounded-lg overflow-hidden flex-shrink-0\">\n                          <img\n                            src=\"/images/chicken-shoyu-ramen.jpg\"\n                            alt=\"Chicken Shoyu Ramen\"\n                            className=\"w-full h-full object-cover\"\n                            onError={(e) => {\n                              const target = e.target as HTMLImageElement;\n                              target.style.display = 'none';\n                              if (target.nextElementSibling) {\n                                (target.nextElementSibling as HTMLElement).classList.remove('hidden');\n                              }\n                            }}\n                          />\n                          <div className=\"hidden w-full h-full bg-gradient-to-br from-orange-200 to-amber-200 flex items-center justify-center\">\n                            <ChefHat className=\"w-6 h-6 text-orange-600\" />\n                          </div>\n                        </div>\n                        <div>\n                          <h3 className=\"font-bold text-lg\">Chicken Shoyu Ramen</h3>\n                          <p className=\"text-sm text-muted-foreground\">Traditionele ramen met kip</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-xl font-bold text-orange-600\">€12,50</div>\n                        <div className=\"text-xs text-muted-foreground\">per persoon</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Tonkotsu Shoyu Option */}\n                  <div \n                    onClick={() => setSelectedRamenType('tonkotsu')}\n                    className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                      selectedRamenType === 'tonkotsu' \n                        ? 'border-red-500 bg-red-50' \n                        : 'border-gray-200 hover:border-red-300'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-red-200 to-pink-200 flex items-center justify-center\">\n                          <ChefHat className=\"w-6 h-6 text-red-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-bold text-lg\">Tonkotsu Shoyu Ramen</h3>\n                          <p className=\"text-sm text-muted-foreground\">Premium ramen met varkensbouillon</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-xl font-bold text-red-600\">€15,00</div>\n                        <div className=\"text-xs text-muted-foreground\">per persoon</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* More Info Buttons */}\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n                    onClick={() => window.open('/ramen/chicken-shoyu', '_blank')}\n                  >\n                    Chicken Shoyu Info\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                    onClick={() => window.open('/ramen/tonkotsu-shoyu', '_blank')}\n                  >\n                    Tonkotsu Shoyu Info\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Wat te verwachten</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                  <span>Verse zelfgemaakte noedels</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                  <span>24-36 uur getrokken bouillon</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                  <span>Verse toppings en lokale ingrediënten</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                  <span>Gezellige sfeer met andere ramen liefhebbers</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right - Booking Form */}\n          <Card className=\"shadow-2xl border-2 border-orange-200\">\n            <CardHeader className=\"text-center pb-4\">\n              <CardTitle className=\"text-2xl font-display brewery-text-gradient\">\n                Meld je aan voor Ramen Avond\n              </CardTitle>\n              <p className=\"text-muted-foreground\">\n                Reserveer je plek voor de volgende ramen avond\n              </p>\n            </CardHeader>\n            <CardContent className=\"pb-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid sm:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\" className=\"flex items-center\">\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Naam *\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.customerName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}\n                      placeholder=\"Je volledige naam\"\n                      className=\"border-orange-200 focus:border-orange-400\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"flex items-center\">\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Email *\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.customerEmail}\n                      onChange={(e) => setFormData(prev => ({ ...prev, customerEmail: e.target.value }))}\n                      placeholder=\"je.email@example.com\"\n                      className=\"border-orange-200 focus:border-orange-400\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\" className=\"flex items-center\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    Telefoonnummer *\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={formData.customerPhone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, customerPhone: e.target.value }))}\n                    placeholder=\"+31 6 12345678\"\n                    className=\"border-orange-200 focus:border-orange-400\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"servings\">Aantal personen (max 4 per aanmelding)</Label>\n                  <Input\n                    id=\"servings\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"4\"\n                    value={formData.servings}\n                    onChange={(e) => setFormData(prev => ({ ...prev, servings: parseInt(e.target.value) }))}\n                    className=\"border-orange-200 focus:border-orange-400\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Opmerkingen</Label>\n                  <textarea\n                    id=\"notes\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                    placeholder=\"Allergieën, dieetwensen of andere opmerkingen...\"\n                    className=\"w-full min-h-[80px] px-3 py-2 border border-orange-200 rounded-md focus:outline-none focus:border-orange-400 resize-none\"\n                    rows={3}\n                  />\n                </div>\n\n                {/* Total Price Display */}\n                {selectedDate && (\n                  <div className=\"bg-orange-50 p-3 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Totaal ({formData.servings}x {selectedRamenType === 'chicken' ? 'Chicken Shoyu' : 'Tonkotsu Shoyu'}):</span>\n                      <span className=\"font-bold text-orange-600\">\n                        €{((selectedRamenType === 'chicken' ? 12.50 : 15.00) * formData.servings).toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full brewery-gradient text-white text-lg py-3 hover:scale-105 transition-all duration-300\"\n                  disabled={mutation.isPending}\n                >\n                  {mutation.isPending ? \"Aanmelden...\" : \"Aanmelden voor Ramen Avond\"}\n                </Button>\n\n                <p className=\"text-xs text-muted-foreground text-center mb-0\">\n                  * Verplichte velden. We nemen binnen 24 uur contact met je op voor bevestiging.\n                </p>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":20132},"client/src/pages/product/[id].tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Star, ShoppingCart, Minus, Plus, ArrowLeft, Package, Truck, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product } from \"@shared/schema\";\nimport FeaturedProductsSection from \"@/components/FeaturedProductsSection\";\n\nexport default function ProductPage() {\n  const { id } = useParams<{ id: string }>();\n  \n  // Scroll to top when component mounts\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [id]);\n  const [quantity, setQuantity] = useState(1);\n  const [deliveryMethod, setDeliveryMethod] = useState<'pickup' | 'delivery'>('pickup');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n  });\n\n  const product = products.find(p => p.id === parseInt(id || '0'));\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return await apiRequest(\"POST\", \"/api/orders\", orderData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Toegevoegd aan winkelwagen!\",\n        description: `${quantity}x ${product?.name} toegevoegd`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fout bij toevoegen\",\n        description: error.message || \"Er ging iets mis bij het toevoegen aan de winkelwagen\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = () => {\n    if (!product) return;\n    \n    if (product.stock < quantity) {\n      toast({\n        title: \"Onvoldoende voorraad\",\n        description: `Nog slechts ${product.stock} stuks beschikbaar`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addToCartMutation.mutate({\n      productId: product.id,\n      quantity,\n      customerName: \"Gast\", // This would normally come from user session\n      customerEmail: \"gast@example.com\", // This would normally come from user session\n      customerPhone: \"\",\n      deliveryMethod,\n      totalAmount: `€${(parseFloat(product.price) * quantity).toFixed(2)}`,\n      status: \"pending\"\n    });\n  };\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-amber-50 to-yellow-50 dark:from-orange-950/20 dark:via-amber-950/20 dark:to-yellow-950/20\">\n        <div className=\"container mx-auto px-4 py-20 text-center\">\n          <h1 className=\"text-4xl font-display font-bold mb-8\">Product niet gevonden</h1>\n          <Button onClick={() => window.history.back()}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Terug\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-amber-50 to-yellow-50 dark:from-orange-950/20 dark:via-amber-950/20 dark:to-yellow-950/20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button variant=\"outline\" onClick={() => window.history.back()}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Terug naar webshop\n          </Button>\n        </div>\n\n        {/* Product Details */}\n        <div className=\"grid lg:grid-cols-2 gap-12 mb-20\">\n          {/* Left - Product Image */}\n          <div className=\"space-y-6\">\n            <div className=\"aspect-square bg-gradient-to-br from-orange-100 to-amber-200 dark:from-orange-900/50 dark:to-amber-900/50 rounded-2xl overflow-hidden\">\n              {(product.imagePath || product.imageUrl) ? (\n                <img \n                  src={product.imagePath || product.imageUrl} \n                  alt={product.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center\">\n                  <Package className=\"w-24 h-24 text-orange-600 dark:text-orange-400\" />\n                </div>\n              )}\n            </div>\n\n            {/* Product Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2 text-green-600\" />\n                  Product Kenmerken\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {product.badges && product.badges.map((badge, index) => (\n                  <div key={index} className=\"flex items-center\">\n                    <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                    <span className=\"text-sm\">{badge}</span>\n                  </div>\n                ))}\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                  <span className=\"text-sm\">Lokaal geproduceerd in Groningen</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-orange-500 mr-2\" />\n                  <span className=\"text-sm\">Hoogste kwaliteit ingrediënten</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right - Product Info & Purchase */}\n          <div className=\"space-y-6\">\n            {/* Product Header */}\n            <div>\n              <Badge variant=\"outline\" className=\"mb-2 text-orange-600 border-orange-300\">\n                {product.category === 'andere' ? 'Andere Producten' : product.category.charAt(0).toUpperCase() + product.category.slice(1)}\n              </Badge>\n              <h1 className=\"font-display text-4xl font-bold text-foreground mb-4\">\n                {product.name}\n              </h1>\n              <div className=\"flex items-baseline gap-2 mb-6\">\n                <span className=\"text-4xl font-bold text-orange-600\">€{product.price}</span>\n                <span className=\"text-lg text-muted-foreground\">per stuk</span>\n              </div>\n            </div>\n\n            {/* Description */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <p className=\"text-lg leading-relaxed text-muted-foreground\">\n                  {product.description}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Stock Status */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">Voorraad Status:</span>\n                  {product.stock === 0 ? (\n                    <Badge variant=\"destructive\">Uitverkocht</Badge>\n                  ) : product.stock <= 5 ? (\n                    <Badge variant=\"destructive\">Laatste {product.stock} stuks!</Badge>\n                  ) : (\n                    <Badge className=\"bg-green-500 text-white\">{product.stock} op voorraad</Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Purchase Options */}\n            {product.stock > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                    Bestelling\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Quantity Selector */}\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"font-medium\">Aantal:</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                        disabled={quantity <= 1}\n                      >\n                        <Minus className=\"w-4 h-4\" />\n                      </Button>\n                      <Input\n                        type=\"number\"\n                        value={quantity}\n                        onChange={(e) => setQuantity(Math.max(1, Math.min(product.stock, parseInt(e.target.value) || 1)))}\n                        className=\"w-20 text-center\"\n                        min={1}\n                        max={product.stock}\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setQuantity(Math.min(product.stock, quantity + 1))}\n                        disabled={quantity >= product.stock}\n                      >\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Delivery Method */}\n                  <div className=\"space-y-2\">\n                    <span className=\"font-medium\">Bezorging:</span>\n                    <Select value={deliveryMethod} onValueChange={(value: 'pickup' | 'delivery') => setDeliveryMethod(value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pickup\">\n                          <div className=\"flex items-center\">\n                            <Package className=\"w-4 h-4 mr-2\" />\n                            Ophalen in Groningen\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"delivery\">\n                          <div className=\"flex items-center\">\n                            <Truck className=\"w-4 h-4 mr-2\" />\n                            Bezorgen (+€2,50)\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  {/* Total Price */}\n                  <div className=\"flex items-center justify-between text-lg font-bold\">\n                    <span>Totaal:</span>\n                    <span className=\"text-orange-600\">\n                      €{((parseFloat(product.price) * quantity) + (deliveryMethod === 'delivery' ? 2.5 : 0)).toFixed(2)}\n                    </span>\n                  </div>\n\n                  {/* Add to Cart Button */}\n                  <Button \n                    onClick={handleAddToCart}\n                    disabled={addToCartMutation.isPending}\n                    className=\"w-full brewery-gradient text-white text-lg py-3 hover:scale-105 transition-all duration-300\"\n                  >\n                    {addToCartMutation.isPending ? \"Toevoegen...\" : \"Toevoegen aan Winkelwagen\"}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Rating */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">Klantbeoordeling:</span>\n                  <div className=\"flex\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"w-5 h-5 fill-yellow-400 text-yellow-400\" />\n                    ))}\n                    <span className=\"ml-2 text-sm text-muted-foreground\">(4.8/5)</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Featured Products Section */}\n        <FeaturedProductsSection />\n      </div>\n    </div>\n  );\n}","size_bytes":12200},"client/src/components/product-carousel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, Star, ArrowRight } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { Product } from \"@shared/schema\";\n\nexport function ProductCarousel() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  \n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Filter featured products\n  const featuredProducts = (products as Product[]).filter((product: Product) => product.featured || product.category === \"kombucha\");\n  \n  if (featuredProducts.length === 0) {\n    return null;\n  }\n\n  const nextSlide = () => {\n    setCurrentIndex((prev) => (prev + 1) % Math.min(featuredProducts.length, 4));\n  };\n\n  const prevSlide = () => {\n    setCurrentIndex((prev) => (prev - 1 + Math.min(featuredProducts.length, 4)) % Math.min(featuredProducts.length, 4));\n  };\n\n  return (\n    <section id=\"featured-products\" className=\"py-20 bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-950/20 dark:to-orange-950/20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-12\">\n          <h2 className=\"font-display text-3xl font-bold mb-4\">\n            <span className=\"brewery-text-gradient\">Onze Specialiteiten</span>\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto mb-6\">\n            Ontdek onze handgemaakte kombucha collectie, gebrouwen met liefde en lokale ingrediënten\n          </p>\n        </div>\n\n        {/* Product Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {featuredProducts.slice(0, 8).map((product: Product) => (\n            <div key={product.id} className=\"w-full\">\n                  <Card \n                    className=\"group hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 overflow-hidden border-2 border-orange-200/50 hover:border-orange-300 cursor-pointer\"\n                    onClick={() => window.location.href = `/product/${product.id}`}\n                  >\n                    <div className=\"relative\">\n                      {/* Product Image */}\n                      <div className=\"aspect-square bg-gradient-to-br from-orange-100 to-amber-200 relative overflow-hidden\">\n                        {product.imageUrl ? (\n                          <img \n                            src={product.imageUrl} \n                            alt={product.name}\n                            className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <div className=\"w-32 h-32 brewery-gradient rounded-full opacity-20\"></div>\n                          </div>\n                        )}\n                        \n                        {/* Badge */}\n                        {product.badges && product.badges.length > 0 && (\n                          <Badge className=\"absolute top-4 left-4 bg-orange-500 text-white\">\n                            {product.badges[0]}\n                          </Badge>\n                        )}\n\n                        {/* Stock Indicator */}\n                        {product.stock <= 5 && product.stock > 0 && (\n                          <Badge variant=\"destructive\" className=\"absolute top-4 right-4\">\n                            Laatste {product.stock}!\n                          </Badge>\n                        )}\n\n                        {/* Star Rating */}\n                        <div className=\"absolute bottom-4 right-4 flex\">\n                          {Array.from({ length: 5 }, (_, i) => (\n                            <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                          ))}\n                        </div>\n                      </div>\n\n                      <CardContent className=\"p-6\">\n                        <div className=\"space-y-4\">\n                          <div>\n                            <h3 className=\"font-display text-2xl font-bold text-foreground mb-2\">\n                              {product.name}\n                            </h3>\n                            <p className=\"text-muted-foreground line-clamp-3 leading-relaxed\">\n                              {product.description}\n                            </p>\n                          </div>\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-3xl font-bold text-orange-600\">\n                              €{parseFloat(product.price.toString()).toFixed(2)}\n                            </div>\n                            \n                            <Button \n                              className=\"brewery-gradient text-white hover:scale-105 transition-all duration-200 rounded-full\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                window.location.href = `/product/${product.id}`;\n                              }}\n                            >\n                              <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                              Bekijk Product\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </div>\n                  </Card>\n                </div>\n          ))}\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center mt-16\">\n          <Button \n            size=\"lg\"\n            className=\"brewery-gradient text-white px-12 py-4 text-xl rounded-full hover:scale-105 transition-all duration-300\"\n            onClick={() => window.location.href = \"/webshop\"}\n          >\n            Bekijk Alle Producten\n            <ArrowRight className=\"w-5 h-5 ml-3\" />\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6196},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8198}}}